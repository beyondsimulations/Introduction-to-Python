{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lecture VIII - Data Visualization\"\n",
        "subtitle: \"Programming with Python\"\n",
        "author: \"Dr. Tobias Vlćek\"\n",
        "institute: \"Kühne Logistics University Hamburg - Fall 2024\"\n",
        "title-slide-attributes:\n",
        "    data-background-color: \"#FFE0D3\"\n",
        "\n",
        "execute:\n",
        "    echo: true\n",
        "\n",
        "format:\n",
        "    revealjs:\n",
        "        theme: [default, ../styles.scss]\n",
        "        transition: slide\n",
        "        transition-speed: fast\n",
        "        highlight-style: arrow\n",
        "        code-overflow: wrap\n",
        "        slide-number: true\n",
        "        code-copy: true\n",
        "        code-link: true\n",
        "        preview-links: auto\n",
        "        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-plotting.qmd)\"\n",
        "        output-file: lecture-plotting-presentation.html\n",
        "    html:\n",
        "        theme: litera\n",
        "        highlight-style: arrow\n",
        "        code-overflow: wrap\n",
        "        linkcolor: \"#a60000\"\n",
        "        slide-number: true\n",
        "        code-copy: true\n",
        "        code-link: true\n",
        "        toc: true\n",
        "        toc-location: right\n",
        "    pdf: \n",
        "        documentclass: report\n",
        "        geometry:\n",
        "            - margin=1in\n",
        "        fontfamily: roboto\n",
        "        fontfamilyoptions: sfdefault\n",
        "        colorlinks: true\n",
        "---\n",
        "\n",
        "\n",
        "# [Quick Recap of the last Lecture]{.flow} {.title}\n",
        "\n",
        "## NumPy: Efficient Computations\n",
        "\n",
        "- Fundamental package for [scientific computing]{.highlight} in Python\n",
        "- Support for large, multi-dimensional arrays and matrices\n",
        "- [Wide range]{.highlight} of mathematical functions for arrays:\n",
        "  - Fast array operations\n",
        "  - Broadcasting capabilities\n",
        "  - Linear algebra functions\n",
        "  - Random number generation\n",
        "\n",
        "## Pandas: Data Analysis\n",
        "\n",
        "- Powerful library for [data manipulation and analysis]{.highlight}\n",
        "- Built on top of NumPy, providing additional functionality\n",
        "- Key features of Pandas include:\n",
        "  - Data loading from various file formats\n",
        "  - Data cleaning and preprocessing\n",
        "  - Powerful grouping and aggregation operations\n",
        "  - Merging and joining datasets (not covered!)\n",
        "\n",
        "## Why NumPy and Pandas are Essential\n",
        "\n",
        "- Basic tools for [scientific computing]{.highlight} and [data analysis]{.highlight}\n",
        "- [Efficient data structures]{.highlight} and operations for large data\n",
        "- Integration with other scientific Python libraries\n",
        "- Used in data science, machine learning, and research\n",
        "\n",
        ". . .\n",
        "\n",
        "::: {.callout-tip}\n",
        "You might also need them in future lectures here!\n",
        ":::\n",
        "\n",
        "# [Data Visualization]{.flow} {.title}\n",
        "\n",
        "##\n",
        "\n",
        "::: {.r-fit-text}\n",
        "\n",
        "[Question:]{.question} What is\n",
        "\n",
        "data visualization?\n",
        "\n",
        ":::\n",
        "\n",
        "## Visual Representations of Data\n"
      ],
      "id": "45fb6226"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "# Generate data\n",
        "np.random.seed(42)\n",
        "x = np.linspace(0, 10, 50)\n",
        "y = 3 + 2*x + np.random.randn(50)\n",
        "sizes = np.random.randint(20, 200, 50)\n",
        "colors = np.random.rand(50)\n",
        "\n",
        "# Create the plot\n",
        "plt.figure(figsize=(12, 5))\n",
        "scatter = plt.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')\n",
        "\n",
        "# Add trend line\n",
        "z = np.polyfit(x, y, 1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(x, p(x), \"r--\", alpha=0.8, linewidth=2)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"ScatterPlot with Trend Line\", fontsize=16)\n",
        "plt.xlabel(\"X-axis\", fontsize=12)\n",
        "plt.ylabel(\"Y-axis\", fontsize=12)\n",
        "plt.colorbar(scatter, label=\"Color Scale\")\n",
        "\n",
        "# Add a text annotation\n",
        "plt.annotate(\"Interesting point\", xy=(8, 21), xytext=(6.5, 23),\n",
        "             arrowprops=dict(facecolor='black', shrink=0.05))\n",
        "\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "eec44f4b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Importance of Data Visualization\n",
        "\n",
        "- [Communicates]{.highlight} complex information clearly\n",
        "- Helps in [decision-making]{.highlight} processes\n",
        "- Reveals hidden patterns and relationships in data\n",
        "- Makes data more [accessible]{.highlight} and engaging\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "Helps to [convice]{.highlight} stakeholders!\n",
        "\n",
        ":::\n",
        "\n",
        "# [Common Types of Data Visualizations]{.flow} {.title}\n",
        "\n",
        "## Bar Charts and Histograms\n",
        "\n",
        "- Bar charts: Compare quantities across categories\n",
        "- Histograms: Show distribution of a continuous variable\n"
      ],
      "id": "c377f2e4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Bar chart\n",
        "categories = ['A', 'B', 'C', 'D']\n",
        "values = [4, 7, 2, 8]\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "plt.subplot(121)\n",
        "plt.bar(categories, values)\n",
        "plt.title('Bar Chart')\n",
        "\n",
        "# Histogram\n",
        "data = np.random.randn(1000)\n",
        "\n",
        "plt.subplot(122)\n",
        "plt.hist(data, bins=30)\n",
        "plt.title('Histogram')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "16421f00",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Line Charts and Area Charts\n",
        "\n",
        "- Line charts: Show trends over time or continuous data\n",
        "- Area charts: Similar to line charts, but with filled areas\n"
      ],
      "id": "4d08e208"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x = np.linspace(0, 10, 100)\n",
        "y1 = np.sin(x)\n",
        "y2 = np.cos(x)\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "plt.subplot(121)\n",
        "plt.plot(x, y1, label='sin(x)')\n",
        "plt.plot(x, y2, label='cos(x)')\n",
        "plt.title('Line Chart')\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(122)\n",
        "plt.fill_between(x, y1, label='sin(x)')\n",
        "plt.fill_between(x, y2, label='cos(x)', alpha=0.5)\n",
        "plt.title('Area Chart')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "0fcca8d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Scatter Plots and Bubble Charts\n",
        "\n",
        "- Scatter plots: Show relationship between two variables\n",
        "- Bubble charts: Adds dimension with varying point sizes\n"
      ],
      "id": "9d8b2882"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x = np.random.rand(50)\n",
        "y = np.random.rand(50)\n",
        "sizes = np.random.rand(50) * 500\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "plt.subplot(121)\n",
        "plt.scatter(x, y)\n",
        "plt.title('Scatter Plot')\n",
        "\n",
        "plt.subplot(122)\n",
        "plt.scatter(x, y, s=sizes, alpha=0.5)\n",
        "plt.title('Bubble Chart')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "94b0e0b1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Pie Charts and Donut Charts\n",
        "\n",
        "- Pie charts: Show composition of a whole\n",
        "- Donut charts: Similar to pie charts, but with a hole in the center\n"
      ],
      "id": "3f3d5379"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "labels = 'A', 'B', 'C', 'D'\n",
        "sizes = [15, 30, 45, 10]\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "\n",
        "# Pie chart (left subplot)\n",
        "plt.subplot(121)\n",
        "plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n",
        "plt.title('Pie Chart')\n",
        "\n",
        "# Donut chart (right subplot)\n",
        "plt.subplot(122)\n",
        "plt.pie(sizes, labels=labels, autopct='%1.1f%%', \n",
        "        pctdistance=0.7, labeldistance=1.1,\n",
        "        wedgeprops=dict(width=0.5, edgecolor='white'))\n",
        "plt.title('Donut Chart')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "3cc48ed4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heatmaps and Choropleth Maps\n",
        "\n",
        "- Heatmaps: Show intensity of data using color scales\n",
        "- Choropleth maps: Geographical colored areas \n",
        "\n",
        "## Box Plots and Violin Plots\n",
        "\n",
        "- Box plots: Show distribution of data through quartiles\n",
        "- Violin plots: Combine box plot with kernel density\n"
      ],
      "id": "725168ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "data = [np.random.normal(0, std, 100) for std in range(1, 5)]\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "plt.subplot(121)\n",
        "plt.boxplot(data)\n",
        "plt.title('Box Plot')\n",
        "\n",
        "plt.subplot(122)\n",
        "sns.violinplot(data=data)\n",
        "plt.title('Violin Plot')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "5063aabb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Network Graphs and Trees\n",
        "\n",
        "- Network graphs: Show relationships between entities\n",
        "- Tree diagrams: Display hierarchical structures\n"
      ],
      "id": "f5893878"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "\n",
        "# Network graph\n",
        "G = nx.random_geometric_graph(20, 0.3)\n",
        "\n",
        "plt.figure(figsize=(10, 3))\n",
        "plt.subplot(121)\n",
        "nx.draw(G, with_labels=True)\n",
        "plt.title('Network Graph')\n",
        "\n",
        "# Tree diagram\n",
        "T = nx.random_tree(10)\n",
        "\n",
        "plt.subplot(122)\n",
        "pos = nx.spring_layout(T)\n",
        "nx.draw(T, pos, with_labels=True)\n",
        "plt.title('Tree Diagram')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7f4269f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Sankey Diagrams\n",
        "\n",
        "- Show flows between nodes\n",
        "- Useful for visualizing complex systems\n"
      ],
      "id": "6ac23294"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "fig = go.Figure(data=[go.Sankey(\n",
        "    node = dict(\n",
        "      pad = 15,\n",
        "      thickness = 20,\n",
        "      line = dict(color = \"black\", width = 0.5),\n",
        "      label = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n",
        "      color = \"blue\"\n",
        "    ),\n",
        "    link = dict(\n",
        "      source = [0, 1, 0, 2, 3, 3],\n",
        "      target = [2, 3, 3, 4, 4, 5],\n",
        "      value = [8, 4, 2, 8, 4, 2]\n",
        "  ))])\n",
        "\n",
        "fig.update_layout(title_text=\"Sankey Diagram Example\", font_size=10)\n",
        "fig.show()"
      ],
      "id": "d7a861b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Ridgeline Plots\n",
        "\n",
        "- Show distribution of data across categories\n"
      ],
      "id": "0769aabf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats\n",
        "\n",
        "# Create sample data\n",
        "np.random.seed(0)\n",
        "num_points = 500\n",
        "num_distributions = 5\n",
        "\n",
        "data = []\n",
        "for i in range(num_distributions):\n",
        "    distribution = stats.norm.rvs(loc=i, scale=1, size=num_points)\n",
        "    data.append(pd.DataFrame({'value': distribution, 'group': f'Group {i+1}'}))\n",
        "\n",
        "df = pd.concat(data, ignore_index=True)\n",
        "\n",
        "# Create the ridgeline plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "for i, group in enumerate(df['group'].unique()):\n",
        "    group_data = df[df['group'] == group]['value']\n",
        "    sns.kdeplot(data=group_data, shade=True, alpha=0.7, y=i, clip=(0, 10))\n",
        "\n",
        "plt.yticks(range(num_distributions), df['group'].unique())\n",
        "plt.title('Ridgeline Plot Example')\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Group')\n",
        "plt.show()"
      ],
      "id": "8dc0258e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# [Beautiful Plotting]{.flow} {.title}\n",
        "\n",
        "- There are many libraries for data visualization in Python\n",
        "- Some of the most popular libraries are:\n",
        "    - Matplotlib\n",
        "    - Seaborn\n",
        "    - Plotly\n",
        "    - Bokeh\n",
        "    - Altair\n",
        "    - GeoPandas\n",
        "    - Geoplot\n",
        "    - Geoplotlib\n",
        "\n",
        "# [Matplotlib Module]{.flow} {.title}\n",
        "\n",
        "- Matplotlib is the foundation for most Python plotting libraries\n",
        "- Provides a MATLAB-like plotting interface\n",
        "- Highly customizable and suitable for publication-quality figures\n",
        "\n",
        "## Basic Matplotlib Example\n"
      ],
      "id": "09837967"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot([1, 2, 3, 4], [10, 20, 25, 30])\n",
        "plt.show()"
      ],
      "id": "a4f63fe1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# [Matplotlib Module]{.flow} {.title}\n",
        "\n",
        "# [Seaborn Module]{.flow} {.title}\n",
        "\n",
        "# [Plotly Module]{.flow} {.title}\n",
        "\n",
        "# [Dash Module]{.flow} {.title}\n",
        "\n",
        "# [Bokeh Module]{.flow} {.title}"
      ],
      "id": "71c19e2a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from geodatasets import get_path\n",
        "\n",
        "# Load the NYC Airbnb dataset\n",
        "airbnb = gpd.read_file(get_path(\"nyc_airbnb\"))\n",
        "\n",
        "# Group by neighborhood and calculate mean price\n",
        "neighborhood_prices = airbnb.groupby('neighbourhood')['price'].mean().reset_index()\n",
        "\n",
        "# Load NYC neighborhoods shapefile\n",
        "nyc = gpd.read_file(get_path(\"nyc_neighborhoods\"))\n",
        "\n",
        "# Merge neighborhood prices with NYC shapefile\n",
        "nyc = nyc.merge(neighborhood_prices, how='left', left_on='neighborhood', right_on='neighbourhood')\n",
        "\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(15, 10))\n",
        "\n",
        "# Plot the choropleth\n",
        "nyc.plot(column='price', ax=ax, legend=True,\n",
        "         legend_kwds={'label': 'Average Airbnb Price ($)'},\n",
        "         cmap='YlOrRd', missing_kwds={'color': 'lightgrey'})\n",
        "\n",
        "# Remove axes\n",
        "ax.axis('off')\n",
        "\n",
        "# Add a title\n",
        "plt.title('Average Airbnb Prices by Neighborhood in New York City', fontsize=16)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "43a385be"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/tvlcek/Library/Python/3.12/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}