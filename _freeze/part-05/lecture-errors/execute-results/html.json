{
  "hash": "93679c3832c15c82eaf54d2abe96da28",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture V - Handling Errors\"\nsubtitle: \"Programming with Python\"\nauthor: \"Dr. Tobias Vlćek\"\ninstitute: \"Kühne Logistics University Hamburg - Fall 2024\"\ntitle-slide-attributes:\n    data-background-color: \"#FFE0D3\"\n\nexecute:\n    echo: true\n\nformat:\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: breezedark\n        width: 1260\n        height: 840\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-errors.qmd)\"\n        output-file: lecture-errors-presentation.html\n    html:\n        theme: litera\n        highlight-style: breezedark\n        linkcolor: \"#a60000\"\n        slide-number: true\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n    pdf: \n        documentclass: report\n---\n\n\n# [Quick Recap of the last Lecture]{.flow} {.title} \n\n## Data Structures\n\n- [Newly]{.highlight} introduced data structures:\n  - **Tuples**: Ordered, immutable collections\n  - **Lists**: Ordered, mutable collections\n  - **Sets**: Unordered collections of unique elements\n  - **Dictionaries**: Key-value pairs\n\n. . .\n\n::: {#40f70c49 .cell execution_count=1}\n``` {.python .cell-code}\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)\n```\n:::\n\n\n## Operations and Methods\n\n- Each data structure has specific operations and methods:\n  - Tuples and Lists: Indexing, slicing, concatenation\n  - Sets: Union, intersection, difference\n  - Dictionaries: Key-based access, `keys()`, `values()`\n\n. . .\n\n::: {.callout-tip}\n**Comprehensions** for concise creation of these structures are often used in practice to create new data structures from existing ones.\n:::\n\n## I/O and File Handling\n\n- Basic file operations\n  - Opening files with `open()`\n  - Reading and writing files\n  - Using the `with` statement for safer file handling\n\n. . .\n\n::: {.callout-note}\nThis covers the main points from our last lecture on data structures and file handling in Python.\n:::\n\n# [Exceptions]{.flow} {.title} \n\n## What are Exceptions?\n\n- Exceptions are [discovered errors]{.highlight} that occur during the execution\n\n. . . \n\n::: {#9ad86ce0 .cell execution_count=2}\n``` {.python .cell-code}\ndef divide_numbers(a, b):\n        result = a / b\n        return result \n\nprint(divide_numbers(10, 0))\nprint(\"I will not be printed as the program crashed before.\")\n```\n:::\n\n\n. . .\n\n[ZeroDivisionError:]{.errors} division by zero\n\n. . .\n\n:::{.callout-warning}\nUndiscovered errors can be very **hard to debug** and can cause **crashes** and **other issues**.\n:::\n\n## Common Built-in Exceptions I\n\n- `ValueError`: argument of correct type but inappropriate value\n- `TypeError`: function applied to object of inappropriate type\n- `NameError`: raised when a local or global name is not found\n- `IndexError`: raised when a sequence subscript is out of range\n- `KeyError`: raised when a dictionary key is not found\n- `FileNotFoundError`: file or directory not found\n- `ZeroDivisionError`: division or modulo by zero\n\n## Common Built-in Exceptions II\n\n- `AttributeError`: attribute reference or assignment fails\n- `ImportError`: import of a modulefails\n- `SyntaxError`: parser encounters a syntax error\n- `IndentationError`: indentation is not correct\n- `RuntimeError`: error does not fall into any category\n\n. . .\n\n::: {.callout-note}\nThe list of built-in exceptions is even longer, these are just the most common ones. We won't cover the errors listed here in detail, but it is good to be aware of them.\n:::\n\n\n## try-except Blocks\n\n- `try-except` blocks are used to handle exceptions\n- `try` block contains the code that might raise an exception\n- `except` block contains the executed code if an exception occurs\n\n. . .\n\n::: {#7b58789b .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(divide_numbers(10, 0))\nprint(\"I will be printed as the exception was handled!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError: Division by zero is not allowed.\nI will be printed as the exception was handled!\n```\n:::\n:::\n\n\n## try-except Blocks for specific exceptions\n\n- We can also specify [the type of exception]{.highlight} we want to catch\n- This allows for more **specific error handling**\n\n```python\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the specific exception type\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ...\n```\n\n. . .\n\n::: {.callout-note}\n`as e` is used to store the exception in a variable. Not mandatory, but good practice to do so.\n:::\n\n## try-except Blocks in Action\n\n[>Grouptask:]{.task} Solve the following problem using try-except blocks:\n\n. . .\n\n::: {#a783c07b .cell execution_count=4}\n``` {.python .cell-code}\n# Implement a function that converts a string to an integer\n# 1. Try to convert the input_string to an integer\n# 2. If successful, return the integer\n# 3. If a ValueError occurs, catch it and return \"Invalid input: not a number\"\n# 4. If any other exception occurs, catch it and return \n# \"An unexpected error occurred: [type of exception]\"\n\n# Your code here\n\n# Test cases\nprint(string_to_int(\"42\"))        # Should print: 42\nprint(string_to_int(\"Hello\"))     # Should print: Invalid \nprint(string_to_int([123]))       \n```\n:::\n\n\n. . .\n\n[Question:]{.question} What is the output of the last line?\n\n# [Raising Exceptions]{.flow} {.title}\n\n## Raising Exceptions\n\n- We can [raise exceptions ourselves]{.highlight} using the `raise` statement\n- It allows us to handle errors in a more controlled manner\n\n. . .\n\n::: {#44cecc8f .cell execution_count=5}\n``` {.python .cell-code}\ndef validate_age(age):\n    if age < 0:\n        raise ValueError\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n```\n:::\n\n\n[>Task:]{.task} Try to raise an exception in the function above by passing a string to the `validate_age` function. What happens?\n\n## Raising Exceptions with Custom Messages\n\n- We can also raise exceptions with custom messages \n- This helps to provide more information about the error\n\n. . .\n\n::: {#41dee8b1 .cell execution_count=6}\n``` {.python .cell-code}\ndef validate_age(age):\n    if age < 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n```\n:::\n\n\n. . .\n\n[>Question:]{.question} What do you think the `raise` statement will show now?\n\n# [Assertions]{.flow} {.title}\n\n## What are Assertions?\n\n- Assertions are [statements that check if a condition is true]{.highlight}\n- If the condition is false, an `AssertionError` is raised\n- We could use them to check the results of a calculation\n\n. . .\n\n::: {#9270b394 .cell execution_count=7}\n``` {.python .cell-code}\nx = 9\ny = 10\nassert x < y, \"x is not smaller than y\"\nassert isinstance(y, float), \"y is not a float\"\n```\n:::\n\n\n. . . \n\n[>Task:]{.task} Try to run the code above and discuss what happens.\n\n. . .\n\n::: {.callout-note}\n`isinstance` is a built-in function that checks if an object is an instance of a class.\n::: \n\n## Assertions in Action\n\n[>Grouptask:]{.task} Solve the following problem using assertions:\n\n::: {#6b0394dc .cell execution_count=8}\n``` {.python .cell-code}\n# Implement a function that takes a list of integers and returns the sum of the numbers. \n# 1. Use assertions to check if the input is a list \n# 2. Use assertions to check if the list contains only integers.\n# 3. If the list contains only integers, return the sum of the numbers\n\n# Your code here\n\n# Test cases\nprint(sum_of_numbers([1, 2, 3, 4, 5])) # Should print: 15\nprint(sum_of_numbers([1, 2.0, 3, 4, 5])) # Should print: AssertionError\n```\n:::\n\n\n# [Debugging]{.flow} {.title}\n\n## What is Debugging?\n\n- Debugging is the process of [finding and fixing errors]{.highlight} in code\n- We can use `print` and `assert` statements to debug our code\n- We can also use **debugging tools** that are built into most IDEs\n\n<br>\n\n<center>\n<iframe src=\"https://giphy.com/embed/oYQ9HRm5Mo7VXeMNVR\" width=\"480\" height=\"360\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n</center>\n\n## Using Print and Assert\n\n- `print`: check [the values of variables]{.highlight} at different points\n- `assert`: check calculations or the types of variables\n\n. . .\n\n::: {#6641389e .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\nx = \"Hello\" # x is a string\nprint(x)\nx = 42.0 # x is a float\nprint(x)\nassert isinstance(x, float), \"x is not a float\"\nassert x == 42.0, \"x is not 42.0\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\n42.0\n```\n:::\n:::\n\n\n. . .\n\n::: {.callout-note}\nWhile this can be useful, it is not always the best way to debug code.\n:::\n\n## Using Debugging Tools\n\n- We can also use debugging tools [built into most IDEs]{.highlight}\n- Allow to step through code, set breakpoints, and inspect variables\n- We will use Thonny, but there are **many other options**\n\n## Debugging in Thonny I\n\n[>Task:]{.task} Open Thonny and copy the following code:\n\n::: {#a41e9232 .cell execution_count=10}\n``` {.python .cell-code}\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    \n    average = total / count\n    return average\n\n# Test cases\ntest_lists = [\n    [1, 2, 3, 4, 5],\n    [10, 20, 30],\n    []\n    ]\n    \nfor i, test_list in enumerate(test_lists):\n    print(f\"Test case {i + 1}:\")\n    result = calculate_average(test_list)\n    print(f\"Average: {result}\\n\")\n```\n:::\n\n\n## Debugging in Thonny II\n\n- Click on the [bug icon]{.highlight} on the left side of the screen\n\n![](images/thonny_debug.png)\n\n\n## Debugging Tools\n[>Task:]{.task} Run the code and use the debugging tools to find the error.\n\n- Use **step over, step into and step out** to [navigate]{.highlight} through your code\n- Use the **variable viewer** to [inspect variables]{.highlight} at different points\n- Use the **breakpoints** to [pause the execution]{.highlight} at a specific point\n\n. . .\n\n[>Question:]{.question} What do you think the error is?\n\n. . .\n\n::: {.callout-note}\nThe `enumerate` function used in the code is super helpful function that returns a tuple containing the index and the value of the item in the list and it is not the error.\n:::\n\n## Using Logging\n\n- We can also use logging to [track the execution]{.highlight} of a program\n- It is a **structured** way to log errors and other issues\n- You can specify the **level of severity** for each log message\n- **Hide** messages of a certain severity if you want to during execution\n\n. . .\n\n:::{.callout-note}\n**And that's it for todays lecture!**\\\nWe now have covered the basics of errors, exceptions and debugging in Python. Logging is beyond our scope, but it is good to know should you work with larger codebases later on.\n:::\n\n# [Literature]{.flow} {.title}\n\n## Interesting Books\n\n- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Link to free online version](https://greenteapress.com/wp/think-python-3rd-edition/)\n- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n::: {.callout-tip}\nNothing new here, but these are still great books!\n::: \n\n. . .\n\nFor more interesting literature to learn more about Python, take a look at the [literature list](../general/literature.qmd) of this course.\n\n",
    "supporting": [
      "lecture-errors_files"
    ],
    "filters": [],
    "includes": {}
  }
}