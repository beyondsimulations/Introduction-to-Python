{
  "hash": "ec0c3a8e5570bbc8a6dd9871b457094b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture I - Introduction\"\nsubtitle: \"Programming with Python\"\nauthor: \"Dr. Tobias Vlćek\"\ninstitute: \"Kühne Logistics University Hamburg - Fall 2024\"\ntitle-slide-attributes:\n    data-background-color: \"#FFE0D3\"\n\nexecute:\n    echo: true\n\nformat:\n    html:\n        theme: litera\n        highlight-style: breezedark\n        linkcolor: \"#a60000\"\n        slide-number: true\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: breezedark\n        width: 1260\n        height: 840\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-introduction.qmd)\"\n        output-file: lecture-presentation.html\n    pdf: \n        documentclass: report\n---\n\n\n\n\n\n\n\n\n# [About this Course]{.flow} {.title}\n\n## About me\n:::{.incremental}\n- Post-doctoral researcher from the University of Hamburg\n- **Field:** Optimizing and simulating complex systems\n- **Languages:** of choice: Julia, Python and Rust\n- **Interest:** Modelling, Simulations, Machine Learning\n- **Teaching:** OR, Algorithms, and Programming\n- **Contact:** [vlcek@beyondsimulations.com](mailto:vlcek@beyondsimulations.com)\n:::\n\n. . .\n\n:::{.callout-tip}\nI really appreciate active participation and interaction!\n:::\n\n## Course Outline\n- **Part I:** Introduction to Programming with Python\n- **Part II:** Data Science Tools with Python\n- **Part III:** Programming Projects\n\n## Participation\n- Prequisite for course *Management Science* (Prof. Goel)\n- Try actively participating in this course \n- You will find it much (!) easier to follow Prof. Goel's course\n- Materials will be provided in the KLU portal\n- Slides are hosted at [python.beyondsimulations.com](https://python.beyondsimulations.com)\n\n## Teaching\n- **Lecture:** Presentation of tools and concepts, based on small examples and code snippets\n- **Tutorial:** Hands-on examples to be solved in groups\n- **Difficulty:** Difficult at first, but gradually easier\n\n## Passing the Course \n- Pass/fail course\n- 75% attendance required for passing the course\n- 2 assignments and 1 little project\n- You will be given programming exercises to solve with Python\n- You can group up (3 students) and work together \n- Each student group submits one solution together\n\n## Solution\n- Provide a code solution to the problem (`.py` files)\n- Code files need to be executable\n- Detailed explanations of your code should be provided\n- Use comments or docstrings in your code\n- Provide a general (verbal) introduction to each problem\n\n. . .\n\n:::{.callout-tip}\nI'd encourage you to start and submit your solution early\n:::\n\n## Difficulty of the Course\n- We'll cover the basics of programming (in Python) at first\n- This is similar to learning a **new foreign language**\n- First, you have to get used to the language and learn first words\n- **Later**, you'll be able to apply the language and see results\n- Similar to learning a language: *Practice, practice, practice!*\n\n## What to expect\n- Some **investment** in the beginning to see the **return** later\n- You can ask questions and get support anytime \n- After completing the course, you will be able to read code \n- **and** write your own program using Python\n- **That's quite something!**\n\n## Goals of the Course\n- Essential concepts and tools of modern programming\n- Automated solutions for recurrent tasks\n- Algorithm-based solutions of complex problems\n- **Usage of AI** in a specific context\n\n## Python as Language\n- **Origins**: Conceived in late 1980s as a teaching and scripting language\n- **Simple Syntax**: Python’s syntax is straightforward and easy to learn\n- **Versatility**: Used in web development, data analysis, artificial intelligence, and more\n- **Community Support**: A large community of users and extensive documentation\n\n## Help from AI\n- You are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 ...)\n- These new tools are really powerful for learning Python!\n- They can help you a lot to get started with programming\n\n. . .\n\n:::{.callout-warning}\nBut you should *not* simply use them to *replace* your learning.\n:::\n\n# [Why learn programming?]{.flow} {.title}\n\n## [Analytics]{.white} {background-image=\"https://images.unsplash.com/photo-1666875753105-c63a6f3bdc86\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@dengxiangs\">Choong Deng Xiang</a> on <a href=\"https://unsplash.com/photos/graphical-user-interface--WXQm_NTK0U\">Unsplash</a>]{.white}\n:::\n\n## [Research]{.white} {background-image=\"https://images.unsplash.com/photo-1576086213369-97a306d36557\"}\n::: footer\n[Photo by <a href=\"https://images.unsplash.com/photo-1576086213369-97a306d36557\">National Cancer Institute</a> on <a href=\"https://unsplash.com/photos/purple-cells-L7en7Lb-Ovc\">Unsplash</a>]{.white}\n:::\n\n## [Visualization]{.white} {background-image=\"https://images.unsplash.com/photo-1584291527935-456e8e2dd734\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@claybanks\">Clay Banks</a> on <a href=\"https://unsplash.com/photos/red-and-white-heart-illustration-no2blvVYoJw\">Unsplash</a>]{.white}\n:::\n\n## [Finance]{.white} {background-image=\"https://images.unsplash.com/photo-1549421263-5ec394a5ad4c\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@ishant_mishra54\">Ishant Mishra</a> on <a href=\"https://unsplash.com/photos/smartphone-on-brown-wooden-surface-UXEJDX4SqdE\">Unsplash</a>]{.white}\n:::\n\n## [Logistics]{.white} {.white background-image=\"https://images.unsplash.com/photo-1465447142348-e9952c393450\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@dnevozhai\">Denys Nevozhai</a> on <a href=\"https://unsplash.com/photos/aerial-photography-of-concrete-roads-7nrsVjvALnA\">Unsplash</a>]{.white}\n:::\n\n# [How to learn programming]{.flow} {.title}\n\n## My Recommendation\n1. [Be present]{.highlight}: Attend the lecture and participate\n2. [Put in some work]{.highlight}: Repeat lecture notes and try to understand the examples yourself\n3. [Do coding]{.highlight}: Run code examples on your own, play around, *google*/*find help*, modify, and solve problems on your own\n\n. . .\n\n:::{.callout-tip}\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on [Codewars](https://www.codewars.com/).\n:::\n\n## Don't give up!\n- Programming is **problem solving**, don't get **frustrated** too easily at the start!\n- Learn something new: Expect to **stretch** your comfort zone\n\n<center>\n\n<br>\n<iframe src=\"https://giphy.com/embed/FKsCiEI5pFvIQ\" width=\"480\" height=\"360\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\n<center>\n\n## Learning Path\n- The learning path can be quite steep!\n- [First of all help each other!]{.highlight}\n- Try to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, ...)\n- In case you get frustrated with programming, read the following [helpful blog post about the challenges on medium.com](https://medium.com/sololearn/why-learning-to-code-is-soooo-hard-3c2372e9d12c)\n\n## Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form:\\\n[https://tally.so/r/w7oapa](https://tally.so/r/w7oapa)\n\n\n# [Setting up Python]{.flow} {.title}\n\n## Install Python\n- You could download it from the [Python website](https://www.python.org/downloads/) or with [Anaconda](https://www.anaconda.com/products/individual)\n- **But I would recommend we start by using [Thonny](https://thonny.org/)**\n- It is an open source IDE that runs on Windows, Linux and Mac\n- It comes with a built-in Python interpreter and package management!\n\n## What is an IDE?\n- An **IDE** (Integrated Development Environment) is an application \n- It allows you to write, run and debug code scripts\n- Thonny is an IDE specifically for Python and aimed at beginners\n- It does not use the latest Python and has the most features \n- **But it is easy to use as beginner!**\n- Other IDEs include for example [PyCharm](https://www.jetbrains.com/pycharm/) from JetBrains or [Visual Studio Code](https://code.visualstudio.com/) from Microsoft\n\n## Thonny\n- Download and install Thonny from the [website](https://thonny.org/)\n- Start the programm and you should see the following window:\n![First start of Thonny](images/thonny_start.png){#fig-startThonny}\n\n\n## Python on iPads\n- Although you can run Python scripts from on your iPad, it is not recommended for the course\n- Nonetheless, if you have no other option, you could use [Pythonista](https://apps.apple.com/de/app/pythonista-3/id1085978097)\n- It works locally on your iPad and can run most Python scripts\n\n. . .\n\n::: {.callout-caution}\nNot all packages generally available in Python are be available in Pythonista, thus you might need a computer to solve certain problems.\n:::\n\n## First start of Pythonista\n![First start of Pythonista](images/start_pythonista.png){#fig-startPythonista}\n\n# [Your first code]{.flow} {.title}\n\n## Hello, World!\n[Your Task]{.task}: Create a directory for the course and create a new file called `hello_world.py` with the following code and save it:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# This is a comment in Python\nprint(\"Hello, World!\")\n```\n:::\n\n\n. . .\n\nRun the code with the green 'run' button at the top or by going to the line and pressing [Shift+Enter]{.task}:\n\n. . .\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# This is a comment in Python\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\n::: {.callout-note}\n\"Hello world\" is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software.\n:::\n\n## Hello, World in a Message\n[Your Task]{.task}: Change the code in your `hello_world.py` file. Assign the string `\"Hello, World!\"` to a variable called `message` and print the variable.\n\n. . .\n\n- Use the equals sign (=)\n- Variable name goes on the left\n- Value to be assigned goes on the right\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n## Hello, World in Parentheses\nWe can also mix `\"` and `'` in a string. We just have to be consistent:\n\n::: {.cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI shout \"Hello, World!\"\n```\n:::\n:::\n\n\n. . .\n\n\\\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n```\n:::\n\n\n. . .\n\n\\\n[Try it yourself!]{.task} What does happen, if you try to run this code?\n\n## First Errors\n[SyntaxError]{.errors}: invalid syntax\n\n- The code is not valid Python syntax\n- This is likely the most common error that you will encounter!\n- It happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\n- You can fix this by correcting the code and re-running\n- **In the course of the lecture you will encounter many more errors!**\n\n# [Program]{.flow} {.title}\n\n## What is a Program? \n- A sequence of instructions telling a computer what to do\n- Written in a programming language the computer can understand\n- Basic operations in most languages: \n    - **Input**: Get data from keyboard, file, network, sensors, etc.\n    - **Output**: Display data on screen, save to file, send over network, etc.\n    - **Processing**: Perform calculations, analyze data, make decisions, find patterns, etc.\n    \n## Key concepts\n- Key concepts in most languages:\n    - **Variables**: Store and manipulate data \n    - **Conditional execution**: Check conditions and execute accordingly\n    - **Loops**: Perform actions repeatedly, often with variations\n    - **Functions**: Group instructions for reusability\n\n> **Programming**: Process of breaking a large, complex task into smaller and smaller substasks until the subtask is simple enough to be performed with one of these basic instructions (Downey, 2015, P. 2)\n\n## How Python executes code\n- Python is an **interpreted language**\n- The source code is executed line by line\n- The interpreter checks the syntax and executes the code\n- This is in contrast to compiled languages, where the code is compiled into machine code before execution\n\n<center>\n\n\n\n\n\n\n\n```{mermaid}\n%%| echo: false\nflowchart LR\nA[Check Line] --> B{Decision}\nB --> C[Generate Bytecode]\nB --> D[Error in Syntax]\nD --> G[Report Error]\nC --> E[Execute Bytecode]\nE --> F[Output Results]\n```\n\n\n\n\n\n\n\n</center>\n\n## Hello again, World!\nLet's go back to our first program:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n```\n:::\n\n\n. . .\n\n- **Comment**: In the first line we define a comment with `#`\n    - It is not executed but used to explain what code does\n- **Variable**: In the second line we define a variable `message`\n    - It points to a string that contains the text \"Hello, World!\"\n- **Function**: In the third line we call a function `print`\n    - It prints out whatever is stored in `message`\n\n## Don't worry!\n- [Already confused?]{.blue} \n- Don't worry about it for now!\n- We'll learn more about variables and functions later\n\n<center>\n\\\n<iframe src=\"https://giphy.com/embed/12W5Sg2koWYnwA\" width=\"480\" height=\"360\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n<center>\n\n# [Python's Syntax]{.flow} {.title}\n\n## The Zen of Python\n- Python's name originally comes from Monty Python\n- Style is based on a philosophy called [Zen of Python]{.highlight}: A collection of 19 statements intended to communicate general principles\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Try this code in Python to see the Zen of Python\nimport this\n```\n:::\n\n\n## Variables\n- A variable in Python is a name that points to a value\n- Created by using the assignment operator `=`\n- Python does not require a declaration of variable types before\n\n::: {.cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime\n```\n:::\n:::\n\n\n. . .\n\n**But there are certain rules to variable names!**\n\n## Variable Naming Conventions\n- Must start with a letter or underscore `_`\n- Can contain letters, numbers and underscores\n- Names are case sensitive, e.g., `a` and `A` are different!\n- Cannot be a reserved word, e.g., `for`, `if`, `def`, etc\n- Good names are short and meaningful for humans!\n\n. . .\n\n\\\n[Question]{.question}: Which of the following fulfill these conditions?\\\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792\n\n## Functions\n- Functions are named blocks of code \n- Can take arguments `function([arguments])` \n- Can return results or `None`\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=9}\n``` {.python .cell-code code-line-numbers=\"1-2|3|\"}\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\nHello, World!\n```\n:::\n:::\n\n\n::: {.callout-note}\nWe will cover functions in more detail **later** in the course.\n:::\n\n# [Values and Types]{.flow} {.title}\n\n## Values and Types\n- **Value**: Fundamental thing that a program manipulates\n    - In Python, values are either numbers or strings\n- **Type**: Type of a value \n    - Determines what operations can be performed on it\n    - `type()` is a function that returns the type of a value\n    - It takes one argument (a value) and returns its type as string\n\n## Strings\nBack to our example of \"Hello, World!\"\n\n::: {.cell output-location='fragment' execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1-2|4-5|7-8\"}\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World! is a <class 'str'>\n```\n:::\n:::\n\n\n. . .\n\n\\\n**Result**: \"Hello, World\" is a string - in short 'str'.\n\n. . .\n\n[But what about the f\"?]{.blue}\n\n## Formated Strings\n- **f-strings** are strings that start with `f`\n- They contain **expressions** ([here variables]{.blue}) in braces\n- They are evaluated at run time and inserted into the string\n- This is called **interpolation**\n\n. . .\n\n::: {.callout-note}\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with `print()` and `.format()`. But this method is less concise and arguably less readable.\n:::\n\n::: {.cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\nprint(\"{} is a {}\".format(message, message_type))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World! is a <class 'str'>\n```\n:::\n:::\n\n\n## Expressions\n- Produce a value when evaluated\n- Can be used as part of larger expressions or statements\n- Statements are expressions that don't produce a value\n- Examples: arithmetic operations, function calls, variables\n\n::: {.cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe result is 3\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAgain, the result is 3\n```\n:::\n:::\n\n\n## What is a String?\n- [Remember]{.blue}: \"Hello, World\" is a string - in short 'str'\n- A string is a sequence of characters enclosed in quotes\n- Examples: `\"Hello\"`, `'World'`, `\"123\"`, `'1World23'`\n\n::: {.cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nStrings are immutable, we can't change single characters in them once they are created.\n:::\n\n## String Operations\n[But we can also do much more with strings!]{.blue}\\\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\n::: {.cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\nprint(two_strings[0]) # Indexing starts at zero!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=18}\n``` {.python .cell-code}\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHell\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\nprint(len(two_strings)) # With len we can find the length of our string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\nprint(\"--x--\"*3) # We can also repeat strings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--x----x----x--\n```\n:::\n:::\n\n\n## Booleans\n- Booleans represent two values: `True` and `False`\n- Internally they are represented as `1` and `0`, respectively\n- They are used for logical operations and control flow\n- E.g.: `if`, `while`, `for`, `elif`, `else\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=21}\n``` {.python .cell-code}\nx = True\ny = False\nprint(x)\nprint(type(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n<class 'bool'>\n```\n:::\n:::\n\n\n. . .\n\n[> More on them in our next lecture!]{.blue}\n\n## Integers and Floats\n- Integers are whole numbers, e.g.: `1`, `-3`, `0` or `100`\n- Floats are decimal numbers, e.g.: `2.5`, `-4.789123`, `0.0` or 1.234e2\n- Bit size does not have to be specified (e.g.: 64 bits) in Python\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=22}\n``` {.python .cell-code}\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 is of type <class 'int'>\n128.64 is of type float\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-warning}\nThe interpreter will automatically convert booleans to integers to floats when necessary, **but not the other way around!**\n:::\n\n# [First Functions and Operators]{.flow} {.title}\n\n## Arithmetic operators\n. . .\n\n::: {.cell execution_count=23}\n``` {.python .cell-code code-line-numbers=\"1-2|3|4|5|6|7|8\"}\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nNote, how the integers in the division are converted to floats before the division is performed.\n:::\n\n\n## Precedence\n- The operators are the same as in most other languages\n- They can be combined with each other, and with variables\n- Normal rules of precedence apply\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=24}\n``` {.python .cell-code}\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 + 3 * 4 = 14\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=25}\n``` {.python .cell-code}\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2 + 3) * 4 = 20\n```\n:::\n:::\n\n\n## The input() Function\n\n- Used to get user input [as string]{.blue} from the console\n- Syntax: `input([userprompt])`\n- Displays optional prompt and waits for user input\n\n. . .\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n```\n:::\n\n\n. . .\n\n::: {.callout-important}\nThe function always returns the input as **string**!\n:::\n\n. . .\n\n\\\n[> Try it yourself!]{.task}\n\n## Type Conversion\nUse [type conversion]{.blue} for other data types\n\n1. Integer: `int(input())`\n2. Float: `float(input())`\n3. Boolean: `bool(input())`\n\n. . .\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")\n```\n:::\n\n\n## The round() Function\n\n::: {.cell output-location='fragment' execution_count=29}\n``` {.python .cell-code}\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.789 converted to 1 of type <class 'int'>\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=30}\n``` {.python .cell-code}\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.789 converted to 2 of type <class 'int'>\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=31}\n``` {.python .cell-code}\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.789 converted to 1.8 of type <class 'float'>\n```\n:::\n:::\n\n\n. . .\n\n::: {.callout-note}\n**And that's it for todays lecture!**\\\nWe now have covered the basics on the Python syntax, variables, and data types.\n:::\n\n# [Literature]{.flow} {.title}\n\n## Interesting Books to start\n\n- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Link to free online version](https://greenteapress.com/wp/think-python-3rd-edition/)\n- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n::: {.callout-note}\nThink Python is a great book to start with. It's available online for free [here](https://greenteapress.com/wp/think-python-3rd-edition/). Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n::: \n\n. . .\n\nFor more interesting literature to learn more about Python, take a look at the [literature list](../general/literature.qmd) of this course.\n\n",
    "supporting": [
      "lecture-introduction_files/figure-pdf"
    ],
    "filters": []
  }
}