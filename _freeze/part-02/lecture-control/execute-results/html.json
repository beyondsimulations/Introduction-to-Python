{
  "hash": "cab7aca3ea577d31b2ace063f7fbda35",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture II - Control Structures for Your Code\"\nsubtitle: \"Programming with Python\"\nauthor: \"Dr. Tobias Vlćek\"\ninstitute: \"Kühne Logistics University Hamburg - Fall 2024\"\ntitle-slide-attributes:\n    data-background-color: \"#FFE0D3\"\n\nexecute:\n    echo: true\n\nformat:\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: breezedark\n        width: 1260\n        height: 840\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-control.qmd)\"\n        output-file: lecture-presentation.html\n    html:\n        theme: litera\n        highlight-style: breezedark\n        linkcolor: \"#a60000\"\n        slide-number: true\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n    pdf: \n        documentclass: report\n---\n\n\n\n\n\n\n\n\n# [Quick Recap of the last Lecture]{.flow} {.title}\n\n## F-Strings\n\n- F-strings provide a way to embed expressions inside string literals\n- You can include expressions by placing them inside curly braces `{}`\n- This makes it easier to include dynamic content\n\n. . .\n\n::: {#451d4eea .cell output-location='fragment' execution_count=1}\n``` {.python .cell-code}\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-tip}\nWe used the `:.2f` format specifier to round the number to two decimal places [(new)]{.highlight}.\n:::\n\n## Variables and Data Types\n\n- Python uses dynamic typing, i.e. the type is determined at runtime\n- Basic data types in Python are: `int`, `float`, `str`, `bool`\n- Variables are created by assignment with the `=` operator\n\n. . .\n\n[> Question:]{.question} What are the types of `y`, `z`, `w`?\n\n::: {#947e228b .cell output-location='fragment' execution_count=2}\n``` {.python .cell-code}\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny is of type float\nz is of type str\nw is of type bool\n```\n:::\n:::\n\n\n## Arithmetic Operators\n\n::: {.columns}\n::: {.column width=\"30%\"}\nAddition  \\\nSubtraction  \\\nMultiplication  \\\nDivision  \\\nFloor Division  \\\nExponentiation  \\\nModulo\n:::\n::: {.column width=\"10%\"}\n`+`   \\\n`-`   \\\n`*`   \\\n`/`   \\\n`//`  \\\n`**`  \\\n`%`    \n:::\n::: {.column width=\"60%\"}\nAdds two numbers \\\nSubtracts one number from another \\\nMultiplies two numbers \\\nFloating-point division \\\nInteger division \\\nPower of \\\nRemainder of division \n:::\n:::\n\n. . .\n\n:::{.callout-note}\nNote, that the `/` operator always returns a float, even if the division is even. Furthermore, the `+` operator can be used to concatenate strings and that the `*` operator can be used to repeat strings.\n:::\n\n## Arithmetic Operators with Variables\n\n- Additional operators can update the value of a variable [(new)]{.highlight}\n- We can use `+=`, `-=`, `*=`, `/=`, `//=`, `**=`, `%=`\n\n. . .\n\n[> Question:]{.question} What is the value of `x` after the operations?\n\n::: {#9e7c668a .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2\n```\n:::\n:::\n\n\n# [Objects and Methods]{.flow} {.title}\n\n\n## Objects\n\n- Objects are **instances of classes**\n- We will learn more about classes **later** in the course\n- In Python, [virtually]{.highlight} everything is an object\n- Common built-in objects: [integers, strings, lists, dictionaries]{.highlight}\n- For now, think of objects as a collection of data and methods\n\n. . .\n\n:::{.callout-note}\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them.\n:::\n\n## Methods\n\n- Methods are [functions]{.highlight} that are called on an [object]{.highlight}\n- The syntax is `object.method([arguments])`\n- Methods are specific to the type of object they're called on\n- They can modify the object or return information about it\n\n. . .\n\n:::{.callout-tip}\nYou can use the `dir()` function to list all methods and attributes of an object.\n:::\n\n## String Methods\nHere are some commonly used string methods:\n\n- `upper()`: Converts all characters in the string to uppercase\n- `lower()`: Converts all characters in the string to lowercase\n- `title()`: Converts first character of each word to uppercase\n- `strip()`: Removes leading and trailing whitespace\n- `replace()`: Replaces a substring with another substring\n- `find()`: Finds first substring and returns its index\n- `count()`: Counts the number of occurrences of a substring\n\n## String Methods in Action\n\n[> Question:]{.question} What will be the output of the following code?\n\n::: {#a5681530 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code code-line-numbers=\"2|3|4|5|6|7\"}\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nNote, how `replace()` does not modify the original string. Instead, it returns a new string.\n:::\n\n## String Task\n\n[> Grouptask:]{.task} Discuss and implement the following task:\n\n::: {#a9c45107 .cell execution_count=5}\n``` {.python .cell-code}\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n```\n:::\n\n\n. . .\n\n\n:::{.callout-tip}\nRemember, that these methods return a new string. The original string is not modified.\n:::\n\n\n# [Indexing and Slicing]{.flow} {.title}\n\n## Indexing\n\n- We have used indexing to access elements of a string last lecture\n- It allows you to access **elements of a sequence** by position\n- **Positive indexing** starts at 0 for the first element\n- **Negative indexing** starts at -1 for the last element [(new)]{.highlight}\n\n. . .\n\n::: {#33021da8 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH\n!\n```\n:::\n:::\n\n\n## Slicing\n\n- Slicing allows you to **extract a portion of a sequence**\n- Syntax: `sequence[start:stop:step]`\n- `start` is the index of the **first element to include**\n- `stop` is the index of the **first element to exclude**\n- `step` is the increment between indices (default is 1)\n- The result is a **new sequence** containing the extracted elements\n\n. . .\n\n::: {#3a5c7b32 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWorld\nWorld\n```\n:::\n:::\n\n\n## Slicing Simplified\n\n- If we omit `start` or `stop`, it will be replaced by the **start or end** of the sequence, respectively\n- If we omit `step`, it will be replaced by 1\n\n. . .\n\n::: {#6b10e9fc .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHlo ol!\n!dlroW ,olleH\n```\n:::\n:::\n\n\n## Slicing String Task\n\n[> Grouptask:]{.task} Discuss and implement the following task:\n\n::: {#52b47a14 .cell execution_count=9}\n``` {.python .cell-code}\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n```\n:::\n\n\n. . .\n\n\n:::{.callout-tip}\nRemember, that these methods return a new string. The original string is not modified.\n:::\n\n# [Comparisons]{.flow} {.title}\n\n## Comparison Operators\n\n- Comparison operators are used to compare two values\n- The result of a comparison is a boolean value (`True` or `False`)\n\n. . .\n\n[> Question:]{.question} What will be the output of the following code?\n\n::: {#c4ab2389 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1-2|3|4|5|6|7|8\"}\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number > upper_number) # Greater than\nprint(lower_number < upper_number) # Less than\nprint(lower_number >= upper_number) # Greater than or equal to\nprint(lower_number <= upper_number) # Less than or equal to \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n```\n:::\n:::\n\n\n## Logical Operators\n \n- Logical operators combine multiple comparison operators\n- Common logical operators: `and`, `or`, `not`\n\n. . .\n\n[> Question:]{.question} Which of the following expressions is `True`?\n\n::: {#c7a89e14 .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code code-line-numbers=\"1-2|3|4\"}\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number < middle_number and middle_number < upper_number) # and\nprint(lower_number < middle_number or middle_number > upper_number) # or\nprint(lower_number == lower_number and not lower_number > middle_number) # not\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nNote, that `and` and `or` are evaluated from left to right.\n:::\n\n## Membership Operators\n \n- Used to check if a value is present in a sequence\n- Common membership operators: `in`, `not in`\n\n. . .\n\n[> Question:]{.question} Which of these expressions is `True`?\n\n::: {#d1cc73cb .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nNote, that `in` and `not in` can be used for strings, lists, tuples, sets, and dictionaries. [Don't worry!]{.highlight} We will learn about lists, tuples, sets, and dictionaries later in the course.\n:::\n\n# [Control Structures]{.flow} {.title}\n\n## Control Structures\n\n- Used to **control the flow of execution** in a program\n- They can be used to [make decisions]{.highlight} and [repeat code blocks]{.highlight}\n- `if`, `elif`, `else`, `for`, `while`, `break`, `continue`\n\n. . .\n\n[> Question:]{.question} What do you think each of the above does?\n\n## Indentation\n\n- Indentation is crucial in Python!\n- It is used to indicate the block of code that belongs to the structure\n- The standard indentation is 4 spaces\n- You can use tabs, but you [should be careful]{.highlight} with that\n\n. . .\n\n:::{.callout-warning}\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability.\n:::\n\n\n# [Conditional Statements]{.flow} {.title}\n\n## Conditional Statements\n\n- They are used to execute [different blocks of code]{.highlight} based on whether a condition is [true or false]{.highlight}:\n    - `if` statements execute a block of code if a condition is `True`\n    - `elif` statements execute a block of code if the previous condition is `False` and the current condition is `True`\n    - `else` statements execute a block of code if the previous conditions are `False`\n\n. . .\n\n:::{.callout-tip}\nYou can use the `and` and `or` operators to combine multiple conditions.\n:::\n\n## if-statements\n\n::: {#003988b0 .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe condition is True!\nThis will always be printed!\n```\n:::\n:::\n\n\n. . .\n\n::: {#6933ef62 .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis will always be printed!\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-tip}\nWriting `if condition:` is equivalent to `if condition == True:`\n:::\n\n\n## else-statements\n\n::: {#e403e7d0 .cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe condition is True!\n```\n:::\n:::\n\n\n. . .\n\n::: {#91935ffb .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe condition is False!\n```\n:::\n:::\n\n\n## elif-statements\n\n::: {#208d0c25 .cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\ntemperature = 11\nif temperature > 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe temperature is greater than 10!\n```\n:::\n:::\n\n\n. . .\n\n::: {#a4e36498 .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code}\ntemperature = 10\nif temperature > 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe temperature is equal to 10!\n```\n:::\n:::\n\n\n## Comparisons and Conditional Statements\n\n[> Question:]{.question} What will be the output of the following code?\n\n::: {#0ee8e41f .cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age < 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age >= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou are the chosen one still visiting school!\n```\n:::\n:::\n\n\n# [Loops]{.flow} {.title}\n\n## Loops\n\n- Loops allow you to execute a block of code [repeatedly]{.highlight}\n- There are two types of loops: `for` and `while`\n- `for` loops are used to iterate over a sequence (e.g., list, tuple, string)\n- `while` loops execute repeatedly until a condition is `False`\n\n. . .\n\n:::{.callout-tip}\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together.\n:::\n\n## for-loops\n\n::: {#d2ad0430 .cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n::: {#672baf08 .cell output-location='fragment' execution_count=21}\n``` {.python .cell-code}\nfor i in range(0, 10, 2):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n2\n4\n6\n8\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-tip}\nThe `range()` function can take up to three arguments: start, stop, and step.\n:::\n\n. . .\n\n## for-loops with lists\n\n[> Question:]{.question} What do you expect will be the output?\n\n::: {#eaac886b .cell output-location='fragment' execution_count=22}\n``` {.python .cell-code}\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na\n```\n:::\n:::\n\n\n## while-loops\n\n::: {#eed6c5ba .cell output-location='fragment' execution_count=23}\n``` {.python .cell-code}\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n. . .\n\n[> Question:]{.question} What could be an issue with poorly written while-loops?\n\n## while True\n\n[> Question:]{.question} Anybody an idea what this code does?\n\n::: {#cfb877a8 .cell output-location='fragment' execution_count=24}\n``` {.python .cell-code}\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i > 100:\n        break\n    i += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n```\n:::\n:::\n\n\n## Importance of Control Flow\n\n- Allows programs to make decisions based on **conditions**\n- Enables **repetition** of code blocks\n- Helps manage program complexity\n- Improves efficiency by [executing only necessary code]{.highlight}\n- Facilitates creation of dynamic, responsive programs\n\n. . .\n\n:::{.callout-note}\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility.\n:::\n\n\n## Loop Task\n\n[> Grouptask:]{.task} Implement the following task:\n\n::: {#dcdb52f2 .cell execution_count=25}\n``` {.python .cell-code}\n# Implement a while-loop that prints all even numbers between 0 and 100\nnumber = 0\n# Your code here\n```\n:::\n\n\n. . .\n\n::: {.callout-note}\n**And that's it for todays lecture!**\\\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.\n:::\n\n [Literature]{.flow} {.title}\n\n## Interesting Books to start\n\n- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Link to free online version](https://greenteapress.com/wp/think-python-3rd-edition/)\n- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n::: {.callout-tip}\nNothing new here, but these are still great books to start with!\n::: \n\n. . .\n\nFor more interesting literature to learn more about Python, take a look at the [literature list](../general/literature.qmd) of this course.\n\n",
    "supporting": [
      "lecture-control_files"
    ],
    "filters": [],
    "includes": {}
  }
}