{
  "hash": "509abdb91a2262986d5896df32f2d78b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture IV - Handling Data in more than one Dimension\"\nsubtitle: \"Programming with Python\"\nauthor: \"Dr. Tobias Vlćek\"\ninstitute: \"Kühne Logistics University Hamburg - Fall 2024\"\ntitle-slide-attributes:\n    data-background-color: \"#FFE0D3\"\n\nexecute:\n    echo: true\n\nformat:\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: breezedark\n        width: 1260\n        height: 840\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-dimensions.qmd)\"\n        output-file: lecture-dimensions-presentation.html\n    html:\n        theme: litera\n        highlight-style: breezedark\n        linkcolor: \"#a60000\"\n        slide-number: true\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n    pdf: \n        documentclass: report\n---\n\n\n# [Quick Recap of the last Lecture]{.flow} {.title} \n\n\n## Functions\n\n- Functions are **reusable blocks** of code that perform [specific tasks]{.highlight}\n- They can accept inputs (parameters) and return outputs\n- `def` followed by the function name, parameters and a colon\n- Help in organizing code and reducing repetition\n\n. . .\n\n::: {#42041adc .cell output-location='fragment' execution_count=1}\n``` {.python .cell-code}\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to this lecture, Students!\n```\n:::\n:::\n\n\n## Scope\n\n- Scope determines the visibility and lifetime of variables\n- Variables defined inside a function are **local** to that function\n- Variables defined outside of all functions are **global**\n- They can be [accessed from anywhere]{.highlight} in the program\n\n. . .\n\n::: {#3f468642 .cell execution_count=2}\n``` {.python .cell-code}\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n```\n:::\n\n\n[>Question:]{.question} Why does this cause an error?\n\n\n## Classes\n\n- Classes are **blueprints** for creating objects\n- They encapsulate data (attributes) and behavior (methods)\n- Help in [organizing code]{.highlight} and creating objects with similar structures\n\n. . .\n\n::: {#00fc0eaa .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\nclass Lectures:  \n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLecture '4. Data in more than one dimension' is 90 minutes long!\n```\n:::\n:::\n\n\n# [Tuples]{.flow} {.title}\n\n## What are Tuples?\n\n- Tuples are **ordered collections** of items\n- They are **immutable** (cannot be changed after creation)\n- Help in [storing multiple items]{.highlight} in a single variable\n- Created using the `tuple()` function or the `()` syntax\n\n. . .\n\n::: {#255265ec .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 4, 5)\n```\n:::\n:::\n\n\n## Tuple Operations\n\n- Tuples support the [same operations as strings]{.highlight}\n- We can use indexing and slicing to access elements\n- We can use the `+` operator to concatenate tuples\n- We can use the `*` operator to repeat a tuple\n\n. . .\n\n[>Question:]{.question} What will the following code print?\n\n::: {#28515d08 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nmy_tuple = (1, 2, 3)    \nprint(my_tuple[1:3])\nprint(my_tuple + (4, 5, 6))\nprint(my_tuple * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2, 3)\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3)\n```\n:::\n:::\n\n\n## Tuple Methods\n\n- Tuples support the following methods:\n    - `count(x)`: Returns the number of times `x` appears in the tuple\n    - `index(x)`: Returns the index of the first occurrence of `x`\n\n. . .\n\n[>Question:]{.question} What will this code print?\n\n::: {#4bb780a6 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nmy_tuple = (1, 2, 3, 2, 4, 2)\nprint(my_tuple.count(2))\nprint(my_tuple.index(3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n2\n```\n:::\n:::\n\n\n## Tuple Data Types\n\n- Tuples can contain elements of [different data types]{.highlight}\n\n::: {#26ba311e .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\nmy_tuple = (\"Peter\", 25, \"Hamburg\")\nprint(my_tuple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('Peter', 25, 'Hamburg')\n```\n:::\n:::\n\n\n. . .\n\n::: {#5ce789f2 .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\n# This works as well\nmy_tuple = \"Peter\", 25, \"Hamburg\"\nprint(my_tuple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('Peter', 25, 'Hamburg')\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nWe can also create tuples by listing the elements separated by commas.\n:::\n\n\n## Tuples from Functions\n\n- Functions can return tuples\n- This is useful if we want to **return multiple values** from a function\n\n. . .\n\n::: {#a0ea7e10 .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndef get_student_info(name, age, city):\n    return name, age, city\n\nstudent_info = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(student_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('Peter', 25, 'Hamburg')\n```\n:::\n:::\n\n\n. . .\n\n[>Question:]{.question} How would you access the age from the tuple?\n\n\n## Tuple Unpacking\n\n- Allows us to assign the [elements of a tuple to variables]{.highlight}\n- The number of variables **must match** the number of elements\n- Use the `*` operator to assign the remaining elements to a variable\n\n. . .\n\n::: {#0b8974fd .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ndef get_student_info(name, age, city):\n    return name, age, city\nname, *rest = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(f\"Name: {name}\")\nprint(f\"Other info: {rest}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName: Peter\nOther info: [25, 'Hamburg']\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-warning}\nThe output is positional, so we have to be careful with the order of the variables.\n:::\n\n\n# [Lists]{.flow} {.title}\n\n## What are Lists?\n\n- Lists are **ordered collections** of items\n- They are **mutable** (can be changed after creation)\n- Created using the `list()` function or the `[]` syntax\n- They support the **same operations** as strings and tuples\n- Have much more methods and are more versatile than tuples\n\n. . .\n\n::: {#a90bd73e .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\n. . .\n\n[>Question:]{.question} Any idea why lists support more methods?\n\n## List Methods\n\n- Common methods for lists:\n    - `count(x)`: Returns the number of times `x` appears in the list\n    - `append(x)`: Adds an element `x` to the end of the list\n    - `insert(i, x)`: Inserts an element `x` at index `i`\n    - `remove(x)`: Removes the first occurrence of element `x`\n    - `index(x)`: Returns the index of the first occurrence of `x`  \n    - `pop([i])`: Removes the element at index `i` and returns it\n    - `sort()`: Sorts the list in ascending order\n    - `reverse()`: Reverses the list\n\n\n\n## Lists in Action\n\n[>Task:]{.task} Solve the following problem using lists:\n\n::: {#6348990e .cell execution_count=12}\n``` {.python .cell-code}\n# Imagine the following shoppping list for this weekend\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\n```\n:::\n\n\n. . .\n\n- First, add some apples to the list for a healthy option\n- Next, remove the cider as you already have some at home\n- Sort all items in the list alphabetically\n- Print each item of the list on a new line \n\n. . .\n\n:::{.callout-tip}\nYou can use the methods and loops we learned so far to solve the problem.\n:::\n\n\n# [Sets]{.flow} {.title}\n\n## What are Sets?\n\n- Sets are **unordered collections** of [unique elements]{.highlight}\n- They are **mutable** (can be changed after creation)\n- Created using the `set()` function or the `{}` syntax\n- Supports `+` and `*` operations like lists and tuples\n- Unlike lists and tuples, **sets do not support indexing**\n\n. . .\n\n::: {#1a1d3253 .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\nmy_set = {1, 2, 2, 5, 5}\nprint(my_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 5}\n```\n:::\n:::\n\n\n## Set Methods\n\n- Common methods for sets:\n    - `add(x)`: Adds an element `x` to the set\n    - `remove(x)`: Removes an element `x` from the set\n    - `discard(x)`: Removes an element `x` from the set if it is present\n    - `pop()`: Removes and returns an arbitrary element from the set\n    - `update(other)`: Adds all elements from `other` to the set\n\n## Set Theory\n- Additional methods are derived from set theory\n    - `union(other)`: New set with elements from both sets\n    - `intersection(other)`: New set with common elements\n    - `isdisjoint(other)`: `True` if no elements in common\n    - `issubset(other)`: `True` if subset of `other`\n\n. . .\n\n:::{.callout-tip}\nThere are more methods for sets! If you are working intensively with sets, keep that in mind.\n:::\n\n## Sets in Action\n\n[>Task:]{.task} Solve the following problem using sets:\n\n::: {#74a958ae .cell execution_count=14}\n``` {.python .cell-code}\n# You have a list of friends from two different groups\nfriends_group_1 = [\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\"]\nfriends_group_2 = [ \"Smith\", \"Apoc\", \"Cypher\", \"Morpheus\"]\n```\n:::\n\n\n. . .\n\n- First, find the mutual friends in both groups\n- Then create a new set of all friends from both groups\n- Count the number of friends in total\n- Print each item of the set on a new line \n\n. . .\n\n:::{.callout-tip}\nNotice that we can partly use the same procedure as we used for lists.\n:::\n\n# [Dictionaries]{.flow} {.title}\n\n## What are Dictionaries?\n\n- Dictionaries are **unordered collections** of key-value pairs\n- They are **mutable** (can be changed after creation)\n- Keys must be **unique** and **immutable**\n- Values can be of any type\n- Created using the `dict()` function or the `{}` syntax\n- As sets we **cannot access them by index**\n\n. . .\n\n::: {#71946804 .cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Tobias', 'age': 30, 'city': 'Hamburg'}\n```\n:::\n:::\n\n\n## Key-Value Pairs\n\n- We can [access them by their keys]{.highlight}, though!\n- You can think of them as a set of key-value pairs\n\n. . .\n\n::: {#3f473d95 .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i[\"name\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTobias\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-note}\nNote, how we can use the `[]` operator to access the value of a key?\n:::\n\n## Dictionary Operations\n- Common operations and methods:\n\n- `in` operation to check if a key is in the dictionary\n- `for` loop to iterate over the dictionary\n- `keys()` method to return a view of the dictionary's keys\n- `values()` method to return a view of the dictionary's values\n- `pop(key[, default])` to remove a key and return its value\n\n## Dictionaries in Action\n\n[>Task:]{.task} Solve the following problem using dictionaries:\n\n::: {#a1d8387f .cell execution_count=17}\n``` {.python .cell-code}\n# Create a dictionary with the following information about yourself: name, age, city\ni_am = {}\n```\n:::\n\n\n. . .\n\n- Add your favorite color and food to the dictionary\n- Remove the city from the dictionary\n- Print your name and age in a formatted sentence\n\n\n# [Overview of new Data Types]{.flow} {.title}\n\n## Comparison between Data Types\n\n- **Tuple**: Immutable, ordered, duplicates allowed\n- **List**: Mutable, ordered, duplicates allowed\n- **Set**: Mutable, unordered, no duplicates\n- **Dictionary**: Mutable, unordered, no duplicates, key-value pairs\n\n. . .\n\n:::{.callout-tip}\nThis impacts your code, the [operations you can perform]{.highlight} and the [speed of your program]{.highlight}. Thus, it makes sense to understand the differences and choose the right data type for the task.\n:::\n\n## When to use which?\n\n- **Tuples**: store a collection of items that [should not be changed]{.highlight}\n- **Lists**: store a collection of items that [should be changed]{.highlight}\n- **Sets**: store a collection of items that [should not be changed]{.highlight} and [duplicates are not allowed]{.highlight}\n- **Dictionaries**: store a collection of items that should be changed, [duplicates are not allowed]{.highlight} and require [key-value pairs]{.highlight}\n\n. . .\n\n:::{.callout-tip}\nYou can convert between the data types using `tuple()`, `list()`, `set()` and `dict()`. Note, that this is not always possible, e.g. you cannot convert a list to a dictionary without specifying a key.\n:::\n\n## Speed Differences\n- **Lists** are the [most versatile, but slowest]{.highlight}\n- **Tuples** are generally [faster than lists]{.highlight}\n- **Sets** are generally [faster than lists and tuples]{.highlight}\n- **Dictionaries** depend, but are generally [faster than lists and tuples]{.highlight}\n\n::: {#726361d3 .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code code-fold=\"true\"}\nimport timeit\n\n# Number of elements in each data structure\nn = 10000000\n\n# Setup for each data structure, including the test function\nsetup_template = \"\"\"\ndef test_membership(data_structure, element):\n    return element in data_structure\ndata = {data_structure}\n\"\"\"\n\nsetups = {\n    'Tuple': setup_template.format(data_structure=f\"tuple(range({n}))\"),\n    'List': setup_template.format(data_structure=f\"list(range({n}))\"),\n    'Set': setup_template.format(data_structure=f\"set(range({n}))\"),\n    'Dictionary': setup_template.format(data_structure=f\"{{i: i for i in range({n})}}\")\n}\n\n# Measure time for each data structure\nprint(f\"Time taken for a single membership test in {n} elements (in seconds):\")\nprint(\"-\" * 75)\nfor name, setup in setups.items():\n    stmt = f\"test_membership(data, {n-1})\"  # Test membership of the last element\n    time_taken = timeit.timeit(stmt, setup=setup, number=1)\n    print(f\"{name:<10}: {time_taken:.8f}\")\nprint(\"-\" * 75)\nprint(\"Note, that theses values are machine dependent and just for illustration!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime taken for a single membership test in 10000000 elements (in seconds):\n---------------------------------------------------------------------------\nTuple     : 0.05472021\nList      : 0.06179775\nSet       : 0.00000308\nDictionary: 0.00000350\n---------------------------------------------------------------------------\nNote, that theses values are machine dependent and just for illustration!\n```\n:::\n:::\n\n\n## Comprehensions\n- Comprehensions provide a concise way to create data structures\n    - **Tuple** comprehensions: `(x for x in iterable)`\n    - **List** comprehensions: `[x for x in iterable]`\n    - **Set** comprehensions: `{x for x in iterable}`\n    - **Dictionary** comprehensions: `{x: y for x, y in iterable}`\n\n. . .\n\n:::{.callout-tip}\n The iterable can be **any object that can be iterated over**, e.g. a list, tuple, set, dictionary, etc.\n:::\n\n## Iterables\n\n- [We have already introduced those!]{.highlight}\n- We can use the `for` loop to iterate over an iterable\n\n. . .\n\n::: {#11eb7e17 .cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\nfor item in shopping_list:\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncider\nbeer\nbread\nfrozen_pizza\n```\n:::\n:::\n\n\n. . .\n\n::: {#151ba7c9 .cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nfor key, value in who_am_i.items():\n    print(f\"{key}: {value}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname: Tobias\nage: 30\ncity: Hamburg\n```\n:::\n:::\n\n\n# [I/O]{.flow} {.title}\n\n## Input/Output\n\n- A common task in programming is to [interact with users]{.highlight}\n- Remember the `input()` function from the first lecture?\n- It is a classical example of **user input**\n- An example of **output** is the `print()` function\n\n. . .\n\n::: {#423c0877 .cell execution_count=21}\n``` {.python .cell-code}\nname = input(\"Please enter your name: \")    \nprint(f\"Hello, {name}!\")\n```\n:::\n\n\n. . .\n\n:::{.callout-note}\nThus, we have already worked with I/O in Python!\n:::\n\n## Reading and Writing Files\n\n- We also need to [interact with data]{.highlight}\n- File handling in Python is quite simple:\n  - Use `open(file_name, mode)` to open a file\n  - Modes: `\"r\"` (read), `\"w\"` (write), `\"a\"` (append)\n- Basic operations:\n  - Read: `file.read()`\n  - Write: `file.write(content)`\n  - Close: `file.close()`\n\n## File Handling in Action\n\n::: {#6ee38a7d .cell output-location='fragment' execution_count=22}\n``` {.python .cell-code}\nfile = open(\"hi.txt\", \"w\") # This creates a file called \"hi.txt\"\nfile.write(\"Hello, World!\") # This writes \"Hello, World!\" to the file\nfile.close() # This closes the file\nprint(\"File successfully written\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile successfully written\n```\n:::\n:::\n\n\n. . .\n\n[>Question:]{.question} Any ideas how to read the file?\n\n. . .\n\n::: {#640846e1 .cell output-location='fragment' execution_count=23}\n``` {.python .cell-code}\nfile = open(\"hi.txt\", \"r\") # This opens the file \"hi.txt\"\ncontent = file.read() # This reads the content of the file\nfile.close() # This closes the file\nprint(content) # This prints the content of the file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-tip}\nClose files with `file.close()` to free up system resources and ensure data is properly saved.\n:::\n\n## Easier File Handling with with\n\n- We can also use the `with` statement to open a file\n- This ensures the file is properly closed after its handling finishes\n- It's a good practice to use it when working with files\n\n::: {#8f6ab50f .cell output-location='fragment' execution_count=24}\n``` {.python .cell-code}\nwith open(\"hi_again.txt\", \"w\") as file:\n    file.write(\"Hello again, World!\")\n\nprint(\"File successfully written\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile successfully written\n```\n:::\n:::\n\n\n. . .\n\n[>Task:]{.task} Open the file `hi_again.txt` and print its content using `with`\n\n## Working with other file types\n\n- Naturally, we also want to [work with other file types!]{.highlight}\n- Reading and writing **CSV files** is a common tasks in data analysis\n- Excel files are used in many applications and companies\n- We will see how to do this **later** in the course\n\n. . .\n\n:::{.callout-note}\n**And that's it for todays lecture!**\\\nWe now have covered the basics of tuples, sets, lists and dictionaries as well as some basic file handling. For now, just remember that advanced reading and writing is possible and that there are libraries that help with this. \n:::\n\n[Literature]{.flow} {.title}\n\n## Interesting Books\n\n- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Link to free online version](https://greenteapress.com/wp/think-python-3rd-edition/)\n- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n::: {.callout-tip}\nNothing new here, but these are still great books!\n::: \n\n. . .\n\nFor more interesting literature to learn more about Python, take a look at the [literature list](../general/literature.qmd) of this course.\n\n",
    "supporting": [
      "lecture-dimensions_files"
    ],
    "filters": [],
    "includes": {}
  }
}