[
  {
    "objectID": "assignments/assignment_02.html",
    "href": "assignments/assignment_02.html",
    "title": "Assignment II",
    "section": "",
    "text": "Introduction\nThis is the second of the two assignments for this course. It will be graded as pass/fail and you and your group of up to 3 students will need to submit it before the start of the last lecture. Please hand in one assignment per group via the e-mail address vlcek@beyondsimulations.com.\nIn the assignment, you will practice the concepts you learned in the second part of the course. You will find a lot of information online and you are welcome to use generative AI to help you with the assignment. However, you are not allowed to copy the code from other groups and you have to indicate where and how you used AI to help you. Try to use comments to structure and to explain your code. Furthermore, use descriptive variable names and format your code nicely in order to make it more readable.\n\n\nRedact secret information\nIn this excercise, you will create a program that is able to redact secret information in a text. The program should be able to redact the following: zip codes, names, email addresses and phone numbers. The program should ask the user for a filename and then read the file and redact the secret information. The program should then print the redacted text to the console and write it to a new file called redacted.txt. You can find a file with secret information in the git repository under assignments/secret-text.txt.\n\n# Secret information redactor\n# TODO: Create a program that is able to redact secret information in a text.\n# YOUR CODE HERE\n\n\n\nDice roll simulator\nIn this excercise, you will create a program that is able to simulate dice rolls and visualizes their distribution. The program should ask the user for the number of sides on the dice and the number of dices to roll. Then, the program should simulate the dice rolls 10000 times and visualize the distribution of the dice rolls using a histogram.\n\n# Dice roll simulator\n# TODO: Create a program that is able to simulate a dice roll.\n# YOUR CODE HERE\n\n\n\nFuture Self Predictor\nIn this exercise, you will create an interactive program that predicts a users future based on his or her answers. The program should ask 5 questions about users where user can either add the answers in the terminal freely or choose from a number of options. It should then generate 3 entertaining predictions, and save them to a separate file with the user name as filename. The predictions should be a 5-year, 10-year, and 30-year prediction of where the user is going to be in life. Note, the program should be able to handle user input errors gracefully.\n\n# Future Self Predictor\n# TODO: Create a program that is able to predict the future.\n# YOUR CODE HERE\n\n\n\nDashboards\nIn this exercise, you will create a program that visualizes a data set of your choice in an interactive dashboard. For this excercise, you can choose any data set of your interest. The data should be visualized in a dashboard with at least two plots. You can use one of the dashboard libraries we discussed in the lecture.\n\n\n\n\n\n\nThe dashboard should be programmed in a separate file I can call for evaluation.\n\n\n\n\n# Dashboards\n# TODO: Create a program that visualizes a data set of your choice in a dashboard.\n# YOUR CODE HERE",
    "crumbs": [
      "Assignments",
      "02 Assignment"
    ]
  },
  {
    "objectID": "tutorials/tut_09_plotting.html",
    "href": "tutorials/tut_09_plotting.html",
    "title": "Tutorial IX - Data Visualization",
    "section": "",
    "text": "Today’s Tutorial\nFrom now on, it is rather difficult to give you tasks that you cannot solve within minutes by yourself with the help of AI. Therefore, today’s tutorial will be more open-ended than usual. All tasks are designed to be solved together with AI, but you are nonetheless the human in the loop. Thus, your responsilities are to control the AI, make the plots meaningful and visually attractive.\n\n\nSimulation of a random walk for stock prices\nIn this excercise, you will create a program that is able to simulate a random walk for stock prices. The program should ask the user for the initial stock price, the number of days to simulate and the daily standard deviation of the stock price. Then, the program should simulate 5 random walks of the price and visualize the stock price over time. Feel free to use Zed to help you write the code and visualize the results in an attractive way.\n\n# TODO: Create a program that is able to simulate and visualize a random walk.\n# YOUR CODE HERE\n\n\n\nPlotting data from the World Bank\nNow, let’s plot some data that we are not creating ourselves. Head to the open data website of the World Bank and find some data you are personally interested in. Then, download the data set and load it into a pandas DataFrame. Finally, plot the data.\n\n# TODO: Plot some interesting data from the World Bank.\n# YOUR CODE HERE\n\n\n\nBuilding an investment calculator with PySide6\nFor this exercise, you’ll create a simple investment calculator application using PySide6. This tool will help users calculate the future value of their investments based on different parameters.\nYour task is to create a GUI application that:\n\nAllows users to input:\n\nInitial investment amount\nAnnual contribution\nExpected return rate (%)\nInvestment period (years)\n\nCalculates the future value of the investment\nDisplays the result in a formatted way\n\nHere’s a solution for tasks 1-3 to get you started:\n\nimport sys\nfrom PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,\n                              QLabel, QLineEdit, QPushButton, QGridLayout)\nfrom PySide6.QtCore import Qt\n\nclass InvestmentCalculator(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Investment Calculator\")\n        self.setMinimumSize(400, 300)\n\n        # Create central widget and layout\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        layout = QGridLayout(central_widget)\n\n        # Create input fields\n        self.initial = QLineEdit()\n        self.annual = QLineEdit()\n        self.rate = QLineEdit()\n        self.years = QLineEdit()\n\n        # Create labels\n        layout.addWidget(QLabel(\"Initial Investment ($):\"), 0, 0)\n        layout.addWidget(self.initial, 0, 1)\n        layout.addWidget(QLabel(\"Annual Contribution ($):\"), 1, 0)\n        layout.addWidget(self.annual, 1, 1)\n        layout.addWidget(QLabel(\"Expected Return Rate (%):\"), 2, 0)\n        layout.addWidget(self.rate, 2, 1)\n        layout.addWidget(QLabel(\"Investment Period (years):\"), 3, 0)\n        layout.addWidget(self.years, 3, 1)\n\n        # Create calculate button\n        calc_button = QPushButton(\"Calculate\")\n        calc_button.clicked.connect(self.calculate)\n        layout.addWidget(calc_button, 4, 0, 1, 2)\n\n        # Create result label\n        self.result_label = QLabel()\n        self.result_label.setAlignment(Qt.AlignCenter)\n        layout.addWidget(self.result_label, 5, 0, 1, 2)\n\n    def calculate(self):\n        try:\n            initial = float(self.initial.text())\n            annual = float(self.annual.text())\n            rate = float(self.rate.text()) / 100\n            years = int(self.years.text())\n\n            # Calculate future value\n            future_value = initial\n            for _ in range(years):\n                future_value = (future_value + annual) * (1 + rate)\n\n            # Display result\n            self.result_label.setText(\n                f\"Future Value: €{future_value:,.2f}\"\n            )\n        except ValueError:\n            self.result_label.setText(\"Please enter valid numbers\")\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = InvestmentCalculator()\n    window.show()\n    sys.exit(app.exec())\n\nTry running this program and then enhance it with additional features such as:\n\nIncluding a reset button\nAdding a table showing year-by-year breakdown\nCreating a graph showing the investment growth\nAdding a dropdown menu to select different currencies\n\n\n\nPlotting Stocks with a Dashboard\nFinally, let’s plot some stock data by building a simple Dashboard. To do so, you can either use the streamlit library, the nicegui library or the dash library. All of them are very popular libraries for building Dashboards in Python.\n\nChoose a stock of your interest and note down the ticker symbol.\nUse the yfinance library to get the stock data.\nPlot the stock data in a web app.\n\n\n# TODO: Plot some stock data with Dash, Streamlit or NiceGUI.\n# YOUR CODE HERE\n\nIf you have some time left, try to enhance your Dashboards with additional features.\n\nAdding a menu to switch between different stocks\nAdding a graph to compare multiple stocks\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "09 Plotting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_07_scientific.html",
    "href": "tutorials/tut_07_scientific.html",
    "title": "Tutorial VII - NumPy for Scientific Computing",
    "section": "",
    "text": "Analyzing Climate Data\nImagine you’re a climate scientist working on a project to analyze temperature data from weather stations across the country. You’ve been given a large dataset, and you need to use NumPy to process and analyze this data efficiently.\nTo solve this task, you’ll need to use NumPy to perform various operations on the temperature data. Here, you’ll need some new functions you haven’t seen yet.\n\nnp.mean(): calculate the mean of an array\nnp.max(): calculate the maximum of an array\nnp.min(): calculate the minimum of an array\nnp.argmax(): find the index of the maximum of an array\nnp.argmin(): find the index of the minimum of an array\n\nIf you want to find those informations along an axis, you can use the same function with axis as an additional argument. Here, axis=0 is for the columns and axis=1 is for the rows.\nFor example, to find the maximum of each row, you can use np.max(data_set, axis=1). To find the index of the maximum of each column, you can use np.argmax(data_set, axis=0).\n\nimport numpy as np\n\n# Let's analyze temperature data from 10 weather stations over 30 days\ntemp_data = np.random.randint(0, 40, size=(10, 30))\n\n# Example: Calculate the average temperature for the first station\nfirst_station_avg = np.mean(temp_data[0,:])\nprint(f\"Average temperature for the first station: {first_station_avg:.2f}°C\")\n\n# TODO: a) Calculate the average temperature for each station and print it. Make sure to round the result to 2 decimal places!\n# Hint: Use np.mean() with axis=1\n# Your code here\n\n\n# TODO: b) Find the highest temperature recorded and the station index and print it\n# Hint: Use np.max() and np.argmax(). Note, that argmax returns the index of a flattened array, so you need to convert it to the original shape!\n# Your code here\n\n# TODO: c) Find the lowest temperature recorded and the station index and print it\n# Hint: Use np.min()\n# Your code here\n\n# TODO: d) Calculate the overall average temperature and print it\n# Hint: Use np.mean() on the entire temp_data array\n# Your code here\n\n# Example: Identify days above 30°C for the first station\nhot_days = np.sum(temp_data[0,:] &gt; 30)\nprint(f\"The first station had {hot_days} days above 30°C\")\n\n# TODO: e) Count the number of days above 30°C for each station\n# Your code here\n\n# TODO: f) Find the hottest and coldest stations and determine the index of the station with the highest average temperature and the station with the lowest average temperature.\n# Hint: Use np.argmax() and np.argmin()\n# Your code here\n\nAverage temperature for the first station: 20.23°C\nThe first station had 6 days above 30°C\n\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "07 Scientific Computing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_05_errors.html",
    "href": "tutorials/tut_05_errors.html",
    "title": "Tutorial V - Handling Errors",
    "section": "",
    "text": "Basic exception handling\nWe start with a simple task to get you familiar with the concept of exception handling. You are given an empty function that takes three numbers as input. It adds the first two numbers and then divides the result by the third number. You have to use a try-except block to handle the ZeroDivisionError.\n\n# TODO: Write a function that takes three numbers as input. It adds the first two numbers and then divides the result by the third number. Use a try-except block to handle the ZeroDivisionError.\ndef safe_divide(add_1, add_2, div):\n    # Your code here\n    pass\n\n# Test cases\nprint(safe_divide(5, 5, 2))  # Should print: 5.0\nprint(safe_divide(10, 0, 0))  # Should print: \"Error: Division by zero\"\n\n\n\nHandling Multiple Exceptions\nIn this exercise, you’ll have to handle multiple exceptions in one try-except block, as we also want to catch exceptions with a wrong type of input, e.g. when the user inputs a string instead of a number.\n\n# a) TODO: Modify the previous function to handle both ZeroDivisionError and TypeError\ndef safe_divide_v2(add_1, add_2, div):\n    # Your code here\n    pass\n\n# Test cases\nprint(safe_divide_v2(5, 5, 2))  # Should print: 5.0\nprint(safe_divide_v2(10, 0, 0))  # Should print: \"Error: Division by zero\"\nprint(safe_divide_v2(2,4, \"2\")) # Should print: \"Error: Invalid input types\"\n\n# b) TODO: Write a function that asks the user for a number and then divides it by a second number inputted by the user.\n# - Use a try-except block to handle the exceptions.\n# - Use a while loop to repeatedly ask the user for a number and divide it by a second number until the user inputs \"no\" to the question \"Do you want to continue?\".\n\n\n\nRaising your own exceptions\nIn this exercise, you’ll have to raise your own exceptions when the user inputs a wrong type of input, e.g. when the user inputs a string instead of a number. Yout task is to write a function that asks the user a username and then checks if the username is valid. A valid username is considered to be a number that is at least 5 characters long and contains no spaces. If the username is not valid, you should raise an exception, tell the user that the username is not valid and ask for a new username. You should only accept the username if it is valid.\n\n# TODO: Write a function that asks the user for a username and then checks if the username is valid.\n# - A valid username is considered to be a number that is at least 5 characters long and contains no spaces.\n# - If the username is not valid, you should raise an exception, tell the user that the username is not valid and ask for a new username.\n# - You should only accept the username if it is valid.\n\n# You can start by changing the code from the lecture:\nclass InvalidUsernameError(Exception):\n    pass\n\ndef get_valid_username():\n    while True:\n        try:\n            username = input(\"Please enter a username (no spaces): \")\n            if \" \" in username:\n                raise InvalidUsernameError(\"Username must not contain spaces.\")\n            return username\n        except InvalidUsernameError as e:\n            print(f\"Invalid username: {e}\")\n            print(\"Please try again.\")\n\n\n\nUsing Assertions\nBy using assertions, we can check if the input of a function is correct. If the assertion is not correct, an AssertionError is raised. This is especially useful in the development phase to catch errors that should not occur.\n\n# TODO: Write a function that calculates the area of a rectangle. Ensure that the length and width are positive numbers.\ndef calculate_rectangle_area(length, width):\n    # Your code here\n    pass\n\n# Test cases\nprint(calculate_rectangle_area(5, 3))    # Should print: 15\nprint(calculate_rectangle_area(-5, 3))   # Should raise AssertionError\nprint(calculate_rectangle_area(5, \"3\"))  # Should raise AssertionError\n\n\n\nDebugging\nIn the following exercise, you’ll have to debug a function that is supposed to return the sum of all even numbers in a list. However, there is a bug in the code. Can you find it and fix it? Use either print statements, assertions, or an IDE’s debugger to fix the code.\n\n# TODO: Fix the bug in the following function.\ndef sum_even_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total + num\n    return total\n\n# Test case\nprint(sum_even_numbers([1, 2, 3, 4, 5, 6]))  # Should print: 12, but it's not working correctly\n\n# Bonus challenge: Add error handling to make this function more robust\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "05 Errors",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_03_functions.html",
    "href": "tutorials/tut_03_functions.html",
    "title": "Tutorial III - Building Reusable Functions",
    "section": "",
    "text": "Introduction\nJust like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions. This was the last time I repeat this, I promise!\n\n\nSmall Functions for various tasks\nIn this exercise, you will practice writing small functions for various tasks. You will also practice using the return statement to return a value from a function and the global keyword to modify a global variable.\n\n# a) TODO: Write a function that takes two numbers as input and returns their squared sum.\n\ndef squared_sum(a, b):\n    pass # Your code here\n\n# b) TODO: Implement a function that uses a global variable to keep track of how many times it has been called.\n# Call the functions 10 times and print the result to the console.\n\nfunctions_called = 0\n# Your code here\n\n# c) TODO: Create a function called password_strength that takes a password as input.\n# It should return \"weak\", \"medium\", or \"strong\" based on the passwords length with the following criteria:\n# - Return \"weak\" if the password is less than 8 characters long\n# - Return \"medium\" if the password is between 8 and 15 characters long\n# - Return \"strong\" if the password is longer than 15 characters long\n# - The function should then be called as illustrated below.\n# Your code here\n\npassword = input(\"Enter a password: \")\nstrength = password_strength(password)\nprint(f\"The strength of the password is {strength}.\")\n\n# d)TODO: Implement a function called `secret_number_game` that does the following:\n# - Use a variable `secret_number` set to 42\n# - The function should take one parameter `guess`\n# - If the guess is correct, it should print \"Correct!\" and increment a global counter `correct_guesses`\n# - If the guess is incorrect, it should print \"Wrong!\" and increment a global counter `wrong_guesses`\n# - The function should then be used in the while loop below to guess the secret number.\n# Your code here\n\nwhile True:\n    guess = int(input(\"Enter a guess: \"))\n    secret_number_game(guess)\n    if correct_guesses == 1:\n        break\n\n# e) TODO: Write a recursive function (a function that calls itself) to calculate the sum of digits of a positive integer.\n# E.g. 1234 -&gt; 1 + 2 + 3 + 4 = 10\n# Hint: You can use a for loop to iterate over the characters in a string and convert them to integers.\n# Your code here\n\n# f) TODO: Implement a function is_palindrome that checks if a given string is a palindrome (reads the same forwards and backwards).\n# Hint: Remember how we can use slicing to reverse a string.\n# Your code here\n\n\n\nDifferent classes for different tasks\nIn this exercise, you will practice creating different classes for different tasks. You will create a class for a bank account, a class for a car, and a class for a computer.\n\n# a) TODO: Extend the class called 'Books' with the following specifications:\n# - It should have attributes for 'title', 'author', and 'pages'\n# - Use the `__init__` method to initialize the attributes\n# - Include a method called 'display_info' that prints all the book's information\n# - Add a method 'is_short' that returns True if the book has less than 100 pages, False otherwise\n\nclass Books:\n    def __init__(self, title_name):\n        self.title = title_name\n\n    def display_info(self):\n        print(f\"Title: {self.title}\")\n\n    def is_long(self):\n        return self.pages &gt; 400\n\n# b) TODO: Create your favorite book as an object to the class you just created. Check if it is a long book.\n# Your code here\n\n# c) TODO: Create a class called 'Student' with the following specifications:\n# - It should have attributes for 'name', 'age', and 'current_grade'\n# - Add a method 'is_excellent' that returns True if the student's grade is lower than 2.0\n# - Add a method 'student_grade' that returns the current grade with the following printed statement:\n# - If the grade is lower than 2.0: \"The current grade of the student is: &lt;grade&gt;. This is a fantastic grade.\"\n# - If the grade is higher than 2.0 but lower than 4.0: \"The current grade of the student is: &lt;grade&gt;. This is still a fantastic grade.\n# - If the grade is higher than 4.0: \"The current grade of the student is: &lt;grade&gt;. This is a not so fantastic grade...\"\n# Your code here\n\n# d) TODO: Create your yourself as an object to the class you just created. Check if you are excellent and print your grade.\n# Your code here\n\n\n\nAdvanced Calculator Function\nIn this task, you are going to implement a calculator function that performs basic arithmetic operations and print out the computation as formated string.\n\n# TODO: Create a function called 'advanced_calculator' that takes three parameters:\n# - num1 (number)\n# - num2 (number)\n# - operation (string: \"add\", \"subtract\", \"multiply\", \"divide\", \"power\", \"modulo\")\n# The function should:\n# - Perform the requested operation\n# - Handle division by zero (return \"Error: Division by zero\")\n# - Return the result as a formatted string like \"5 + 3 = 8\"\n# Your code here\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "03 Functions",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_01_introduction.html",
    "href": "tutorials/tut_01_introduction.html",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\n\n\n\nI would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.\n\n\n\nIn the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_01_introduction.html#solutions",
    "href": "tutorials/tut_01_introduction.html#solutions",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_01_introduction.html#how-to-tackle-the-exercises",
    "href": "tutorials/tut_01_introduction.html#how-to-tackle-the-exercises",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "I would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_01_introduction.html#tutorials-vs-assignments",
    "href": "tutorials/tut_01_introduction.html#tutorials-vs-assignments",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "In the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "lectures/lec_09_presentation.html#pandas-data-analysis",
    "href": "lectures/lec_09_presentation.html#pandas-data-analysis",
    "title": "Lecture IX - Data Visualization",
    "section": "Pandas: Data Analysis",
    "text": "Pandas: Data Analysis\n\nPowerful library for data manipulation and analysis\nBuilt on top of NumPy, providing additional functionality\nKey features of Pandas include:\n\nData loading from various file formats\nData cleaning and preprocessing\nPowerful grouping and aggregation operations\nMerging and joining datasets"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#why-numpy-and-pandas-are-essential",
    "href": "lectures/lec_09_presentation.html#why-numpy-and-pandas-are-essential",
    "title": "Lecture IX - Data Visualization",
    "section": "Why NumPy and Pandas are Essential",
    "text": "Why NumPy and Pandas are Essential\n\nBasic tools for scientific computing and data analysis\nEfficient data structures and operations for large data\nIntegration with other scientific Python libraries\nUsed in data science, machine learning, and research\n\n\n\n\n\n\n\n\nYou might also need them in future lectures here!"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#section",
    "href": "lectures/lec_09_presentation.html#section",
    "title": "Lecture IX - Data Visualization",
    "section": "",
    "text": "Question: What is\ndata visualization?"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#visual-representations-of-data",
    "href": "lectures/lec_09_presentation.html#visual-representations-of-data",
    "title": "Lecture IX - Data Visualization",
    "section": "Visual Representations of Data",
    "text": "Visual Representations of Data\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Generate data\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny = 3 + 2*x + np.random.randn(50)\nsizes = np.random.randint(20, 200, 50)\ncolors = np.random.rand(50)\n\n# Create the plot\nplt.figure(figsize=(12, 5))\nscatter = plt.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')\n\n# Add trend line\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nplt.plot(x, p(x), \"r--\", alpha=0.8, linewidth=2)\n\n# Customize the plot\nplt.title(\"ScatterPlot with Trend Line\", fontsize=16)\nplt.xlabel(\"X-axis\", fontsize=12)\nplt.ylabel(\"Y-axis\", fontsize=12)\nplt.colorbar(scatter, label=\"Color Scale\")\n\n# Add a text annotation\nplt.annotate(\"Interesting point\", xy=(8, 21), xytext=(6.5, 23),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#importance-of-data-visualization",
    "href": "lectures/lec_09_presentation.html#importance-of-data-visualization",
    "title": "Lecture IX - Data Visualization",
    "section": "Importance of Data Visualization",
    "text": "Importance of Data Visualization\n\nCommunicates complex information clearly\nHelps in decision-making processes\nReveals hidden patterns and relationships in data\nMakes data more accessible and engaging\n\n\n\n\n\n\n\n\nHelps to convice stakeholders!"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#bar-charts-and-histograms",
    "href": "lectures/lec_09_presentation.html#bar-charts-and-histograms",
    "title": "Lecture IX - Data Visualization",
    "section": "Bar Charts and Histograms",
    "text": "Bar Charts and Histograms\n\nBar charts: Compare quantities across categories\nHistograms: Show distribution of a continuous variable\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Bar chart\ncategories = ['A', 'B', 'C', 'D']\nvalues = [4, 7, 2, 8]\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.bar(categories, values)\nplt.title('Bar Chart')\n\n# Histogram\ndata = np.random.randn(1000)\n\nplt.subplot(122)\nplt.hist(data, bins=30)\nplt.title('Histogram')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#line-charts-and-area-charts",
    "href": "lectures/lec_09_presentation.html#line-charts-and-area-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Line Charts and Area Charts",
    "text": "Line Charts and Area Charts\n\nLine charts: Show trends over time or continuous data\nArea charts: Similar to line charts, but with filled areas\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.plot(x, y1, label='sin(x)')\nplt.plot(x, y2, label='cos(x)')\nplt.title('Line Chart')\nplt.legend()\n\nplt.subplot(122)\nplt.fill_between(x, y1, label='sin(x)')\nplt.fill_between(x, y2, label='cos(x)', alpha=0.5)\nplt.title('Area Chart')\nplt.legend()\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#scatter-plots-and-bubble-charts",
    "href": "lectures/lec_09_presentation.html#scatter-plots-and-bubble-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Scatter Plots and Bubble Charts",
    "text": "Scatter Plots and Bubble Charts\n\nScatter plots: Show relationship between two variables\nBubble charts: Adds dimension with varying point sizes\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.rand(50)\ny = np.random.rand(50)\nsizes = np.random.rand(50) * 500\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.scatter(x, y)\nplt.title('Scatter Plot')\n\nplt.subplot(122)\nplt.scatter(x, y, s=sizes, alpha=0.5)\nplt.title('Bubble Chart')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#pie-charts-and-donut-charts",
    "href": "lectures/lec_09_presentation.html#pie-charts-and-donut-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Pie Charts and Donut Charts",
    "text": "Pie Charts and Donut Charts\n\nPie charts: Show composition of a whole\nDonut charts: Similar to pie charts, but with a hole\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nlabels = 'A', 'B', 'C', 'D'\nsizes = [15, 30, 45, 10]\n\nplt.figure(figsize=(12, 3))\n\n# Pie chart (left subplot)\nplt.subplot(121)\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.title('Pie Chart')\n\n# Donut chart (right subplot)\nplt.subplot(122)\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        pctdistance=0.7, labeldistance=1.1,\n        wedgeprops=dict(width=0.5, edgecolor='white'))\nplt.title('Donut Chart')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#box-plots-and-violin-plots",
    "href": "lectures/lec_09_presentation.html#box-plots-and-violin-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Box Plots and Violin Plots",
    "text": "Box Plots and Violin Plots\n\nBox plots: Show distribution of data through quartiles\nViolin plots: Combine box plot with kernel density\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\ndata = [np.random.normal(0, std, 100) for std in range(1, 5)]\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.boxplot(data)\nplt.title('Box Plot')\n\nplt.subplot(122)\nsns.violinplot(data)\nplt.title('Violin Plot')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#network-graphs-and-trees",
    "href": "lectures/lec_09_presentation.html#network-graphs-and-trees",
    "title": "Lecture IX - Data Visualization",
    "section": "Network Graphs and Trees",
    "text": "Network Graphs and Trees\n\nNetwork graphs: Show relationships between entities\nTree diagrams: Display hierarchical structures\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\n\n# Create figure\nplt.figure(figsize=(12, 3))\n\n# Network graph (left subplot)\nplt.subplot(121)\nG = nx.random_geometric_graph(15, 0.3)  # Reduced nodes for clarity\npos = nx.spring_layout(G, k=1, seed=42)  # Better layout with fixed seed\nnx.draw_networkx_nodes(G, pos,\n                      node_color='lightblue',\n                      node_size=500,\n                      edgecolors='navy',\n                      linewidths=1)\nnx.draw_networkx_edges(G, pos,\n                      edge_color='gray',\n                      width=1,\n                      alpha=0.5)\nnx.draw_networkx_labels(G, pos,\n                       font_size=8,\n                       font_weight='bold')\nplt.title('Network Graph', pad=10)\n\n# Tree diagram (right subplot)\nplt.subplot(122)\nT = nx.balanced_tree(2, 2)  # Create a balanced tree with 2 children, depth 2\npos_tree = nx.spring_layout(T, k=1.5, seed=42)\nnx.draw_networkx_nodes(T, pos_tree,\n                      node_color='lightgreen',\n                      node_size=500,\n                      edgecolors='darkgreen',\n                      linewidths=1)\nnx.draw_networkx_edges(T, pos_tree,\n                      edge_color='forestgreen',\n                      width=1)\nnx.draw_networkx_labels(T, pos_tree,\n                       font_size=8,\n                       font_weight='bold')\nplt.title('Tree', pad=10)\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#ridgeline-plots",
    "href": "lectures/lec_09_presentation.html#ridgeline-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Ridgeline Plots",
    "text": "Ridgeline Plots\n\nRidgeline plots: Show distribution of data across categories\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport joypy\n\n# Create realistic temperature distributions\nnp.random.seed(42)\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ndata = []\n\n# Temperature parameters for Helsinki, Finland (as an example)\nmean_temps = [\n    -3.5,   # Jan\n    -4.5,   # Feb\n    -1.0,   # Mar\n    4.5,    # Apr\n    10.8,   # May\n    15.5,   # Jun\n    18.0,   # Jul\n    16.3,   # Aug\n    11.5,   # Sep\n    6.6,    # Oct\n    1.6,    # Nov\n    -2.0    # Dec\n]\n\n# Winter months have more variance than summer months\nvariances = [\n    2.5,    # Jan\n    2.5,    # Feb\n    2.2,    # Mar\n    2.0,    # Apr\n    1.8,    # May\n    1.5,    # Jun\n    1.2,    # Jul\n    1.5,    # Aug\n    1.8,    # Sep\n    2.0,    # Oct\n    2.2,    # Nov\n    2.5     # Dec\n]\n\nfor month, mean_temp, variance in zip(months, mean_temps, variances):\n    # Add some random noise to make it more natural\n    distribution = np.random.normal(loc=mean_temp, scale=variance, size=1000)\n    # Add slight skewness to winter months (more extreme cold than warm days)\n    if mean_temp &lt; 5:\n        distribution = distribution - 0.3 * np.abs(distribution)\n    data.append(pd.DataFrame({\n        'temperature': distribution,\n        'month': month\n    }))\n\ndf = pd.concat(data, ignore_index=True)\n\n# Create the ridgeline plot\njoypy.joyplot(\n    data=df,\n    by=\"month\",\n    column=\"temperature\",\n    colormap=plt.cm.viridis,\n    title=\"Monthly Temperature Distributions\",\n    labels=months,\n    range_style='all',\n    tails=0.2,\n    overlap=0.7,\n    grid=True,\n    figsize=(12, 4)\n)\n\nplt.xlabel(\"Temperature (°C)\")\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#python-plotting-libraries",
    "href": "lectures/lec_09_presentation.html#python-plotting-libraries",
    "title": "Lecture IX - Data Visualization",
    "section": "Python Plotting Libraries",
    "text": "Python Plotting Libraries\n\nThere are many libraries for data visualization in Python\n\nMatplotlib: The foundation for most Python plotting libraries\nSeaborn: Interface for statistical data visualization\nPlotly: Interactive and customizable plotting library\nBokeh: Interactive and complex plots\nJoypy: Easy ridgeline plots"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#matplotlib-module",
    "href": "lectures/lec_09_presentation.html#matplotlib-module",
    "title": "Lecture IX - Data Visualization",
    "section": "Matplotlib Module",
    "text": "Matplotlib Module\n\nMatplotlib is the foundation for most Python plotting libraries\nCustomizable and suitable for high-quality figures\nProvides easy to use functions for plotting\nWorks well with Pandas DataFrames"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#basic-matplotlib-example",
    "href": "lectures/lec_09_presentation.html#basic-matplotlib-example",
    "title": "Lecture IX - Data Visualization",
    "section": "Basic Matplotlib Example",
    "text": "Basic Matplotlib Example\n\nimport matplotlib.pyplot as plt # .pyplot is the main module in the package\nplt.plot([1, 2, 3, 4], [10, 20, 25, 30]) # first is x-axis, second is y-axis\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#customizing-plots",
    "href": "lectures/lec_09_presentation.html#customizing-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Customizing Plots",
    "text": "Customizing Plots\n\nLine Types: with ls=\n\n-, --, -., :, None;\n\nColors: with color=\n\nr, g, b, c, m, y, k, . . .\n\nMarkers: with marker=\n\no, s, D, p, *, x, . . .\n\nLabels: with label=, title=, xlabel=, ylabel="
  },
  {
    "objectID": "lectures/lec_09_presentation.html#red-dashed-line-with-circles",
    "href": "lectures/lec_09_presentation.html#red-dashed-line-with-circles",
    "title": "Lecture IX - Data Visualization",
    "section": "Red dashed line with circles",
    "text": "Red dashed line with circles\n\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='red',\n    linestyle='--',\n    marker='o')\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#red-dashed-line-with-circles-output",
    "href": "lectures/lec_09_presentation.html#red-dashed-line-with-circles-output",
    "title": "Lecture IX - Data Visualization",
    "section": "Red dashed line with circles",
    "text": "Red dashed line with circles"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#blue-dotted-line-with-squares",
    "href": "lectures/lec_09_presentation.html#blue-dotted-line-with-squares",
    "title": "Lecture IX - Data Visualization",
    "section": "Blue dotted line with squares",
    "text": "Blue dotted line with squares\nQuestion: How can we create such a plot?\n\n\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#blue-dotted-line-with-squares-output",
    "href": "lectures/lec_09_presentation.html#blue-dotted-line-with-squares-output",
    "title": "Lecture IX - Data Visualization",
    "section": "Blue dotted line with squares",
    "text": "Blue dotted line with squares"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#multiple-plots",
    "href": "lectures/lec_09_presentation.html#multiple-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Multiple Plots",
    "text": "Multiple Plots\n\nplt.plot(\n    [1, 2, 3, 4],\n    [8, 22, 21, 36],\n    color='red',\n    linestyle='--',\n    marker='o',\n    label='Red Dashed Line with Circles')\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#multiple-plots-output",
    "href": "lectures/lec_09_presentation.html#multiple-plots-output",
    "title": "Lecture IX - Data Visualization",
    "section": "Multiple Plots",
    "text": "Multiple Plots"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#type-and-size-of-the-plot",
    "href": "lectures/lec_09_presentation.html#type-and-size-of-the-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "Type and Size of the Plot",
    "text": "Type and Size of the Plot\n\nplt.figure(figsize=(14, 4))\nplt.scatter(\n    [1, 2, 3, 4],\n    [8, 22, 21, 36],\n    color='red',\n    marker='o',\n    label='Red Circles')\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#type-and-size-of-the-plot-output",
    "href": "lectures/lec_09_presentation.html#type-and-size-of-the-plot-output",
    "title": "Lecture IX - Data Visualization",
    "section": "Type and Size of the Plot",
    "text": "Type and Size of the Plot"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#plots-in-action",
    "href": "lectures/lec_09_presentation.html#plots-in-action",
    "title": "Lecture IX - Data Visualization",
    "section": "Plots in Action",
    "text": "Plots in Action\nTask: Create two line plots of the following data:\n\n# Make sure to label the plots! Color and marker are optional.\nimport numpy as np\n\nx = np.linspace(0, 10, 100) # 100 points between 0 and 10\ny1 = np.sin(x) # sine function\ny2 = np.cos(x) # cosine function"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#solution",
    "href": "lectures/lec_09_presentation.html#solution",
    "title": "Lecture IX - Data Visualization",
    "section": "Solution",
    "text": "Solution"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#the-message-matters",
    "href": "lectures/lec_09_presentation.html#the-message-matters",
    "title": "Lecture IX - Data Visualization",
    "section": "The Message Matters",
    "text": "The Message Matters\n\nMaking beautiful plots is rather easy1\nIt is important to understand the underlying data\nWhat kind of plots are appropriate for your data?\nWhat is the message you want to convey?\n\nAt least nowadays with the assistance of AI!"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#example-of-a-bad-plot",
    "href": "lectures/lec_09_presentation.html#example-of-a-bad-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "Example of a bad plot",
    "text": "Example of a bad plot\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Convert Month to numeric for proper ordering\nmonth_map = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n             'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\ndf['Month_num'] = df['Month'].map(month_map)\n\n# Sort by Year and Month\ndf = df.sort_values(['Year', 'Month_num'])\n\n# Create the plot\nplt.figure(figsize=(12, 4))\n\n# Plot each year as a separate line\nfor year in df['Year'].unique():\n    year_data = df[df['Year'] == year]\n    plt.plot(year_data['Month_num'], year_data['Anomaly'], label=str(year), marker='o')\n\n# Customize the plot\nplt.title('Temperature Anomalies by Month for Each Year')\nplt.xlabel('Month')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set x-axis ticks to show month names\nplt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Adjust layout to prevent legend cutoff\nplt.tight_layout()\n\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#an-okay-plot",
    "href": "lectures/lec_09_presentation.html#an-okay-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "An okay plot",
    "text": "An okay plot\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define correct month order\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n               'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Pivot the data and reorder columns\npivot_df = df.pivot(index='Year', columns='Month', values='Anomaly')\npivot_df = pivot_df[month_order]  # Reorder columns according to month_order\n\n# Create the plot with a blue-to-red gradient for winter-to-summer\nfig, ax = plt.subplots(figsize=(12, 4))  # Create figure and axes objects\n\n# Create color gradient\ncolors = []\nfor i in range(12):\n    if i &lt;= 5:  # January to June\n        r = i / 5\n        b = 1 - (i / 5)\n        colors.append((r, 0, b))\n    else:  # July to December\n        r = 1 - ((i-6) / 5)\n        b = (i-6) / 5\n        colors.append((r, 0, b))\n\npivot_df.plot(ax=ax, marker='x', linewidth=1, alpha=0.5, color=colors)\n\nplt.title('Temperature Anomalies by Month for Each Year')\nplt.xlabel('Month')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title='Year')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#a-better-plot",
    "href": "lectures/lec_09_presentation.html#a-better-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "A better plot",
    "text": "A better plot\n\n\nCode\n# Calculate yearly averages\nyearly_means = df.groupby('Year')['Anomaly'].agg(['mean', 'std'])\n\n# Create the plot\nplt.figure(figsize=(12, 4))\n\n# Plot mean values as a line\nplt.plot(yearly_means.index, yearly_means['mean'],\n         color='navy', linewidth=2, marker='o',\n         label='Mean Temperature Anomaly')\n\n# Add shaded area for standard deviation\nplt.fill_between(yearly_means.index,\n                yearly_means['mean'] - yearly_means['std'],\n                yearly_means['mean'] + yearly_means['std'],\n                color='lightblue', alpha=0.3,\n                label='±1 Standard Deviation')\n\n# Customize the plot\nplt.title('Yearly Average Temperature Anomalies with Confidence Interval')\nplt.xlabel('Year')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.legend()\n\n# Add zero reference line\nplt.axhline(y=0, color='red', linestyle='--', alpha=0.3)\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#how-to-build-such-a-plot",
    "href": "lectures/lec_09_presentation.html#how-to-build-such-a-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "How to build such a plot?",
    "text": "How to build such a plot?\n\nThink: about what you want to build\nDescribe: what you want to build in detail\nUse AI: to build the plot for you\nUse Libraries: documentation to fine-tune the plot\n\n\n\n\n\n\n\n\nAs usual, the best way to learn is by doing! AI makes it very easy to get started."
  },
  {
    "objectID": "lectures/lec_09_presentation.html#good-plotting-in-action",
    "href": "lectures/lec_09_presentation.html#good-plotting-in-action",
    "title": "Lecture IX - Data Visualization",
    "section": "Good Plotting in Action",
    "text": "Good Plotting in Action\nTask: Create a plot of your own for the data.\n\n\n# TODO: Load the data from the `temp_anomaly_data.xlsx` file you have saved last lecture yourself and plot the temperature anomaly data. Find a way to make the plot meaningful and attractive in order to tell a story for the reader.\n# YOUR CODE HERE"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#dash-for-dashboards",
    "href": "lectures/lec_09_presentation.html#dash-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Dash for Dashboards",
    "text": "Dash for Dashboards\n\nDash is a framework for building web applications\nIt is built on top of Flask, Plotly.js, and React.js\nThis lecture is build on top of React.js\nIt is very customizable and has a lot of examples"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#panel-for-dashboards",
    "href": "lectures/lec_09_presentation.html#panel-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Panel for Dashboards",
    "text": "Panel for Dashboards\n\nPanel is built on top of Bokeh (instead of Plotly.js)\nReasonably easy to use, but not super easy\nHighly customizable, also for multiple pages\nGood performance even for more complex dashboards"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#streamlit-for-dashboards",
    "href": "lectures/lec_09_presentation.html#streamlit-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Streamlit for Dashboards",
    "text": "Streamlit for Dashboards\n\nStreamlit is a rather new and popular library\nVery easy and fast way to build dashboards\nPerformance only good on simpler dashboards\nNot as many examples and as customizable"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#nicegui-for-dashboards",
    "href": "lectures/lec_09_presentation.html#nicegui-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "NiceGUI for Dashboards",
    "text": "NiceGUI for Dashboards\n\nNiceGUI is also a relatively new library\nVery customizable and a large fan base\nNot as many examples and as easy to use as Streamlit\nAllows building web-based desktop applications"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#which-one-to-choose",
    "href": "lectures/lec_09_presentation.html#which-one-to-choose",
    "title": "Lecture IX - Data Visualization",
    "section": "Which one to choose?",
    "text": "Which one to choose?\n\nStreamlit: if you want to build a dashboard fast\nDash: if you want more flexibility and Plotly.js\nPanel: if you want a Bokeh-based solution with more flexibility\nNiceGUI: if you want to build a desktop-like application\n\n\n\n\n\n\n\n\nThere are many opinions on which tool is the best one. My approach is usually just to try the main contenders to see which one suits my workflow best."
  },
  {
    "objectID": "lectures/lec_09_presentation.html#how-to-build-a-dashboard",
    "href": "lectures/lec_09_presentation.html#how-to-build-a-dashboard",
    "title": "Lecture IX - Data Visualization",
    "section": "How to build a dashboard",
    "text": "How to build a dashboard\n\nWe won’t go into details on how to build dashboards\nThe best way to learn is by doing!\nUse AI and the libraries documentation as starting points\nWe will also build a dashboard in today’s tutorial"
  },
  {
    "objectID": "lectures/lec_09_presentation.html#pyside6-for-guis",
    "href": "lectures/lec_09_presentation.html#pyside6-for-guis",
    "title": "Lecture IX - Data Visualization",
    "section": "PySide6 for GUIs",
    "text": "PySide6 for GUIs\n\nHere, the recommendation is much easier!\nIn the past, tkinter was often the way to go\nBut currently, my recommendation is PySide6\nIt’s a mature library we can use to build cross-platform desktop applications\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nYou now have the basic knowledge to start working with Plots, Dashboards and GUIs!."
  },
  {
    "objectID": "lectures/lec_09_presentation.html#interesting-books",
    "href": "lectures/lec_09_presentation.html#interesting-books",
    "title": "Lecture IX - Data Visualization",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_09_plotting.html",
    "href": "lectures/lec_09_plotting.html",
    "title": "Lecture IX - Data Visualization",
    "section": "",
    "text": "Powerful library for data manipulation and analysis\nBuilt on top of NumPy, providing additional functionality\nKey features of Pandas include:\n\nData loading from various file formats\nData cleaning and preprocessing\nPowerful grouping and aggregation operations\nMerging and joining datasets\n\n\n\n\n\n\nBasic tools for scientific computing and data analysis\nEfficient data structures and operations for large data\nIntegration with other scientific Python libraries\nUsed in data science, machine learning, and research\n\n. . .\n\n\n\n\n\n\nYou might also need them in future lectures here!",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#pandas-data-analysis",
    "href": "lectures/lec_09_plotting.html#pandas-data-analysis",
    "title": "Lecture IX - Data Visualization",
    "section": "",
    "text": "Powerful library for data manipulation and analysis\nBuilt on top of NumPy, providing additional functionality\nKey features of Pandas include:\n\nData loading from various file formats\nData cleaning and preprocessing\nPowerful grouping and aggregation operations\nMerging and joining datasets",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#why-numpy-and-pandas-are-essential",
    "href": "lectures/lec_09_plotting.html#why-numpy-and-pandas-are-essential",
    "title": "Lecture IX - Data Visualization",
    "section": "",
    "text": "Basic tools for scientific computing and data analysis\nEfficient data structures and operations for large data\nIntegration with other scientific Python libraries\nUsed in data science, machine learning, and research\n\n. . .\n\n\n\n\n\n\nYou might also need them in future lectures here!",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#section",
    "href": "lectures/lec_09_plotting.html#section",
    "title": "Lecture IX - Data Visualization",
    "section": "",
    "text": "Question: What is\ndata visualization?",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#visual-representations-of-data",
    "href": "lectures/lec_09_plotting.html#visual-representations-of-data",
    "title": "Lecture IX - Data Visualization",
    "section": "Visual Representations of Data",
    "text": "Visual Representations of Data\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Generate data\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny = 3 + 2*x + np.random.randn(50)\nsizes = np.random.randint(20, 200, 50)\ncolors = np.random.rand(50)\n\n# Create the plot\nplt.figure(figsize=(12, 5))\nscatter = plt.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')\n\n# Add trend line\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nplt.plot(x, p(x), \"r--\", alpha=0.8, linewidth=2)\n\n# Customize the plot\nplt.title(\"ScatterPlot with Trend Line\", fontsize=16)\nplt.xlabel(\"X-axis\", fontsize=12)\nplt.ylabel(\"Y-axis\", fontsize=12)\nplt.colorbar(scatter, label=\"Color Scale\")\n\n# Add a text annotation\nplt.annotate(\"Interesting point\", xy=(8, 21), xytext=(6.5, 23),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#importance-of-data-visualization",
    "href": "lectures/lec_09_plotting.html#importance-of-data-visualization",
    "title": "Lecture IX - Data Visualization",
    "section": "Importance of Data Visualization",
    "text": "Importance of Data Visualization\n\nCommunicates complex information clearly\nHelps in decision-making processes\nReveals hidden patterns and relationships in data\nMakes data more accessible and engaging\n\n. . .\n\n\n\n\n\n\nHelps to convice stakeholders!",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#bar-charts-and-histograms",
    "href": "lectures/lec_09_plotting.html#bar-charts-and-histograms",
    "title": "Lecture IX - Data Visualization",
    "section": "Bar Charts and Histograms",
    "text": "Bar Charts and Histograms\n\nBar charts: Compare quantities across categories\nHistograms: Show distribution of a continuous variable\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Bar chart\ncategories = ['A', 'B', 'C', 'D']\nvalues = [4, 7, 2, 8]\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.bar(categories, values)\nplt.title('Bar Chart')\n\n# Histogram\ndata = np.random.randn(1000)\n\nplt.subplot(122)\nplt.hist(data, bins=30)\nplt.title('Histogram')\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#line-charts-and-area-charts",
    "href": "lectures/lec_09_plotting.html#line-charts-and-area-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Line Charts and Area Charts",
    "text": "Line Charts and Area Charts\n\nLine charts: Show trends over time or continuous data\nArea charts: Similar to line charts, but with filled areas\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.plot(x, y1, label='sin(x)')\nplt.plot(x, y2, label='cos(x)')\nplt.title('Line Chart')\nplt.legend()\n\nplt.subplot(122)\nplt.fill_between(x, y1, label='sin(x)')\nplt.fill_between(x, y2, label='cos(x)', alpha=0.5)\nplt.title('Area Chart')\nplt.legend()\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#scatter-plots-and-bubble-charts",
    "href": "lectures/lec_09_plotting.html#scatter-plots-and-bubble-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Scatter Plots and Bubble Charts",
    "text": "Scatter Plots and Bubble Charts\n\nScatter plots: Show relationship between two variables\nBubble charts: Adds dimension with varying point sizes\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.rand(50)\ny = np.random.rand(50)\nsizes = np.random.rand(50) * 500\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.scatter(x, y)\nplt.title('Scatter Plot')\n\nplt.subplot(122)\nplt.scatter(x, y, s=sizes, alpha=0.5)\nplt.title('Bubble Chart')\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#pie-charts-and-donut-charts",
    "href": "lectures/lec_09_plotting.html#pie-charts-and-donut-charts",
    "title": "Lecture IX - Data Visualization",
    "section": "Pie Charts and Donut Charts",
    "text": "Pie Charts and Donut Charts\n\nPie charts: Show composition of a whole\nDonut charts: Similar to pie charts, but with a hole\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nlabels = 'A', 'B', 'C', 'D'\nsizes = [15, 30, 45, 10]\n\nplt.figure(figsize=(12, 3))\n\n# Pie chart (left subplot)\nplt.subplot(121)\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.title('Pie Chart')\n\n# Donut chart (right subplot)\nplt.subplot(122)\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        pctdistance=0.7, labeldistance=1.1,\n        wedgeprops=dict(width=0.5, edgecolor='white'))\nplt.title('Donut Chart')\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#box-plots-and-violin-plots",
    "href": "lectures/lec_09_plotting.html#box-plots-and-violin-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Box Plots and Violin Plots",
    "text": "Box Plots and Violin Plots\n\nBox plots: Show distribution of data through quartiles\nViolin plots: Combine box plot with kernel density\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\ndata = [np.random.normal(0, std, 100) for std in range(1, 5)]\n\nplt.figure(figsize=(12, 3))\nplt.subplot(121)\nplt.boxplot(data)\nplt.title('Box Plot')\n\nplt.subplot(122)\nsns.violinplot(data)\nplt.title('Violin Plot')\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#network-graphs-and-trees",
    "href": "lectures/lec_09_plotting.html#network-graphs-and-trees",
    "title": "Lecture IX - Data Visualization",
    "section": "Network Graphs and Trees",
    "text": "Network Graphs and Trees\n\nNetwork graphs: Show relationships between entities\nTree diagrams: Display hierarchical structures\n\n\n\nCode\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\n\n# Create figure\nplt.figure(figsize=(12, 3))\n\n# Network graph (left subplot)\nplt.subplot(121)\nG = nx.random_geometric_graph(15, 0.3)  # Reduced nodes for clarity\npos = nx.spring_layout(G, k=1, seed=42)  # Better layout with fixed seed\nnx.draw_networkx_nodes(G, pos,\n                      node_color='lightblue',\n                      node_size=500,\n                      edgecolors='navy',\n                      linewidths=1)\nnx.draw_networkx_edges(G, pos,\n                      edge_color='gray',\n                      width=1,\n                      alpha=0.5)\nnx.draw_networkx_labels(G, pos,\n                       font_size=8,\n                       font_weight='bold')\nplt.title('Network Graph', pad=10)\n\n# Tree diagram (right subplot)\nplt.subplot(122)\nT = nx.balanced_tree(2, 2)  # Create a balanced tree with 2 children, depth 2\npos_tree = nx.spring_layout(T, k=1.5, seed=42)\nnx.draw_networkx_nodes(T, pos_tree,\n                      node_color='lightgreen',\n                      node_size=500,\n                      edgecolors='darkgreen',\n                      linewidths=1)\nnx.draw_networkx_edges(T, pos_tree,\n                      edge_color='forestgreen',\n                      width=1)\nnx.draw_networkx_labels(T, pos_tree,\n                       font_size=8,\n                       font_weight='bold')\nplt.title('Tree', pad=10)\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#ridgeline-plots",
    "href": "lectures/lec_09_plotting.html#ridgeline-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Ridgeline Plots",
    "text": "Ridgeline Plots\n\nRidgeline plots: Show distribution of data across categories\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport joypy\n\n# Create realistic temperature distributions\nnp.random.seed(42)\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ndata = []\n\n# Temperature parameters for Helsinki, Finland (as an example)\nmean_temps = [\n    -3.5,   # Jan\n    -4.5,   # Feb\n    -1.0,   # Mar\n    4.5,    # Apr\n    10.8,   # May\n    15.5,   # Jun\n    18.0,   # Jul\n    16.3,   # Aug\n    11.5,   # Sep\n    6.6,    # Oct\n    1.6,    # Nov\n    -2.0    # Dec\n]\n\n# Winter months have more variance than summer months\nvariances = [\n    2.5,    # Jan\n    2.5,    # Feb\n    2.2,    # Mar\n    2.0,    # Apr\n    1.8,    # May\n    1.5,    # Jun\n    1.2,    # Jul\n    1.5,    # Aug\n    1.8,    # Sep\n    2.0,    # Oct\n    2.2,    # Nov\n    2.5     # Dec\n]\n\nfor month, mean_temp, variance in zip(months, mean_temps, variances):\n    # Add some random noise to make it more natural\n    distribution = np.random.normal(loc=mean_temp, scale=variance, size=1000)\n    # Add slight skewness to winter months (more extreme cold than warm days)\n    if mean_temp &lt; 5:\n        distribution = distribution - 0.3 * np.abs(distribution)\n    data.append(pd.DataFrame({\n        'temperature': distribution,\n        'month': month\n    }))\n\ndf = pd.concat(data, ignore_index=True)\n\n# Create the ridgeline plot\njoypy.joyplot(\n    data=df,\n    by=\"month\",\n    column=\"temperature\",\n    colormap=plt.cm.viridis,\n    title=\"Monthly Temperature Distributions\",\n    labels=months,\n    range_style='all',\n    tails=0.2,\n    overlap=0.7,\n    grid=True,\n    figsize=(12, 4)\n)\n\nplt.xlabel(\"Temperature (°C)\")\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#python-plotting-libraries",
    "href": "lectures/lec_09_plotting.html#python-plotting-libraries",
    "title": "Lecture IX - Data Visualization",
    "section": "Python Plotting Libraries",
    "text": "Python Plotting Libraries\n\nThere are many libraries for data visualization in Python\n\nMatplotlib: The foundation for most Python plotting libraries\nSeaborn: Interface for statistical data visualization\nPlotly: Interactive and customizable plotting library\nBokeh: Interactive and complex plots\nJoypy: Easy ridgeline plots",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#matplotlib-module",
    "href": "lectures/lec_09_plotting.html#matplotlib-module",
    "title": "Lecture IX - Data Visualization",
    "section": "Matplotlib Module",
    "text": "Matplotlib Module\n\nMatplotlib is the foundation for most Python plotting libraries\nCustomizable and suitable for high-quality figures\nProvides easy to use functions for plotting\nWorks well with Pandas DataFrames",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#basic-matplotlib-example",
    "href": "lectures/lec_09_plotting.html#basic-matplotlib-example",
    "title": "Lecture IX - Data Visualization",
    "section": "Basic Matplotlib Example",
    "text": "Basic Matplotlib Example\n\nimport matplotlib.pyplot as plt # .pyplot is the main module in the package\nplt.plot([1, 2, 3, 4], [10, 20, 25, 30]) # first is x-axis, second is y-axis\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#customizing-plots",
    "href": "lectures/lec_09_plotting.html#customizing-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Customizing Plots",
    "text": "Customizing Plots\n\nLine Types: with ls=\n\n-, --, -., :, None;\n\nColors: with color=\n\nr, g, b, c, m, y, k, . . .\n\nMarkers: with marker=\n\no, s, D, p, *, x, . . .\n\nLabels: with label=, title=, xlabel=, ylabel=",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#red-dashed-line-with-circles",
    "href": "lectures/lec_09_plotting.html#red-dashed-line-with-circles",
    "title": "Lecture IX - Data Visualization",
    "section": "Red dashed line with circles",
    "text": "Red dashed line with circles\n\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='red',\n    linestyle='--',\n    marker='o')\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#blue-dotted-line-with-squares",
    "href": "lectures/lec_09_plotting.html#blue-dotted-line-with-squares",
    "title": "Lecture IX - Data Visualization",
    "section": "Blue dotted line with squares",
    "text": "Blue dotted line with squares\nQuestion: How can we create such a plot?\n. . .\n\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#multiple-plots",
    "href": "lectures/lec_09_plotting.html#multiple-plots",
    "title": "Lecture IX - Data Visualization",
    "section": "Multiple Plots",
    "text": "Multiple Plots\n\nplt.plot(\n    [1, 2, 3, 4],\n    [8, 22, 21, 36],\n    color='red',\n    linestyle='--',\n    marker='o',\n    label='Red Dashed Line with Circles')\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#type-and-size-of-the-plot",
    "href": "lectures/lec_09_plotting.html#type-and-size-of-the-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "Type and Size of the Plot",
    "text": "Type and Size of the Plot\n\nplt.figure(figsize=(14, 4))\nplt.scatter(\n    [1, 2, 3, 4],\n    [8, 22, 21, 36],\n    color='red',\n    marker='o',\n    label='Red Circles')\nplt.plot(\n    [1, 2, 3, 4],\n    [10, 20, 25, 30],\n    color='blue',\n    linestyle=':',\n    marker='s',\n    label='Blue Dotted Line with Squares')\nplt.legend()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#plots-in-action",
    "href": "lectures/lec_09_plotting.html#plots-in-action",
    "title": "Lecture IX - Data Visualization",
    "section": "Plots in Action",
    "text": "Plots in Action\nTask: Create two line plots of the following data:\n\n# Make sure to label the plots! Color and marker are optional.\nimport numpy as np\n\nx = np.linspace(0, 10, 100) # 100 points between 0 and 10\ny1 = np.sin(x) # sine function\ny2 = np.cos(x) # cosine function",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#solution",
    "href": "lectures/lec_09_plotting.html#solution",
    "title": "Lecture IX - Data Visualization",
    "section": "Solution",
    "text": "Solution",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#the-message-matters",
    "href": "lectures/lec_09_plotting.html#the-message-matters",
    "title": "Lecture IX - Data Visualization",
    "section": "The Message Matters",
    "text": "The Message Matters\n\nMaking beautiful plots is rather easy1\nIt is important to understand the underlying data\nWhat kind of plots are appropriate for your data?\nWhat is the message you want to convey?",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#example-of-a-bad-plot",
    "href": "lectures/lec_09_plotting.html#example-of-a-bad-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "Example of a bad plot",
    "text": "Example of a bad plot\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Convert Month to numeric for proper ordering\nmonth_map = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n             'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\ndf['Month_num'] = df['Month'].map(month_map)\n\n# Sort by Year and Month\ndf = df.sort_values(['Year', 'Month_num'])\n\n# Create the plot\nplt.figure(figsize=(12, 4))\n\n# Plot each year as a separate line\nfor year in df['Year'].unique():\n    year_data = df[df['Year'] == year]\n    plt.plot(year_data['Month_num'], year_data['Anomaly'], label=str(year), marker='o')\n\n# Customize the plot\nplt.title('Temperature Anomalies by Month for Each Year')\nplt.xlabel('Month')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set x-axis ticks to show month names\nplt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Adjust layout to prevent legend cutoff\nplt.tight_layout()\n\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#an-okay-plot",
    "href": "lectures/lec_09_plotting.html#an-okay-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "An okay plot",
    "text": "An okay plot\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define correct month order\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n               'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Pivot the data and reorder columns\npivot_df = df.pivot(index='Year', columns='Month', values='Anomaly')\npivot_df = pivot_df[month_order]  # Reorder columns according to month_order\n\n# Create the plot with a blue-to-red gradient for winter-to-summer\nfig, ax = plt.subplots(figsize=(12, 4))  # Create figure and axes objects\n\n# Create color gradient\ncolors = []\nfor i in range(12):\n    if i &lt;= 5:  # January to June\n        r = i / 5\n        b = 1 - (i / 5)\n        colors.append((r, 0, b))\n    else:  # July to December\n        r = 1 - ((i-6) / 5)\n        b = (i-6) / 5\n        colors.append((r, 0, b))\n\npivot_df.plot(ax=ax, marker='x', linewidth=1, alpha=0.5, color=colors)\n\nplt.title('Temperature Anomalies by Month for Each Year')\nplt.xlabel('Month')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title='Year')\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#a-better-plot",
    "href": "lectures/lec_09_plotting.html#a-better-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "A better plot",
    "text": "A better plot\n\n\nCode\n# Calculate yearly averages\nyearly_means = df.groupby('Year')['Anomaly'].agg(['mean', 'std'])\n\n# Create the plot\nplt.figure(figsize=(12, 4))\n\n# Plot mean values as a line\nplt.plot(yearly_means.index, yearly_means['mean'],\n         color='navy', linewidth=2, marker='o',\n         label='Mean Temperature Anomaly')\n\n# Add shaded area for standard deviation\nplt.fill_between(yearly_means.index,\n                yearly_means['mean'] - yearly_means['std'],\n                yearly_means['mean'] + yearly_means['std'],\n                color='lightblue', alpha=0.3,\n                label='±1 Standard Deviation')\n\n# Customize the plot\nplt.title('Yearly Average Temperature Anomalies with Confidence Interval')\nplt.xlabel('Year')\nplt.ylabel('Temperature Anomaly (°C)')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.legend()\n\n# Add zero reference line\nplt.axhline(y=0, color='red', linestyle='--', alpha=0.3)\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#how-to-build-such-a-plot",
    "href": "lectures/lec_09_plotting.html#how-to-build-such-a-plot",
    "title": "Lecture IX - Data Visualization",
    "section": "How to build such a plot?",
    "text": "How to build such a plot?\n\nThink: about what you want to build\nDescribe: what you want to build in detail\nUse AI: to build the plot for you\nUse Libraries: documentation to fine-tune the plot\n\n. . .\n\n\n\n\n\n\nAs usual, the best way to learn is by doing! AI makes it very easy to get started.",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#good-plotting-in-action",
    "href": "lectures/lec_09_plotting.html#good-plotting-in-action",
    "title": "Lecture IX - Data Visualization",
    "section": "Good Plotting in Action",
    "text": "Good Plotting in Action\nTask: Create a plot of your own for the data.\n. . .\n\n# TODO: Load the data from the `temp_anomaly_data.xlsx` file you have saved last lecture yourself and plot the temperature anomaly data. Find a way to make the plot meaningful and attractive in order to tell a story for the reader.\n# YOUR CODE HERE",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#dash-for-dashboards",
    "href": "lectures/lec_09_plotting.html#dash-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Dash for Dashboards",
    "text": "Dash for Dashboards\n\nDash is a framework for building web applications\nIt is built on top of Flask, Plotly.js, and React.js\nThis lecture is build on top of React.js\nIt is very customizable and has a lot of examples",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#panel-for-dashboards",
    "href": "lectures/lec_09_plotting.html#panel-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Panel for Dashboards",
    "text": "Panel for Dashboards\n\nPanel is built on top of Bokeh (instead of Plotly.js)\nReasonably easy to use, but not super easy\nHighly customizable, also for multiple pages\nGood performance even for more complex dashboards",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#streamlit-for-dashboards",
    "href": "lectures/lec_09_plotting.html#streamlit-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "Streamlit for Dashboards",
    "text": "Streamlit for Dashboards\n\nStreamlit is a rather new and popular library\nVery easy and fast way to build dashboards\nPerformance only good on simpler dashboards\nNot as many examples and as customizable",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#nicegui-for-dashboards",
    "href": "lectures/lec_09_plotting.html#nicegui-for-dashboards",
    "title": "Lecture IX - Data Visualization",
    "section": "NiceGUI for Dashboards",
    "text": "NiceGUI for Dashboards\n\nNiceGUI is also a relatively new library\nVery customizable and a large fan base\nNot as many examples and as easy to use as Streamlit\nAllows building web-based desktop applications",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#which-one-to-choose",
    "href": "lectures/lec_09_plotting.html#which-one-to-choose",
    "title": "Lecture IX - Data Visualization",
    "section": "Which one to choose?",
    "text": "Which one to choose?\n\nStreamlit: if you want to build a dashboard fast\nDash: if you want more flexibility and Plotly.js\nPanel: if you want a Bokeh-based solution with more flexibility\nNiceGUI: if you want to build a desktop-like application\n\n. . .\n\n\n\n\n\n\nThere are many opinions on which tool is the best one. My approach is usually just to try the main contenders to see which one suits my workflow best.",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#how-to-build-a-dashboard",
    "href": "lectures/lec_09_plotting.html#how-to-build-a-dashboard",
    "title": "Lecture IX - Data Visualization",
    "section": "How to build a dashboard",
    "text": "How to build a dashboard\n\nWe won’t go into details on how to build dashboards\nThe best way to learn is by doing!\nUse AI and the libraries documentation as starting points\nWe will also build a dashboard in today’s tutorial",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#pyside6-for-guis",
    "href": "lectures/lec_09_plotting.html#pyside6-for-guis",
    "title": "Lecture IX - Data Visualization",
    "section": "PySide6 for GUIs",
    "text": "PySide6 for GUIs\n\nHere, the recommendation is much easier!\nIn the past, tkinter was often the way to go\nBut currently, my recommendation is PySide6\nIt’s a mature library we can use to build cross-platform desktop applications\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nYou now have the basic knowledge to start working with Plots, Dashboards and GUIs!.",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#interesting-books",
    "href": "lectures/lec_09_plotting.html#interesting-books",
    "title": "Lecture IX - Data Visualization",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_09_plotting.html#footnotes",
    "href": "lectures/lec_09_plotting.html#footnotes",
    "title": "Lecture IX - Data Visualization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAt least nowadays with the assistance of AI!↩︎",
    "crumbs": [
      "09 Plotting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_presentation.html#modules",
    "href": "lectures/lec_07_presentation.html#modules",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Modules",
    "text": "Modules\n\nModules are .py files containing Python code\nThey are used to organize and reuse code\nThey can define functions, classes, and variables\nCan be imported into other scripts\n\n\n\n\n\n\n\n\nWe can import entire modules or individual functions, classes or variables."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#standard-libraries",
    "href": "lectures/lec_07_presentation.html#standard-libraries",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Standard Libraries",
    "text": "Standard Libraries\n\nPython includes many built-in modules like:\n\nrandom provides functions for random numbers\nos allows interaction with the operating system\ncsv is used for reading and writing CSV files\nre is used for working with regular expressions"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#packages",
    "href": "lectures/lec_07_presentation.html#packages",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Packages",
    "text": "Packages\n\nPackages are collections of modules\nOften available from the Python Package Index (PyPI)\nInstall using uv add &lt;package_name&gt;\nVirtual environments help manage dependencies\n\n\n\n\n\n\n\n\nVirtual environments are not that important for you right now, as they are mostly used if you work on several projects with different dependecies at once."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#what-is-numpy",
    "href": "lectures/lec_07_presentation.html#what-is-numpy",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "What is NumPy?",
    "text": "What is NumPy?\n\nNumPy is a package for scientific computing in Python\nProvides large, multi-dimensional arrays and matrices\nWide range of functions to operate on these\nPython lists can be slow - Numpy arrays are much faster\n\n\n\n\n\n\n\n\nThe name of the package comes from Numerical Python."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#why-is-numpy-so-fast",
    "href": "lectures/lec_07_presentation.html#why-is-numpy-so-fast",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Why is NumPy so fast?",
    "text": "Why is NumPy so fast?\n\nArrays are stored in a contiguous block of memory\nThis allows for efficient memory access patterns\nOperations are implemented in the languages C and C++\n\n\nQuestion: Have you heard of C and C++?"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#how-to-get-started",
    "href": "lectures/lec_07_presentation.html#how-to-get-started",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "How to get started",
    "text": "How to get started\n\nInstall NumPy using uv add numpy\nImport NumPy in a script using import numpy as np\n\n\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5]); type(x)\n\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\n\nYou don’t have to use as np. But it is a common practice to do so."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#creating-arrays",
    "href": "lectures/lec_07_presentation.html#creating-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nThe backbone of Numpy is the so called ndarray\nCan be initialized from different data structures:\n\n\nimport numpy as np\n\narray_from_list = np.array([1, 1, 1, 1])\nprint(array_from_list)\n\n\n\n[1 1 1 1]\n\n\n\nimport numpy as np\n\narray_from_tuple = np.array((2, 2, 2, 2))\nprint(array_from_tuple)\n\n\n\n[2 2 2 2]"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#hetergenous-data-types",
    "href": "lectures/lec_07_presentation.html#hetergenous-data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Hetergenous Data Types",
    "text": "Hetergenous Data Types\n\nIt is possible to store different data types in a ndarray\n\n\nimport numpy as np\n\narray_different_types = np.array([\"s\", 2, 2.0, \"i\"])\nprint(array_different_types)\n\n\n\n['s' '2' '2.0' 'i']\n\n\n\n\n\n\n\n\n\nBut it is mostly not recommended, as it can lead to performance issues. If possible, try to keep the types homogenous."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#prefilled-arrays",
    "href": "lectures/lec_07_presentation.html#prefilled-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Prefilled Arrays",
    "text": "Prefilled Arrays\nImprove performance by allocating memory upfront\n\nnp.zeros(shape): to create an array of zeros\nnp.random.rand(shape): array of random values\nnp.arange(start, stop, step): evenly spaced\nnp.linspace(start, stop, num): evenly spaced\n\n\n\n\n\n\n\n\nThe shape refers to the size of the array. It can have one or multiple dimensions."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#dimensions",
    "href": "lectures/lec_07_presentation.html#dimensions",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Dimensions",
    "text": "Dimensions\n\nThe shape is specified as tuple in these arrays\n(2) or 2 creates a 1-dimensional array (vetor)\n(2,2) creates a 2-dimensional array (matrix)\n(2,2,2) 3-dimensional array (3rd order tensor)\n(2,2,2,2) 4-dimensional array (4th order tensor)\n…"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#computations",
    "href": "lectures/lec_07_presentation.html#computations",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Computations",
    "text": "Computations\n\nWe can apply operations to the entire array at once\nThis is much faster than applying them element-wise\n\n\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5])\nx + 1\n\n\n\narray([2, 3, 4, 5, 6])"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#arrays-in-action",
    "href": "lectures/lec_07_presentation.html#arrays-in-action",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Arrays in Action",
    "text": "Arrays in Action\nTask: Practice working with Numpy:\n\n# TODO: Create a 3-dimensional tensor with filled with zeros\n# Choose the shape of the tensor, but it should have 200 elements\n# Add the number 5 to all values of the tensor\n\n# Your code here\nassert sum(tensor) == 1000\n\n# TODO: Print the shape of the tensor using the method shape()\n# TODO: Print the dtype of the tensor using the method dtype()\n# TODO: Print the size of the tensor using the method size()"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#indexing-and-slicing",
    "href": "lectures/lec_07_presentation.html#indexing-and-slicing",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\n\nAccessing and slicing ndarray works as before\nHigher dimension element access with multiple indices\n\n\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nx = np.random.randint(0, 10, size=(3, 3))\nprint(x); print(\"---\")\nprint(x[0:2,0:2])\n\n\n\n[[0 1 0]\n [2 7 1]\n [1 1 6]]\n---\n[[0 1]\n [2 7]]"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#data-types",
    "href": "lectures/lec_07_presentation.html#data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Data Types",
    "text": "Data Types\n\nNumpy provides data types as characters\ni: integer\nb: boolean\nf: float\nS: string\nU: unicode\n\n\n\nstring_array = np.array([\"Hello\", \"World\"]); string_array.dtype\n\n\n\ndtype('&lt;U5')"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#enforcing-data-types",
    "href": "lectures/lec_07_presentation.html#enforcing-data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Enforcing Data Types",
    "text": "Enforcing Data Types\n\nWe can also provide the type when creating arrays\n\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f'); print(x.dtype)\n\n\n\nfloat32\n\n\n\n\n\nOr we can change them for existing arrays\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f'); print(x.astype('i').dtype)\n\n\n\nint32\n\n\n\n\n\n\n\n\n\n\nNote, how the types are specified as int32 and float32."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#sidenote-bits",
    "href": "lectures/lec_07_presentation.html#sidenote-bits",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Sidenote: Bits",
    "text": "Sidenote: Bits\nQuestion: Do you have an idea what 32 stands for?\n\n\nIt’s the number of bits used to represent a number\n\nint16 is a 16-bit integer\nfloat32 is a 32-bit floating point number\nint64 is a 64-bit integer\nfloat128 is a 128-bit floating point number"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#why-do-bits-matter",
    "href": "lectures/lec_07_presentation.html#why-do-bits-matter",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Why do Bits Matter?",
    "text": "Why do Bits Matter?\n\nThey matter, because they can affect:\n\nthe performance of your code\nthe precision of your results\n\n\n\n\nThat’s why numbers can have a limited precision!\n\nAn int8 has to be in the range of -128 to 127\nAn int16 has to be in the range of -32768 to 32767\n\n\n\n\nQuestion: Size difference between int16 and int64?"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#joining-arrays",
    "href": "lectures/lec_07_presentation.html#joining-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Joining Arrays",
    "text": "Joining Arrays\n\nYou can use concatenate two join arrays\nWith axis you can specify the dimension\nIn 2-dimensions hstack() and vstack() are easier\n\n\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nones = np.array((1,1,1,1))\ntwos = np.array((1,1,1,1)) *2\nprint(np.vstack((ones,twos))); print(np.hstack((ones,twos)))\n\n\n\n[[1 1 1 1]\n [2 2 2 2]]\n[1 1 1 1 2 2 2 2]"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#common-methods",
    "href": "lectures/lec_07_presentation.html#common-methods",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Common Methods",
    "text": "Common Methods\n\nsort(): sort the array from low to high\nreshape(): reshape the array into a new shape\nflatten(): flatten the array into a 1D array\nsqueeze(): squeeze the array to remove 1D entries\ntranspose(): transpose the array\n\n\n\n\n\n\n\n\nTry experiment with these methods, they can make your work much easier."
  },
  {
    "objectID": "lectures/lec_07_presentation.html#speed-differences-in-action",
    "href": "lectures/lec_07_presentation.html#speed-differences-in-action",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Speed Differences in Action",
    "text": "Speed Differences in Action\nTask: Complete the following task to practice with Numpy:\n\n# TODO: Create a 2-dimensional matrix with filled with ones of size 1000 x 1000.\n# Afterward, flatten the matrix to a vector and loop over the vector.\n# In each loop iteration, add a random number between 1 and 10000.\n# TODO: Now, do the same with a list of the same size and fill it with random numbers.\n# Then, sort the list as you have done with the Numpy vector before.\n# You can use the `time` module to compare the runtime of both approaches.\nimport time\nstart = time.time()\n# Your code here\nend = time.time()\nprint(end - start) # time in seconds\n\n\n\n7.152557373046875e-06"
  },
  {
    "objectID": "lectures/lec_07_presentation.html#interesting-books",
    "href": "lectures/lec_07_presentation.html#interesting-books",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_07_scientific.html",
    "href": "lectures/lec_07_scientific.html",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "",
    "text": "Modules are .py files containing Python code\nThey are used to organize and reuse code\nThey can define functions, classes, and variables\nCan be imported into other scripts\n\n. . .\n\n\n\n\n\n\nWe can import entire modules or individual functions, classes or variables.\n\n\n\n\n\n\n\nPython includes many built-in modules like:\n\nrandom provides functions for random numbers\nos allows interaction with the operating system\ncsv is used for reading and writing CSV files\nre is used for working with regular expressions\n\n\n\n\n\n\nPackages are collections of modules\nOften available from the Python Package Index (PyPI)\nInstall using uv add &lt;package_name&gt;\nVirtual environments help manage dependencies\n\n. . .\n\n\n\n\n\n\nVirtual environments are not that important for you right now, as they are mostly used if you work on several projects with different dependecies at once.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#modules",
    "href": "lectures/lec_07_scientific.html#modules",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "",
    "text": "Modules are .py files containing Python code\nThey are used to organize and reuse code\nThey can define functions, classes, and variables\nCan be imported into other scripts\n\n. . .\n\n\n\n\n\n\nWe can import entire modules or individual functions, classes or variables.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#standard-libraries",
    "href": "lectures/lec_07_scientific.html#standard-libraries",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "",
    "text": "Python includes many built-in modules like:\n\nrandom provides functions for random numbers\nos allows interaction with the operating system\ncsv is used for reading and writing CSV files\nre is used for working with regular expressions",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#packages",
    "href": "lectures/lec_07_scientific.html#packages",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "",
    "text": "Packages are collections of modules\nOften available from the Python Package Index (PyPI)\nInstall using uv add &lt;package_name&gt;\nVirtual environments help manage dependencies\n\n. . .\n\n\n\n\n\n\nVirtual environments are not that important for you right now, as they are mostly used if you work on several projects with different dependecies at once.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#what-is-numpy",
    "href": "lectures/lec_07_scientific.html#what-is-numpy",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "What is NumPy?",
    "text": "What is NumPy?\n\nNumPy is a package for scientific computing in Python\nProvides large, multi-dimensional arrays and matrices\nWide range of functions to operate on these\nPython lists can be slow - Numpy arrays are much faster\n\n. . .\n\n\n\n\n\n\nThe name of the package comes from Numerical Python.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#why-is-numpy-so-fast",
    "href": "lectures/lec_07_scientific.html#why-is-numpy-so-fast",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Why is NumPy so fast?",
    "text": "Why is NumPy so fast?\n\nArrays are stored in a contiguous block of memory\nThis allows for efficient memory access patterns\nOperations are implemented in the languages C and C++\n\n. . .\nQuestion: Have you heard of C and C++?",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#how-to-get-started",
    "href": "lectures/lec_07_scientific.html#how-to-get-started",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "How to get started",
    "text": "How to get started\n\nInstall NumPy using uv add numpy\nImport NumPy in a script using import numpy as np\n\n. . .\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5]); type(x)\n\nnumpy.ndarray\n\n\n. . .\n\n\n\n\n\n\nYou don’t have to use as np. But it is a common practice to do so.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#creating-arrays",
    "href": "lectures/lec_07_scientific.html#creating-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nThe backbone of Numpy is the so called ndarray\nCan be initialized from different data structures:\n\n\nimport numpy as np\n\narray_from_list = np.array([1, 1, 1, 1])\nprint(array_from_list)\n\n[1 1 1 1]\n\n\n\nimport numpy as np\n\narray_from_tuple = np.array((2, 2, 2, 2))\nprint(array_from_tuple)\n\n[2 2 2 2]",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#hetergenous-data-types",
    "href": "lectures/lec_07_scientific.html#hetergenous-data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Hetergenous Data Types",
    "text": "Hetergenous Data Types\n\nIt is possible to store different data types in a ndarray\n\n\nimport numpy as np\n\narray_different_types = np.array([\"s\", 2, 2.0, \"i\"])\nprint(array_different_types)\n\n['s' '2' '2.0' 'i']\n\n\n. . .\n\n\n\n\n\n\nBut it is mostly not recommended, as it can lead to performance issues. If possible, try to keep the types homogenous.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#prefilled-arrays",
    "href": "lectures/lec_07_scientific.html#prefilled-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Prefilled Arrays",
    "text": "Prefilled Arrays\nImprove performance by allocating memory upfront\n\nnp.zeros(shape): to create an array of zeros\nnp.random.rand(shape): array of random values\nnp.arange(start, stop, step): evenly spaced\nnp.linspace(start, stop, num): evenly spaced\n\n. . .\n\n\n\n\n\n\nThe shape refers to the size of the array. It can have one or multiple dimensions.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#dimensions",
    "href": "lectures/lec_07_scientific.html#dimensions",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Dimensions",
    "text": "Dimensions\n\nThe shape is specified as tuple in these arrays\n(2) or 2 creates a 1-dimensional array (vetor)\n(2,2) creates a 2-dimensional array (matrix)\n(2,2,2) 3-dimensional array (3rd order tensor)\n(2,2,2,2) 4-dimensional array (4th order tensor)\n…",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#computations",
    "href": "lectures/lec_07_scientific.html#computations",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Computations",
    "text": "Computations\n\nWe can apply operations to the entire array at once\nThis is much faster than applying them element-wise\n\n. . .\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5])\nx + 1\n\narray([2, 3, 4, 5, 6])",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#arrays-in-action",
    "href": "lectures/lec_07_scientific.html#arrays-in-action",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Arrays in Action",
    "text": "Arrays in Action\nTask: Practice working with Numpy:\n\n# TODO: Create a 3-dimensional tensor with filled with zeros\n# Choose the shape of the tensor, but it should have 200 elements\n# Add the number 5 to all values of the tensor\n\n# Your code here\nassert sum(tensor) == 1000\n\n# TODO: Print the shape of the tensor using the method shape()\n# TODO: Print the dtype of the tensor using the method dtype()\n# TODO: Print the size of the tensor using the method size()",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#indexing-and-slicing",
    "href": "lectures/lec_07_scientific.html#indexing-and-slicing",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\n\nAccessing and slicing ndarray works as before\nHigher dimension element access with multiple indices\n\n. . .\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nx = np.random.randint(0, 10, size=(3, 3))\nprint(x); print(\"---\")\nprint(x[0:2,0:2])\n\n[[0 1 0]\n [2 7 1]\n [1 1 6]]\n---\n[[0 1]\n [2 7]]",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#data-types",
    "href": "lectures/lec_07_scientific.html#data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Data Types",
    "text": "Data Types\n\nNumpy provides data types as characters\ni: integer\nb: boolean\nf: float\nS: string\nU: unicode\n\n. . .\n\nstring_array = np.array([\"Hello\", \"World\"]); string_array.dtype\n\ndtype('&lt;U5')",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#enforcing-data-types",
    "href": "lectures/lec_07_scientific.html#enforcing-data-types",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Enforcing Data Types",
    "text": "Enforcing Data Types\n\nWe can also provide the type when creating arrays\n\n. . .\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f'); print(x.dtype)\n\nfloat32\n\n\n. . .\n\nOr we can change them for existing arrays\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f'); print(x.astype('i').dtype)\n\nint32\n\n\n. . .\n\n\n\n\n\n\nNote, how the types are specified as int32 and float32.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#sidenote-bits",
    "href": "lectures/lec_07_scientific.html#sidenote-bits",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Sidenote: Bits",
    "text": "Sidenote: Bits\nQuestion: Do you have an idea what 32 stands for?\n. . .\n\nIt’s the number of bits used to represent a number\n\nint16 is a 16-bit integer\nfloat32 is a 32-bit floating point number\nint64 is a 64-bit integer\nfloat128 is a 128-bit floating point number",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#why-do-bits-matter",
    "href": "lectures/lec_07_scientific.html#why-do-bits-matter",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Why do Bits Matter?",
    "text": "Why do Bits Matter?\n\nThey matter, because they can affect:\n\nthe performance of your code\nthe precision of your results\n\n\n. . .\n\nThat’s why numbers can have a limited precision!\n\nAn int8 has to be in the range of -128 to 127\nAn int16 has to be in the range of -32768 to 32767\n\n\n. . .\nQuestion: Size difference between int16 and int64?",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#joining-arrays",
    "href": "lectures/lec_07_scientific.html#joining-arrays",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Joining Arrays",
    "text": "Joining Arrays\n\nYou can use concatenate two join arrays\nWith axis you can specify the dimension\nIn 2-dimensions hstack() and vstack() are easier\n\n. . .\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nones = np.array((1,1,1,1))\ntwos = np.array((1,1,1,1)) *2\nprint(np.vstack((ones,twos))); print(np.hstack((ones,twos)))\n\n[[1 1 1 1]\n [2 2 2 2]]\n[1 1 1 1 2 2 2 2]",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#common-methods",
    "href": "lectures/lec_07_scientific.html#common-methods",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Common Methods",
    "text": "Common Methods\n\nsort(): sort the array from low to high\nreshape(): reshape the array into a new shape\nflatten(): flatten the array into a 1D array\nsqueeze(): squeeze the array to remove 1D entries\ntranspose(): transpose the array\n\n. . .\n\n\n\n\n\n\nTry experiment with these methods, they can make your work much easier.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#speed-differences-in-action",
    "href": "lectures/lec_07_scientific.html#speed-differences-in-action",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Speed Differences in Action",
    "text": "Speed Differences in Action\nTask: Complete the following task to practice with Numpy:\n\n# TODO: Create a 2-dimensional matrix with filled with ones of size 1000 x 1000.\n# Afterward, flatten the matrix to a vector and loop over the vector.\n# In each loop iteration, add a random number between 1 and 10000.\n# TODO: Now, do the same with a list of the same size and fill it with random numbers.\n# Then, sort the list as you have done with the Numpy vector before.\n# You can use the `time` module to compare the runtime of both approaches.\nimport time\nstart = time.time()\n# Your code here\nend = time.time()\nprint(end - start) # time in seconds\n\n7.152557373046875e-06",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_07_scientific.html#interesting-books",
    "href": "lectures/lec_07_scientific.html#interesting-books",
    "title": "Lecture VII - NumPy for Scientific Computing",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "07 Scientific Computing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_presentation.html#data-structures",
    "href": "lectures/lec_05_presentation.html#data-structures",
    "title": "Lecture V - Handling Errors",
    "section": "Data Structures",
    "text": "Data Structures\n\nNewly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#operations-and-methods",
    "href": "lectures/lec_05_presentation.html#operations-and-methods",
    "title": "Lecture V - Handling Errors",
    "section": "Operations and Methods",
    "text": "Operations and Methods\n\nEach data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n\n\n\n\n\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#io-and-file-handling",
    "href": "lectures/lec_05_presentation.html#io-and-file-handling",
    "title": "Lecture V - Handling Errors",
    "section": "I/O and File Handling",
    "text": "I/O and File Handling\n\nBasic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n\n\n\n\n\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#what-are-exceptions",
    "href": "lectures/lec_05_presentation.html#what-are-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Exceptions?",
    "text": "What are Exceptions?\n\nExceptions are discovered errors that occur during the execution\n\n\n\ndef divide_numbers(a, b):\n        result = a / b\n        return result\n\nprint(divide_numbers(10, 0))\nprint(\"I will not be printed as the program crashed before.\")\n\n\n\nZeroDivisionError: division by zero\n\n\n\n\n\n\n\n\nUndiscovered errors can be very hard to debug and can cause crashes and other issues."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#common-built-in-exceptions-i",
    "href": "lectures/lec_05_presentation.html#common-built-in-exceptions-i",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions I",
    "text": "Common Built-in Exceptions I\n\nValueError: argument of correct type but inappropriate value\nTypeError: function applied to object of inappropriate type\nNameError: raised when a local or global name is not found\nIndexError: raised when a sequence subscript is out of range\nKeyError: raised when a dictionary key is not found\nFileNotFoundError: file or directory not found\nZeroDivisionError: division or modulo by zero"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#common-built-in-exceptions-ii",
    "href": "lectures/lec_05_presentation.html#common-built-in-exceptions-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions II",
    "text": "Common Built-in Exceptions II\n\nAttributeError: attribute reference or assignment fails\nImportError: import of a modulefails\nSyntaxError: parser encounters a syntax error\nIndentationError: indentation is not correct\nRuntimeError: error does not fall into any category\n\n\n\n\n\n\n\n\nThe list of built-in exceptions is even longer, these are just the most common ones. We won’t cover the errors listed here in detail, but it is good to be aware of them."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#try-except-blocks",
    "href": "lectures/lec_05_presentation.html#try-except-blocks",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks",
    "text": "try-except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains the code that might raise an exception\nexcept block contains the executed code if an exception occurs\n\n\n\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(divide_numbers(10, 0))\nprint(\"I will be printed as the exception was handled!\")\n\n\n\nError: Division by zero is not allowed.\nI will be printed as the exception was handled!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#try-except-blocks-for-specific-exceptions",
    "href": "lectures/lec_05_presentation.html#try-except-blocks-for-specific-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks for specific exceptions",
    "text": "try-except Blocks for specific exceptions\n\nWe can also specify the type of exception we want to catch\nThis allows for more specific error handling\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the specific exception type\n    # ...\nexcept Exception as e:\n    # Code to handle any other exceptions\n    # ...\n\n\n\n\n\n\n\nas e is used to store the exception in a variable. Not mandatory, but good practice to do so."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#try-except-blocks-in-action",
    "href": "lectures/lec_05_presentation.html#try-except-blocks-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks in Action",
    "text": "try-except Blocks in Action\n&gt;Grouptask: Solve the following problem using try-except blocks:\n\n\n# Implement a function that converts a string to an integer\n# 1. Try to convert the input_string to an integer\n# 2. If successful, return the integer\n# 3. If a ValueError occurs, catch it and return \"Invalid input: not a number\"\n# 4. If any other exception occurs, catch it and return\n# \"An unexpected error occurred: [type of exception]\"\n\n# Your code here\n\n# Test cases\nprint(string_to_int(\"42\"))        # Should print: 42\nprint(string_to_int(\"Hello\"))     # Should print: Invalid\nprint(string_to_int([123]))\n\n\n\nQuestion: What is the output of the last line?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#raising-exceptions-1",
    "href": "lectures/lec_05_presentation.html#raising-exceptions-1",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions ourselves using the raise statement\nIt allows us to handle errors in a more controlled manner\n\n\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n&gt;Task: Try to raise an exception in the function above by passing a string to the validate_age function. What happens?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#raising-exceptions-with-custom-messages",
    "href": "lectures/lec_05_presentation.html#raising-exceptions-with-custom-messages",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions with Custom Messages",
    "text": "Raising Exceptions with Custom Messages\n\nWe can also raise exceptions with custom messages\nThis helps to provide more information about the error\n\n\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n\n\n&gt;Question: What do you think the raise statement will show now?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#creating-custom-exceptions",
    "href": "lectures/lec_05_presentation.html#creating-custom-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "Creating Custom Exceptions",
    "text": "Creating Custom Exceptions\n\nWe do so by inheriting from the built-in Exception class\nThis allows us to create more specific exceptions for our own code\n\n\nclass InvalidUsernameError(Exception):\n    pass\ndef get_valid_username():\n    while True:\n        try:\n            username = input(\"Please enter a username (no spaces): \")\n            if \" \" in username:\n                raise InvalidUsernameError(\"Username must not contain spaces.\")\n            return username\n        except InvalidUsernameError as e:\n            print(f\"Invalid username: {e}\")\n            print(\"Please try again.\")"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#what-are-assertions",
    "href": "lectures/lec_05_presentation.html#what-are-assertions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Assertions?",
    "text": "What are Assertions?\n\nAssertions are statements that check if a condition is true\nIf the condition is false, an AssertionError is raised\nWe could use them to check the results of a calculation\n\n\n\nx = 9\ny = 10\nassert x &lt; y, \"x is not smaller than y\"\nassert isinstance(y, float), \"y is not a float\"\n\n\n\n&gt;Task: Try to run the code above and discuss what happens.\n\n\n\n\n\n\n\n\nisinstance is a built-in function that checks if an object is an instance of a class."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#assertions-in-action",
    "href": "lectures/lec_05_presentation.html#assertions-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "Assertions in Action",
    "text": "Assertions in Action\n&gt;Grouptask: Solve the following problem using assertions:\n\n# Implement a function that takes a list of integers and returns the sum of the numbers.\n# 1. Use assertions to check if the input is a list\n# 2. Use assertions to check if the list contains only integers.\n# 3. If the list contains only integers, return the sum of the numbers\n\n# Your code here\n\n# Test cases\nprint(sum_of_numbers([1, 2, 3, 4, 5])) # Should print: 15\nprint(sum_of_numbers([1, 2.0, 3, 4, 5])) # Should print: AssertionError"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#what-is-debugging",
    "href": "lectures/lec_05_presentation.html#what-is-debugging",
    "title": "Lecture V - Handling Errors",
    "section": "What is Debugging?",
    "text": "What is Debugging?\n\nDebugging is the process of finding and fixing errors in code\nWe can use print and assert statements to debug our code\nWe can also use debugging tools that are built into most IDEs"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#using-print-and-assert",
    "href": "lectures/lec_05_presentation.html#using-print-and-assert",
    "title": "Lecture V - Handling Errors",
    "section": "Using Print and Assert",
    "text": "Using Print and Assert\n\nprint: check the values of variables at different points\nassert: check calculations or the types of variables\n\n\n\nx = \"Hello\" # x is a string\nprint(x)\nx = 42.0 # x is a float\nprint(x)\nassert isinstance(x, float), \"x is not a float\"\nassert x == 42.0, \"x is not 42.0\"\n\n\n\nHello\n42.0\n\n\n\n\n\n\n\n\n\n\nWhile this can be useful, it is not always the best way to debug code."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#using-debugging-tools",
    "href": "lectures/lec_05_presentation.html#using-debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Using Debugging Tools",
    "text": "Using Debugging Tools\n\nWe can also use debugging tools built into most IDEs\nAllow to step through code, set breakpoints, and inspect variables\nWe will use Zed, but there are many other options"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#debugging-in-zed",
    "href": "lectures/lec_05_presentation.html#debugging-in-zed",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Zed",
    "text": "Debugging in Zed\n&gt;Task: Open Zed and copy the following code to main.py.\n\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n    return average\n\n# Test cases\ntest_lists = [\n    [1, 2, 3, 4, 5],\n    [10, 20, 30],\n    []\n    ]\n\nfor i, test_list in enumerate(test_lists):\n    print(f\"Test case {i + 1}:\")\n    result = calculate_average(test_list)\n    print(f\"Average: {result}\\n\")"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#debugging-tools",
    "href": "lectures/lec_05_presentation.html#debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging Tools",
    "text": "Debugging Tools\n&gt;Task: Run the code and use the debugging tools by clicking on the small bug icon in the lower right corner to find the error and select run [YOUR PATH TO THE FILE]/main.py.\n\nUse the breakpoints to pause the execution at a specific point\nUse step over, step into and step out to navigate through your code\nUse the variable viewer to inspect variables at different points\n\n\n&gt;Question: What do you think the error is?\n\n\n\n\n\n\n\n\nThe enumerate function used in the code is super helpful function that returns a tuple containing the index and the value of the item in the list and it is not the error."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#using-logging",
    "href": "lectures/lec_05_presentation.html#using-logging",
    "title": "Lecture V - Handling Errors",
    "section": "Using Logging",
    "text": "Using Logging\n\nWe can also use logging to track the execution of a program\nIt is a structured way to log errors and other issues\nYou can specify the level of severity for each log message\nHide messages of a certain severity if you want to during execution\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of errors, exceptions and debugging in Python. Logging is beyond our scope, but it is good to know should you work with larger codebases later on."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#interesting-books",
    "href": "lectures/lec_05_presentation.html#interesting-books",
    "title": "Lecture V - Handling Errors",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_05_errors.html",
    "href": "lectures/lec_05_errors.html",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Newly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n. . .\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)\n\n\n\n\n\nEach data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n. . .\n\n\n\n\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones.\n\n\n\n\n\n\n\nBasic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n. . .\n\n\n\n\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#data-structures",
    "href": "lectures/lec_05_errors.html#data-structures",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Newly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n. . .\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#operations-and-methods",
    "href": "lectures/lec_05_errors.html#operations-and-methods",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Each data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n. . .\n\n\n\n\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#io-and-file-handling",
    "href": "lectures/lec_05_errors.html#io-and-file-handling",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Basic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n. . .\n\n\n\n\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#what-are-exceptions",
    "href": "lectures/lec_05_errors.html#what-are-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Exceptions?",
    "text": "What are Exceptions?\n\nExceptions are discovered errors that occur during the execution\n\n. . .\n\ndef divide_numbers(a, b):\n        result = a / b\n        return result\n\nprint(divide_numbers(10, 0))\nprint(\"I will not be printed as the program crashed before.\")\n\n. . .\nZeroDivisionError: division by zero\n. . .\n\n\n\n\n\n\nUndiscovered errors can be very hard to debug and can cause crashes and other issues.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#common-built-in-exceptions-i",
    "href": "lectures/lec_05_errors.html#common-built-in-exceptions-i",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions I",
    "text": "Common Built-in Exceptions I\n\nValueError: argument of correct type but inappropriate value\nTypeError: function applied to object of inappropriate type\nNameError: raised when a local or global name is not found\nIndexError: raised when a sequence subscript is out of range\nKeyError: raised when a dictionary key is not found\nFileNotFoundError: file or directory not found\nZeroDivisionError: division or modulo by zero",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#common-built-in-exceptions-ii",
    "href": "lectures/lec_05_errors.html#common-built-in-exceptions-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions II",
    "text": "Common Built-in Exceptions II\n\nAttributeError: attribute reference or assignment fails\nImportError: import of a modulefails\nSyntaxError: parser encounters a syntax error\nIndentationError: indentation is not correct\nRuntimeError: error does not fall into any category\n\n. . .\n\n\n\n\n\n\nThe list of built-in exceptions is even longer, these are just the most common ones. We won’t cover the errors listed here in detail, but it is good to be aware of them.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#try-except-blocks",
    "href": "lectures/lec_05_errors.html#try-except-blocks",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks",
    "text": "try-except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains the code that might raise an exception\nexcept block contains the executed code if an exception occurs\n\n. . .\n\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(divide_numbers(10, 0))\nprint(\"I will be printed as the exception was handled!\")\n\nError: Division by zero is not allowed.\nI will be printed as the exception was handled!",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#try-except-blocks-for-specific-exceptions",
    "href": "lectures/lec_05_errors.html#try-except-blocks-for-specific-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks for specific exceptions",
    "text": "try-except Blocks for specific exceptions\n\nWe can also specify the type of exception we want to catch\nThis allows for more specific error handling\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the specific exception type\n    # ...\nexcept Exception as e:\n    # Code to handle any other exceptions\n    # ...\n. . .\n\n\n\n\n\n\nas e is used to store the exception in a variable. Not mandatory, but good practice to do so.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#try-except-blocks-in-action",
    "href": "lectures/lec_05_errors.html#try-except-blocks-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks in Action",
    "text": "try-except Blocks in Action\n&gt;Grouptask: Solve the following problem using try-except blocks:\n. . .\n\n# Implement a function that converts a string to an integer\n# 1. Try to convert the input_string to an integer\n# 2. If successful, return the integer\n# 3. If a ValueError occurs, catch it and return \"Invalid input: not a number\"\n# 4. If any other exception occurs, catch it and return\n# \"An unexpected error occurred: [type of exception]\"\n\n# Your code here\n\n# Test cases\nprint(string_to_int(\"42\"))        # Should print: 42\nprint(string_to_int(\"Hello\"))     # Should print: Invalid\nprint(string_to_int([123]))\n\n. . .\nQuestion: What is the output of the last line?",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#raising-exceptions-1",
    "href": "lectures/lec_05_errors.html#raising-exceptions-1",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions ourselves using the raise statement\nIt allows us to handle errors in a more controlled manner\n\n. . .\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n&gt;Task: Try to raise an exception in the function above by passing a string to the validate_age function. What happens?",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#raising-exceptions-with-custom-messages",
    "href": "lectures/lec_05_errors.html#raising-exceptions-with-custom-messages",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions with Custom Messages",
    "text": "Raising Exceptions with Custom Messages\n\nWe can also raise exceptions with custom messages\nThis helps to provide more information about the error\n\n. . .\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n. . .\n&gt;Question: What do you think the raise statement will show now?",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#creating-custom-exceptions",
    "href": "lectures/lec_05_errors.html#creating-custom-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "Creating Custom Exceptions",
    "text": "Creating Custom Exceptions\n\nWe do so by inheriting from the built-in Exception class\nThis allows us to create more specific exceptions for our own code\n\n\nclass InvalidUsernameError(Exception):\n    pass\ndef get_valid_username():\n    while True:\n        try:\n            username = input(\"Please enter a username (no spaces): \")\n            if \" \" in username:\n                raise InvalidUsernameError(\"Username must not contain spaces.\")\n            return username\n        except InvalidUsernameError as e:\n            print(f\"Invalid username: {e}\")\n            print(\"Please try again.\")",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#what-are-assertions",
    "href": "lectures/lec_05_errors.html#what-are-assertions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Assertions?",
    "text": "What are Assertions?\n\nAssertions are statements that check if a condition is true\nIf the condition is false, an AssertionError is raised\nWe could use them to check the results of a calculation\n\n. . .\n\nx = 9\ny = 10\nassert x &lt; y, \"x is not smaller than y\"\nassert isinstance(y, float), \"y is not a float\"\n\n. . .\n&gt;Task: Try to run the code above and discuss what happens.\n. . .\n\n\n\n\n\n\nisinstance is a built-in function that checks if an object is an instance of a class.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#assertions-in-action",
    "href": "lectures/lec_05_errors.html#assertions-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "Assertions in Action",
    "text": "Assertions in Action\n&gt;Grouptask: Solve the following problem using assertions:\n\n# Implement a function that takes a list of integers and returns the sum of the numbers.\n# 1. Use assertions to check if the input is a list\n# 2. Use assertions to check if the list contains only integers.\n# 3. If the list contains only integers, return the sum of the numbers\n\n# Your code here\n\n# Test cases\nprint(sum_of_numbers([1, 2, 3, 4, 5])) # Should print: 15\nprint(sum_of_numbers([1, 2.0, 3, 4, 5])) # Should print: AssertionError",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#what-is-debugging",
    "href": "lectures/lec_05_errors.html#what-is-debugging",
    "title": "Lecture V - Handling Errors",
    "section": "What is Debugging?",
    "text": "What is Debugging?\n\nDebugging is the process of finding and fixing errors in code\nWe can use print and assert statements to debug our code\nWe can also use debugging tools that are built into most IDEs",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#using-print-and-assert",
    "href": "lectures/lec_05_errors.html#using-print-and-assert",
    "title": "Lecture V - Handling Errors",
    "section": "Using Print and Assert",
    "text": "Using Print and Assert\n\nprint: check the values of variables at different points\nassert: check calculations or the types of variables\n\n. . .\n\nx = \"Hello\" # x is a string\nprint(x)\nx = 42.0 # x is a float\nprint(x)\nassert isinstance(x, float), \"x is not a float\"\nassert x == 42.0, \"x is not 42.0\"\n\nHello\n42.0\n\n\n. . .\n\n\n\n\n\n\nWhile this can be useful, it is not always the best way to debug code.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#using-debugging-tools",
    "href": "lectures/lec_05_errors.html#using-debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Using Debugging Tools",
    "text": "Using Debugging Tools\n\nWe can also use debugging tools built into most IDEs\nAllow to step through code, set breakpoints, and inspect variables\nWe will use Zed, but there are many other options",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#debugging-in-zed",
    "href": "lectures/lec_05_errors.html#debugging-in-zed",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Zed",
    "text": "Debugging in Zed\n&gt;Task: Open Zed and copy the following code to main.py.\n\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n    return average\n\n# Test cases\ntest_lists = [\n    [1, 2, 3, 4, 5],\n    [10, 20, 30],\n    []\n    ]\n\nfor i, test_list in enumerate(test_lists):\n    print(f\"Test case {i + 1}:\")\n    result = calculate_average(test_list)\n    print(f\"Average: {result}\\n\")",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#debugging-tools",
    "href": "lectures/lec_05_errors.html#debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging Tools",
    "text": "Debugging Tools\n&gt;Task: Run the code and use the debugging tools by clicking on the small bug icon in the lower right corner to find the error and select run [YOUR PATH TO THE FILE]/main.py.\n\nUse the breakpoints to pause the execution at a specific point\nUse step over, step into and step out to navigate through your code\nUse the variable viewer to inspect variables at different points\n\n. . .\n&gt;Question: What do you think the error is?\n. . .\n\n\n\n\n\n\nThe enumerate function used in the code is super helpful function that returns a tuple containing the index and the value of the item in the list and it is not the error.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#using-logging",
    "href": "lectures/lec_05_errors.html#using-logging",
    "title": "Lecture V - Handling Errors",
    "section": "Using Logging",
    "text": "Using Logging\n\nWe can also use logging to track the execution of a program\nIt is a structured way to log errors and other issues\nYou can specify the level of severity for each log message\nHide messages of a certain severity if you want to during execution\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of errors, exceptions and debugging in Python. Logging is beyond our scope, but it is good to know should you work with larger codebases later on.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_errors.html#interesting-books",
    "href": "lectures/lec_05_errors.html#interesting-books",
    "title": "Lecture V - Handling Errors",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "05 Errors",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_presentation.html#slicing",
    "href": "lectures/lec_03_presentation.html#slicing",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Slicing",
    "text": "Slicing\n\nWith slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n\n\n\n\n\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#comparison-operators",
    "href": "lectures/lec_03_presentation.html#comparison-operators",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\n\n\nTrue"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#control-structures",
    "href": "lectures/lec_03_presentation.html#control-structures",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Control Structures",
    "text": "Control Structures\n\nControl structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n\n\n\n\n\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#what-is-a-function",
    "href": "lectures/lec_03_presentation.html#what-is-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "What is a Function?",
    "text": "What is a Function?\n\nFunctions can accept inputs (parameters) and return outputs\nEncapsulate logic, making code easier to maintain\nFunctions can be called multiple times from different part\nThey help reduce code duplication and improve readability\n\n\n# I'm a function.\ntype(print)\n\n\n\nbuiltin_function_or_method\n\n\n\n\n\n\n\n\n\nRemember, methods are functions that are called on an object."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#some-built-in-functions-already-used",
    "href": "lectures/lec_03_presentation.html#some-built-in-functions-already-used",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Some Built-in Functions already used",
    "text": "Some Built-in Functions already used\n\nprint(): Print text to console\ninput(): Read text from console\nlen(): Get the length of a sequence\nrange(): Generate a sequence of numbers\nround(): Round a number to a specified number of decimal places\ntype(): Get the type of an object\nint(): Convert a string to an integer\nfloat(): Convert a string to a floating-point number\nstr(): Convert an object to a string"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#defining-a-function",
    "href": "lectures/lec_03_presentation.html#defining-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Defining a Function",
    "text": "Defining a Function\n\nUse the def keyword followed by the function name\nInside parentheses we list the inputs (parameters)\nThe code block within every function starts with a colon (:)\nIt is indented, just as the loops from the last lecture\n\n\n\ndef greet(a_parameter):\n    print(f\"Hello, {a_parameter}!\")\ngreet(\"Students\")\n\n\n\nHello, Students!\n\n\n\n\n\n\n\n\n\n\nIt is common practice to leave out one line after the definition of a function, although we will not always do that in the lecture to save space on the slides."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#comment-functions",
    "href": "lectures/lec_03_presentation.html#comment-functions",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comment Functions",
    "text": "Comment Functions\n\nIt is good practice to include a comment at the top of your functions\nIf you do it with three \"\"\", it will appear in the help menu\n\n\n\ndef greet():\n    \"\"\"\n    This function will be used later and has currently\n    absolutely no use for anything.\n    \"\"\"\n    pass # Necessary placeholder to avoid error\n\nhelp(greet)\n\n\n\nHelp on function greet in module __main__:\n\ngreet()\n    This function will be used later and has currently\n    absolutely no use for anything."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#naming-functions-and-methods",
    "href": "lectures/lec_03_presentation.html#naming-functions-and-methods",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Functions (and Methods)",
    "text": "Naming Functions (and Methods)\n\nFunction names should be short, but descriptive\nUse underscores (_) instead of spaces in the names\nAvoid using Python keywords as function names (e.g., print)\nTry to avoid using built-in functions and methods that have a similar name (e.g., sum and len)\n\n&gt; Question: Which of the following is a good name for a function?\n\n\nmyfunctionthatmultipliesvalues\n\nmultiply_two_values\n\nmultiplyTwoValues"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#function-parameters",
    "href": "lectures/lec_03_presentation.html#function-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Parameters",
    "text": "Function Parameters\n\nParameters are variables that the function accepts\nThey allow you to pass data to the function\nTry to name them as variables: short and meaningful\nWe can also leave them out or define several inputs!\n\n\ndef greet():\n    print(\"Hello, stranger!\")\ngreet()\n\n\n\nHello, stranger!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#function-arguments",
    "href": "lectures/lec_03_presentation.html#function-arguments",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Arguments",
    "text": "Function Arguments\n\nArguments are the actual values passed to the function\nThey replace the parameters in the function definition\n\n\n&gt; Question: What could be the correct arguments here?\n\ndef greet(university_name, lecture):\n    print(f\"Hello, students at the {university_name}!\")\n    print(f\"You are in lecture {lecture}!\")\n\n# Your code here"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#initializing-parameters",
    "href": "lectures/lec_03_presentation.html#initializing-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Initializing Parameters",
    "text": "Initializing Parameters\n\nWe can also initialize parameters to a default value!\nTo do this we use the = sign and provide it with a value\nThis is called a keyword argument\n\n\ndef greet(lecture=\"Programming with Python\"):\n    print(f\"You are in lecture '{lecture}'!\")\n\ngreet()\ngreet(\"Super Advanced Programming with Python\")\n\n\n\nYou are in lecture 'Programming with Python'!\nYou are in lecture 'Super Advanced Programming with Python'!\n\n\n\n\n\n\n\n\n\nThis is especially useful when we want to avoid errors due to missing arguments!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#multiple-parameters",
    "href": "lectures/lec_03_presentation.html#multiple-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nWe can also have multiple parameters in a function definition\nThey are called positional arguments and are separated by commas\nWhen we call them, they must be provided in the same order\nAlternatively, we could call them by name, as for example in this function call print(\"h\",\"i\",sep='')\n\n\n&gt; Question: What will be printed here?\n\ndef call_parameters(parameter_a, parameter_b):\n    print(parameter_a, parameter_b)\n\ncall_parameters(parameter_b=\"Hello\", parameter_a=\"World\")\n\n\n\nWorld Hello"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#function-return-values",
    "href": "lectures/lec_03_presentation.html#function-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Return Values",
    "text": "Function Return Values\n\nFunctions can return values using the return statement\nThe return statement ends the function\nIt then returns the specified value\n\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n    return result\nprint(simple_multiplication(2,21))\n\n\n\n42\n\n\n\n\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\nprint(simple_multiplication(2,21))\n\n\n\n42"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#access-return-values",
    "href": "lectures/lec_03_presentation.html#access-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Access return values",
    "text": "Access return values\n\nWe can also save the return value from a function in a variable\nThat way we can use it later on in the program\n\n\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\n\nresult = simple_multiplication(2,21)\nprint(result)\n\n\n\n42"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#returning-none",
    "href": "lectures/lec_03_presentation.html#returning-none",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Returning None",
    "text": "Returning None\n\nIf we don’t specify return, functions will return None\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n\nprint(simple_multiplication(2,21))\n\n\n\nNone\n\n\n\n&gt; Task: Come up with a function that checks whether a number is positive or negative. It returns \"positive\" for positive numbers and \"negative\" for negative numbers. If the number is zero, it returns None.\n\n\n\n\n\n\n\n\nYou can also use multiple return statements in a function."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#recursion",
    "href": "lectures/lec_03_presentation.html#recursion",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Recursion",
    "text": "Recursion\n\nRecursion is a technique where a function calls itself\nHelps to break down problems into smaller problems\n\n\n\ndef fibonacci(n): # Classical example to introduce recursion\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\nRecursion can be a powerful tool, but it can also be quite tricky to get right."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#function-scope",
    "href": "lectures/lec_03_presentation.html#function-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Scope",
    "text": "Function Scope\n\nVariables defined inside a function are local to that function\nThey cannot be accessed outside the function\n\n\ndef greet(name):\n    greeting = f\"Hello, {name}!\"\n\nprint(greeting)  # This will cause an error\n\n\n&gt; Question: Any idea how to access greeting?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#global-scope",
    "href": "lectures/lec_03_presentation.html#global-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Scope",
    "text": "Global Scope\n\nVariables defined outside all functions are in the global scope\nThey can be accessed from anywhere in the program\n\n\n\ngreeting = \"Hello, Stranger!\"\ndef greet(name):\n   greeting = f\"Hello, {name}!\"\n   return greeting\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet ????\n\n\n\nHello, Students!\nHello, Stranger!\n\n\n\n\n\n\n\n\n\n\nWe don’t change global variables inside a function! The original value can still be accessed from outside the function."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#global-keyword",
    "href": "lectures/lec_03_presentation.html#global-keyword",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Keyword",
    "text": "Global Keyword\n\nStill, we can change the value of greeting from inside a function!\nBy using the global keyword to modify a global variable\n\n\n\ngreeting = \"Hello, Stranger!\"\n\ndef greet(name):\n   global greeting\n   greeting = f\"Hello, {name}!\"\n   return greeting\n\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet students again\n\n\n\nHello, Students!\nHello, Students!\n\n\n\n\n&gt;Question: This can be confusing. Do you think you got the idea?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#classes-1",
    "href": "lectures/lec_03_presentation.html#classes-1",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nObjects are instances of classes\nMethods are functions that are defined within a class\n\n\n\nclass Students: # Class definition\n    def know_answer(self): # Method definition\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students() # Object instantiation\nstudent.know_answer()\n\n\n\nThey know the answer to all questions."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#self",
    "href": "lectures/lec_03_presentation.html#self",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Self",
    "text": "Self\n\nClasses can be quite tricky at first, especially the self keyword\nWhen we call self in a method, it refers to the object itself\nIt is used to access the attributes and methods of the class\nself always needs to be included in method definitions\n\n\n\n# This won't work as self is missing\nclass Students: # Class definition\n    def know_answer(): # Method definition without self\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students()\nstudent.know_answer()\n\n\n\n&gt;Task: Try it yourself, what is the error?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#naming-classes",
    "href": "lectures/lec_03_presentation.html#naming-classes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Classes",
    "text": "Naming Classes\n\nClasses can be named anything, but it is common to use the plural form of their name (e.g., People)\nCamelCase is used for class names, and snake_case is used for method and attribute names (e.g., TallPeople)\nClasses are usually defined in a file with the same name as their class, but with a .py extension\n\n\nQuestion: Which of the following is a good class name? smart_student, SmartStudent, or SmartStudents"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#class-attributes",
    "href": "lectures/lec_03_presentation.html#class-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Class Attributes",
    "text": "Class Attributes\n\nClass attributes are attributes that are shared by all class instances\nThey are defined within the class but outside any methods\n\n\n&gt;Question: What do you think will happen here?\n\nclass Students: # Class definition\n    smart = True # Class attribute\n\nstudent_A = Students() # Object instantiation student_A\nstudent_B = Students() # Object instantiation student_B\n\nprint(student_A.smart)\nprint(student_B.smart)\n\n\n\nTrue\nTrue"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#instance-attributes",
    "href": "lectures/lec_03_presentation.html#instance-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Instance Attributes",
    "text": "Instance Attributes\n\nInstance attributes are attributes unique to each class instance\nThey are defined within the __init__ method\n\n\nclass Student: # Class definition\n    def __init__(self, name, is_smart): # Method for initalization\n        self.name = name\n        self.smart = is_smart\n    def knows_answer(self): # Method to be called\n        if self.smart:\n            print(f\"{self.name} knows the answer to the question.\")\n        else:\n            print(f\"{self.name} does not know the answer to the question.\")\n\nstudent = Student(\"Buddy\",False) # Note, we don't need to call self here!\nstudent.knows_answer()\n\n\n\nBuddy does not know the answer to the question."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#inheritance",
    "href": "lectures/lec_03_presentation.html#inheritance",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance",
    "text": "Inheritance\n\nInheritance allows a class to inherit attributes and methods\nThe class that inherits is called the subclass\nThe class that is being inherited from is called the superclass\n\n\n\n\n\n\n\n\nDon’t worry!  It can be quite much right now. Hang in there and soon it will get easier again!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#inheritance-in-action",
    "href": "lectures/lec_03_presentation.html#inheritance-in-action",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance in Action",
    "text": "Inheritance in Action\n\nclass Student: # Superclass\n    def __init__(self, name):\n        self.name = name\n    def when_asked(self):\n        pass\n\nclass SmartStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} knows the answer!\"\n\nclass LazyStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} has to ask ChatGPT!\"\n\n&gt;Task: Create two students. One is smart and the other one is lazy. Make sure that both students reaction to a question is printed."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#encapsulation",
    "href": "lectures/lec_03_presentation.html#encapsulation",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nEncapsulation is the concept of bundling data (attributes) and methods (behavior) that operate on the data into a single unit (class)\nIt is a key aspect of object oriented programming (OOP)\nIt helps in organizing code and controlling access\n\n\n\n\n\n\n\n\nFortunately, this is an introduction to Python, so we won’t go into details of encapsulation."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#the-end",
    "href": "lectures/lec_03_presentation.html#the-end",
    "title": "Lecture III - Building Reusable Functions",
    "section": "The End",
    "text": "The End\n\nInterested in more detail about classes and OOP?\nCheck out access modifiers, getters and setters\nThey are definitely a bit more complicated for beginners…\nThough they are worth learning if you build complex programs\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of funtions and classes. We will continue with some slightly easier topics in the next lectures."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#interesting-book-to-dive-deeper",
    "href": "lectures/lec_03_presentation.html#interesting-book-to-dive-deeper",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Interesting Book to dive deeper",
    "text": "Interesting Book to dive deeper\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\n\n\n\n\n\n\n\nA fantastic textbook to understand the principles of modern software development and how to create effective software. Also available as a really good audiobook!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_03_functions.html",
    "href": "lectures/lec_03_functions.html",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "With slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n. . .\n\n\n\n\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence.\n\n\n\n\n\n\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n. . .\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\nTrue\n\n\n\n\n\n\nControl structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n. . .\n\n\n\n\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#slicing",
    "href": "lectures/lec_03_functions.html#slicing",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "With slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n. . .\n\n\n\n\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#comparison-operators",
    "href": "lectures/lec_03_functions.html#comparison-operators",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "Comparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n. . .\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\nTrue",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#control-structures",
    "href": "lectures/lec_03_functions.html#control-structures",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "Control structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n. . .\n\n\n\n\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#what-is-a-function",
    "href": "lectures/lec_03_functions.html#what-is-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "What is a Function?",
    "text": "What is a Function?\n\nFunctions can accept inputs (parameters) and return outputs\nEncapsulate logic, making code easier to maintain\nFunctions can be called multiple times from different part\nThey help reduce code duplication and improve readability\n\n\n# I'm a function.\ntype(print)\n\nbuiltin_function_or_method\n\n\n. . .\n\n\n\n\n\n\nRemember, methods are functions that are called on an object.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#some-built-in-functions-already-used",
    "href": "lectures/lec_03_functions.html#some-built-in-functions-already-used",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Some Built-in Functions already used",
    "text": "Some Built-in Functions already used\n\nprint(): Print text to console\ninput(): Read text from console\nlen(): Get the length of a sequence\nrange(): Generate a sequence of numbers\nround(): Round a number to a specified number of decimal places\ntype(): Get the type of an object\nint(): Convert a string to an integer\nfloat(): Convert a string to a floating-point number\nstr(): Convert an object to a string",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#defining-a-function",
    "href": "lectures/lec_03_functions.html#defining-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Defining a Function",
    "text": "Defining a Function\n\nUse the def keyword followed by the function name\nInside parentheses we list the inputs (parameters)\nThe code block within every function starts with a colon (:)\nIt is indented, just as the loops from the last lecture\n\n. . .\n\ndef greet(a_parameter):\n    print(f\"Hello, {a_parameter}!\")\ngreet(\"Students\")\n\nHello, Students!\n\n\n. . .\n\n\n\n\n\n\nIt is common practice to leave out one line after the definition of a function, although we will not always do that in the lecture to save space on the slides.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#comment-functions",
    "href": "lectures/lec_03_functions.html#comment-functions",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comment Functions",
    "text": "Comment Functions\n\nIt is good practice to include a comment at the top of your functions\nIf you do it with three \"\"\", it will appear in the help menu\n\n. . .\n\ndef greet():\n    \"\"\"\n    This function will be used later and has currently\n    absolutely no use for anything.\n    \"\"\"\n    pass # Necessary placeholder to avoid error\n\nhelp(greet)\n\nHelp on function greet in module __main__:\n\ngreet()\n    This function will be used later and has currently\n    absolutely no use for anything.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#naming-functions-and-methods",
    "href": "lectures/lec_03_functions.html#naming-functions-and-methods",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Functions (and Methods)",
    "text": "Naming Functions (and Methods)\n\nFunction names should be short, but descriptive\nUse underscores (_) instead of spaces in the names\nAvoid using Python keywords as function names (e.g., print)\nTry to avoid using built-in functions and methods that have a similar name (e.g., sum and len)\n\n&gt; Question: Which of the following is a good name for a function?\n\n\nmyfunctionthatmultipliesvalues\n\nmultiply_two_values\n\nmultiplyTwoValues",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#function-parameters",
    "href": "lectures/lec_03_functions.html#function-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Parameters",
    "text": "Function Parameters\n\nParameters are variables that the function accepts\nThey allow you to pass data to the function\nTry to name them as variables: short and meaningful\nWe can also leave them out or define several inputs!\n\n\ndef greet():\n    print(\"Hello, stranger!\")\ngreet()\n\nHello, stranger!",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#function-arguments",
    "href": "lectures/lec_03_functions.html#function-arguments",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Arguments",
    "text": "Function Arguments\n\nArguments are the actual values passed to the function\nThey replace the parameters in the function definition\n\n. . .\n&gt; Question: What could be the correct arguments here?\n\ndef greet(university_name, lecture):\n    print(f\"Hello, students at the {university_name}!\")\n    print(f\"You are in lecture {lecture}!\")\n\n# Your code here",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#initializing-parameters",
    "href": "lectures/lec_03_functions.html#initializing-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Initializing Parameters",
    "text": "Initializing Parameters\n\nWe can also initialize parameters to a default value!\nTo do this we use the = sign and provide it with a value\nThis is called a keyword argument\n\n\ndef greet(lecture=\"Programming with Python\"):\n    print(f\"You are in lecture '{lecture}'!\")\n\ngreet()\ngreet(\"Super Advanced Programming with Python\")\n\nYou are in lecture 'Programming with Python'!\nYou are in lecture 'Super Advanced Programming with Python'!\n\n\n. . .\n\n\n\n\n\n\nThis is especially useful when we want to avoid errors due to missing arguments!",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#multiple-parameters",
    "href": "lectures/lec_03_functions.html#multiple-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nWe can also have multiple parameters in a function definition\nThey are called positional arguments and are separated by commas\nWhen we call them, they must be provided in the same order\nAlternatively, we could call them by name, as for example in this function call print(\"h\",\"i\",sep='')\n\n. . .\n&gt; Question: What will be printed here?\n\ndef call_parameters(parameter_a, parameter_b):\n    print(parameter_a, parameter_b)\n\ncall_parameters(parameter_b=\"Hello\", parameter_a=\"World\")\n\nWorld Hello",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#function-return-values",
    "href": "lectures/lec_03_functions.html#function-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Return Values",
    "text": "Function Return Values\n\nFunctions can return values using the return statement\nThe return statement ends the function\nIt then returns the specified value\n\n. . .\n\ndef simple_multiplication(a,b):\n    result = a*b\n    return result\nprint(simple_multiplication(2,21))\n\n42\n\n\n. . .\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\nprint(simple_multiplication(2,21))\n\n42",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#access-return-values",
    "href": "lectures/lec_03_functions.html#access-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Access return values",
    "text": "Access return values\n\nWe can also save the return value from a function in a variable\nThat way we can use it later on in the program\n\n. . .\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\n\nresult = simple_multiplication(2,21)\nprint(result)\n\n42",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#returning-none",
    "href": "lectures/lec_03_functions.html#returning-none",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Returning None",
    "text": "Returning None\n\nIf we don’t specify return, functions will return None\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n\nprint(simple_multiplication(2,21))\n\nNone\n\n\n. . .\n&gt; Task: Come up with a function that checks whether a number is positive or negative. It returns \"positive\" for positive numbers and \"negative\" for negative numbers. If the number is zero, it returns None.\n. . .\n\n\n\n\n\n\nYou can also use multiple return statements in a function.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#recursion",
    "href": "lectures/lec_03_functions.html#recursion",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Recursion",
    "text": "Recursion\n\nRecursion is a technique where a function calls itself\nHelps to break down problems into smaller problems\n\n. . .\n\ndef fibonacci(n): # Classical example to introduce recursion\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n8\n\n\n. . .\n\n\n\n\n\n\nRecursion can be a powerful tool, but it can also be quite tricky to get right.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#function-scope",
    "href": "lectures/lec_03_functions.html#function-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Scope",
    "text": "Function Scope\n\nVariables defined inside a function are local to that function\nThey cannot be accessed outside the function\n\n. . .\ndef greet(name):\n    greeting = f\"Hello, {name}!\"\n\nprint(greeting)  # This will cause an error\n. . .\n&gt; Question: Any idea how to access greeting?",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#global-scope",
    "href": "lectures/lec_03_functions.html#global-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Scope",
    "text": "Global Scope\n\nVariables defined outside all functions are in the global scope\nThey can be accessed from anywhere in the program\n\n. . .\n\ngreeting = \"Hello, Stranger!\"\ndef greet(name):\n   greeting = f\"Hello, {name}!\"\n   return greeting\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet ????\n\nHello, Students!\nHello, Stranger!\n\n\n. . .\n\n\n\n\n\n\nWe don’t change global variables inside a function! The original value can still be accessed from outside the function.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#global-keyword",
    "href": "lectures/lec_03_functions.html#global-keyword",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Keyword",
    "text": "Global Keyword\n\nStill, we can change the value of greeting from inside a function!\nBy using the global keyword to modify a global variable\n\n. . .\n\ngreeting = \"Hello, Stranger!\"\n\ndef greet(name):\n   global greeting\n   greeting = f\"Hello, {name}!\"\n   return greeting\n\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet students again\n\nHello, Students!\nHello, Students!\n\n\n. . .\n&gt;Question: This can be confusing. Do you think you got the idea?",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#classes-1",
    "href": "lectures/lec_03_functions.html#classes-1",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nObjects are instances of classes\nMethods are functions that are defined within a class\n\n. . .\n\nclass Students: # Class definition\n    def know_answer(self): # Method definition\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students() # Object instantiation\nstudent.know_answer()\n\nThey know the answer to all questions.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#self",
    "href": "lectures/lec_03_functions.html#self",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Self",
    "text": "Self\n\nClasses can be quite tricky at first, especially the self keyword\nWhen we call self in a method, it refers to the object itself\nIt is used to access the attributes and methods of the class\nself always needs to be included in method definitions\n\n. . .\n\n# This won't work as self is missing\nclass Students: # Class definition\n    def know_answer(): # Method definition without self\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students()\nstudent.know_answer()\n\n. . .\n&gt;Task: Try it yourself, what is the error?",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#naming-classes",
    "href": "lectures/lec_03_functions.html#naming-classes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Classes",
    "text": "Naming Classes\n\nClasses can be named anything, but it is common to use the plural form of their name (e.g., People)\nCamelCase is used for class names, and snake_case is used for method and attribute names (e.g., TallPeople)\nClasses are usually defined in a file with the same name as their class, but with a .py extension\n\n. . .\nQuestion: Which of the following is a good class name? smart_student, SmartStudent, or SmartStudents",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#class-attributes",
    "href": "lectures/lec_03_functions.html#class-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Class Attributes",
    "text": "Class Attributes\n\nClass attributes are attributes that are shared by all class instances\nThey are defined within the class but outside any methods\n\n. . .\n&gt;Question: What do you think will happen here?\n\nclass Students: # Class definition\n    smart = True # Class attribute\n\nstudent_A = Students() # Object instantiation student_A\nstudent_B = Students() # Object instantiation student_B\n\nprint(student_A.smart)\nprint(student_B.smart)\n\nTrue\nTrue",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#instance-attributes",
    "href": "lectures/lec_03_functions.html#instance-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Instance Attributes",
    "text": "Instance Attributes\n\nInstance attributes are attributes unique to each class instance\nThey are defined within the __init__ method\n\n\nclass Student: # Class definition\n    def __init__(self, name, is_smart): # Method for initalization\n        self.name = name\n        self.smart = is_smart\n    def knows_answer(self): # Method to be called\n        if self.smart:\n            print(f\"{self.name} knows the answer to the question.\")\n        else:\n            print(f\"{self.name} does not know the answer to the question.\")\n\nstudent = Student(\"Buddy\",False) # Note, we don't need to call self here!\nstudent.knows_answer()\n\nBuddy does not know the answer to the question.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#inheritance",
    "href": "lectures/lec_03_functions.html#inheritance",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance",
    "text": "Inheritance\n\nInheritance allows a class to inherit attributes and methods\nThe class that inherits is called the subclass\nThe class that is being inherited from is called the superclass\n\n. . .\n\n\n\n\n\n\nDon’t worry!  It can be quite much right now. Hang in there and soon it will get easier again!",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#inheritance-in-action",
    "href": "lectures/lec_03_functions.html#inheritance-in-action",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance in Action",
    "text": "Inheritance in Action\n\nclass Student: # Superclass\n    def __init__(self, name):\n        self.name = name\n    def when_asked(self):\n        pass\n\nclass SmartStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} knows the answer!\"\n\nclass LazyStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} has to ask ChatGPT!\"\n\n&gt;Task: Create two students. One is smart and the other one is lazy. Make sure that both students reaction to a question is printed.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#encapsulation",
    "href": "lectures/lec_03_functions.html#encapsulation",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nEncapsulation is the concept of bundling data (attributes) and methods (behavior) that operate on the data into a single unit (class)\nIt is a key aspect of object oriented programming (OOP)\nIt helps in organizing code and controlling access\n\n. . .\n\n\n\n\n\n\nFortunately, this is an introduction to Python, so we won’t go into details of encapsulation.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#the-end",
    "href": "lectures/lec_03_functions.html#the-end",
    "title": "Lecture III - Building Reusable Functions",
    "section": "The End",
    "text": "The End\n\nInterested in more detail about classes and OOP?\nCheck out access modifiers, getters and setters\nThey are definitely a bit more complicated for beginners…\nThough they are worth learning if you build complex programs\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of funtions and classes. We will continue with some slightly easier topics in the next lectures.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_functions.html#interesting-book-to-dive-deeper",
    "href": "lectures/lec_03_functions.html#interesting-book-to-dive-deeper",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Interesting Book to dive deeper",
    "text": "Interesting Book to dive deeper\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\n. . .\n\n\n\n\n\n\nA fantastic textbook to understand the principles of modern software development and how to create effective software. Also available as a really good audiobook!\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "03 Functions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_presentation.html#about-me",
    "href": "lectures/lec_01_presentation.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-outline",
    "href": "lectures/lec_01_presentation.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#participation",
    "href": "lectures/lec_01_presentation.html#participation",
    "title": "Lecture I - Introduction",
    "section": "Participation",
    "text": "Participation\n\nPrequisite for course Management Science (taught by me)\nTry actively participating in this course\nYou will find it much (!) easier to follow later\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#teaching",
    "href": "lectures/lec_01_presentation.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#passing-the-course",
    "href": "lectures/lec_01_presentation.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve\nYou can group up (3 students) and work together\nEach student group submits one solution"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#solution",
    "href": "lectures/lec_01_presentation.html#solution",
    "title": "Lecture I - Introduction",
    "section": "Solution",
    "text": "Solution\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n\n\n\n\n\n\n\nI’d encourage you to start and submit your solution early"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#difficulty-of-the-course",
    "href": "lectures/lec_01_presentation.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn words\nLater, you’ll be able to apply it and see results\nSimilar to learning a language: Practice, practice, practice!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-to-expect",
    "href": "lectures/lec_01_presentation.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "What to expect",
    "text": "What to expect\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completion, you will be able to read code\nand write your own program using Python\nThat’s quite something!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#goals-of-the-course",
    "href": "lectures/lec_01_presentation.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#python-as-language",
    "href": "lectures/lec_01_presentation.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "Python as Language",
    "text": "Python as Language\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#how-to-use-ai",
    "href": "lectures/lec_01_presentation.html#how-to-use-ai",
    "title": "Lecture I - Introduction",
    "section": "How to use AI",
    "text": "How to use AI\n\nWe base our assessment on the KLU classification:\n\nLevel 1: Pause: Use of AI defined by the educator\n\nYou are allowed to use AI (Claude, ChatGPT, Mistral …)\nUse them to support understanding\nA course chatbot is available on the learning website\nIt is designed to guide your problem-solving process\n\n\n\n\n\n\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#how-to-use-the-chatbot",
    "href": "lectures/lec_01_presentation.html#how-to-use-the-chatbot",
    "title": "Lecture I - Introduction",
    "section": "How to use the Chatbot",
    "text": "How to use the Chatbot\n\nJust click the chatbot bubble on the website\nThe chat will open an you can ask your questions\nIt is programmed by us and uses Mistral AI as backend\nAsk your question as specific as possible\nThis ensures enough context for the model\nWe can see aggregated logs, but cannot identify you\nPlease don’t provide personal information"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#analytics",
    "href": "lectures/lec_01_presentation.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#research",
    "href": "lectures/lec_01_presentation.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#visualization",
    "href": "lectures/lec_01_presentation.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#finance",
    "href": "lectures/lec_01_presentation.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#logistics",
    "href": "lectures/lec_01_presentation.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#my-recommendation",
    "href": "lectures/lec_01_presentation.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google, modify, and solve problems on your own\n\n\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#dont-give-up",
    "href": "lectures/lec_01_presentation.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#learning-path",
    "href": "lectures/lec_01_presentation.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated, read the following helpful blog post about the challenges on medium.com\nIn case you find errors or typos, please report them via e-mail to me"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#installing-an-ide",
    "href": "lectures/lec_01_presentation.html#installing-an-ide",
    "title": "Lecture I - Introduction",
    "section": "Installing an IDE",
    "text": "Installing an IDE\n\nIn this course, we will use Zed as our IDE\nDownload and install it from https://zed.dev/\nIt is available for Windows, Mac and Linux\nIt is free to use, lightweight and fast\nHas AI support built-in, which we will use later"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-is-an-ide",
    "href": "lectures/lec_01_presentation.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nVisual Studio Code from Microsoft"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#installing-python-with-uv",
    "href": "lectures/lec_01_presentation.html#installing-python-with-uv",
    "title": "Lecture I - Introduction",
    "section": "Installing Python with uv",
    "text": "Installing Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#python-on-ipads",
    "href": "lectures/lec_01_presentation.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, you could use Pythonista\nIt works locally on your iPad and can run most scripts\n\n\n\n\n\n\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#hello-my-name-is",
    "href": "lectures/lec_01_presentation.html#hello-my-name-is",
    "title": "Lecture I - Introduction",
    "section": "Hello, my name is …!",
    "text": "Hello, my name is …!\nTask: Open the directory you created for the course and create a new file called hello.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, my name is [YOUR NAME HERE]!\")\n\n\n\nHello, my name is [YOUR NAME HERE]!\n\n\n\nRun it by executing the following command in your terminal:\nuv run python hello.py"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#hello-world-in-a-message",
    "href": "lectures/lec_01_presentation.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nTask: Create a new file called message_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n\n\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nHello, World!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#hello-world-in-parentheses",
    "href": "lectures/lec_01_presentation.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string, if we are consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\n\n\nI shout \"Hello, World!\"\n\n\n\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n\n\n\nTry it yourself! What does happen, if you try to run it?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#first-errors",
    "href": "lectures/lec_01_presentation.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nLikely the most common error that you will encounter!\nHappens when you make a mistake, e.g., illegal character, missing a colon, parentheses or quotations\nYou can fix this by correcting the code and re-running\nIn the lecture you will encounter many more errors!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-is-a-program",
    "href": "lectures/lec_01_presentation.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nSequence of instructions telling a computer what to do\nWritten in a language the computer can understand\nBasic operations in most languages:\n\nInput: Data from keyboard, file, network, sensors, etc.\nOutput: Display data, save it, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#key-concepts",
    "href": "lectures/lec_01_presentation.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check and execute accordingly\nLoops: Perform actions repeatedly\nFunctions: Group instructions for reusability\n\n\n\n\n\n\n\n\n\nWe will cover these concepts in more detail later in the course."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#how-python-executes-code",
    "href": "lectures/lec_01_presentation.html#how-python-executes-code",
    "title": "Lecture I - Introduction",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#hello-again-world",
    "href": "lectures/lec_01_presentation.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nComment: In the first line we define a comment with #\nVariable: In the second we define a variable message\nFunction: In the third line we call a function print"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#dont-worry",
    "href": "lectures/lec_01_presentation.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused? Don’t worry about it for now!\nWe’ll learn more about variables and functions later"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-zen-of-python",
    "href": "lectures/lec_01_presentation.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python\nCollection of 19 statements with general principles\n\n\nTask: Try this code in Python:\n\n# Try this code in Python to see the Zen of Python\nimport this"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#variables",
    "href": "lectures/lec_01_presentation.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\n\n\nTime\n\n\n\nBut there are certain rules to variable names!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#variable-naming-conventions",
    "href": "lectures/lec_01_presentation.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#functions",
    "href": "lectures/lec_01_presentation.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\n\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\n\n\nWe will cover functions in more detail later in the course."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-are-values-and-types",
    "href": "lectures/lec_01_presentation.html#what-are-values-and-types",
    "title": "Lecture I - Introduction",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nTakes one argument and returns its type as string"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#strings",
    "href": "lectures/lec_01_presentation.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\n\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n\n\nResult: “Hello, World” is a string - in short ‘str’.\n\n\nBut what about the f”?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#formated-strings",
    "href": "lectures/lec_01_presentation.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions, e.g., variables, in braces\nEvaluated at run time and inserted into the string\n\n\n\n\n\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\n\n\nHello, World! is a &lt;class 'str'&gt;"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#specifying-formatted-strings",
    "href": "lectures/lec_01_presentation.html#specifying-formatted-strings",
    "title": "Lecture I - Introduction",
    "section": "Specifying Formatted Strings",
    "text": "Specifying Formatted Strings\n\nWe can further specify their format with {&lt;to_print&gt;:&lt;width&gt;.&lt;precision&gt;f}\nwidth can be a number specifying the output width\n&lt;, ^, &gt; can be used before the width to align the text\nprecision can be used to specify the decimals\n.f can be used to format floats\n\n\nx = \"hello\"\nprint(f\"{x:&lt;10} has {len(x):&gt;10.2f} characters.\")\n\n\n\nhello      has       5.00 characters."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#expressions",
    "href": "lectures/lec_01_presentation.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Great, the result is {y}\")\n\n\n\nGreat, the result is 3"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#a-step-back-what-is-a-string",
    "href": "lectures/lec_01_presentation.html#a-step-back-what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "A step back: What is a String?",
    "text": "A step back: What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\nStrings are immutable, we can’t change characters in them once created."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#string-operations",
    "href": "lectures/lec_01_presentation.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\n\nBut we can also do much more with strings!\nString concatenation, indexing, slicing, length, etc.\n\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\n\n\nHello, World!\n\n\n\n\nprint(two_strings[0]) # Indexing starts at zero!\n\n\n\nH\n\n\n\n\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n\n\n13\n\n\n\n\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n\n\n--x----x----x--"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#booleans",
    "href": "lectures/lec_01_presentation.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\n\n&gt; More on them in our next lecture!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#integers-and-floats",
    "href": "lectures/lec_01_presentation.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: -4.78, 0.1 or 1.23e2\nBit size is not specified (e.g.: 64 bits) in Python!\n\n\n\nx = 1; y = 1.2864e2 # We can separate multiple operations in one line with semicolons\nprint(f\"{x} is of type {type(x)}, {y} is of type {type(y)}\")\n\n\n\n1 is of type &lt;class 'int'&gt;, 128.64 is of type &lt;class 'float'&gt;\n\n\n\n\n\n\n\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#arithmetic-operators",
    "href": "lectures/lec_01_presentation.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\n\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#precedence",
    "href": "lectures/lec_01_presentation.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nOperators are the same as in most other languages\nCan be combined with each other and variables\nNormal rules of precedence apply\n\n\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n\n\n2 + 3 * 4 = 14\n\n\n\n\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n\n\n(2 + 3) * 4 = 20"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-input-function",
    "href": "lectures/lec_01_presentation.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nThe function always returns the input as string!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#input-in-action",
    "href": "lectures/lec_01_presentation.html#input-in-action",
    "title": "Lecture I - Introduction",
    "section": "Input in Action",
    "text": "Input in Action\nTask: Solve the following task:\n\n# TODO: Ask the user for their age and print a compliment\n\n\nSolution\n\nage = int(input(\"How old are you? \"))\nprint(f\"You look great for {age}!\")"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#type-conversion",
    "href": "lectures/lec_01_presentation.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\nString: str(input())\n\n\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-round-function",
    "href": "lectures/lec_01_presentation.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n\n\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#questions",
    "href": "lectures/lec_01_presentation.html#questions",
    "title": "Lecture I - Introduction",
    "section": "Questions?",
    "text": "Questions?\n\n\n\n\n\n\n\nThat’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#interesting-books-to-start",
    "href": "lectures/lec_01_presentation.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_01_introduction.html",
    "href": "lectures/lec_01_introduction.html",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects\n\n\n\n\n\nPrequisite for course Management Science (taught by me)\nTry actively participating in this course\nYou will find it much (!) easier to follow later\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python\n\n\n\n\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier\n\n\n\n\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve\nYou can group up (3 students) and work together\nEach student group submits one solution\n\n\n\n\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nI’d encourage you to start and submit your solution early\n\n\n\n\n\n\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn words\nLater, you’ll be able to apply it and see results\nSimilar to learning a language: Practice, practice, practice!\n\n\n\n\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completion, you will be able to read code\nand write your own program using Python\nThat’s quite something!\n\n\n\n\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#about-me",
    "href": "lectures/lec_01_introduction.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-outline",
    "href": "lectures/lec_01_introduction.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Part I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#participation",
    "href": "lectures/lec_01_introduction.html#participation",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Prequisite for course Management Science (taught by me)\nTry actively participating in this course\nYou will find it much (!) easier to follow later\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#teaching",
    "href": "lectures/lec_01_introduction.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Lecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#passing-the-course",
    "href": "lectures/lec_01_introduction.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Pass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve\nYou can group up (3 students) and work together\nEach student group submits one solution",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#solution",
    "href": "lectures/lec_01_introduction.html#solution",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Provide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nI’d encourage you to start and submit your solution early",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#difficulty-of-the-course",
    "href": "lectures/lec_01_introduction.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "We’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn words\nLater, you’ll be able to apply it and see results\nSimilar to learning a language: Practice, practice, practice!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-to-expect",
    "href": "lectures/lec_01_introduction.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Some investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completion, you will be able to read code\nand write your own program using Python\nThat’s quite something!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#goals-of-the-course",
    "href": "lectures/lec_01_introduction.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Essential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#python-as-language",
    "href": "lectures/lec_01_introduction.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#how-to-use-ai",
    "href": "lectures/lec_01_introduction.html#how-to-use-ai",
    "title": "Lecture I - Introduction",
    "section": "How to use AI",
    "text": "How to use AI\n\nWe base our assessment on the KLU classification:\n\nLevel 1: Pause: Use of AI defined by the educator\n\nYou are allowed to use AI (Claude, ChatGPT, Mistral …)\nUse them to support understanding\nA course chatbot is available on the learning website\nIt is designed to guide your problem-solving process\n\n. . .\n\n\n\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#how-to-use-the-chatbot",
    "href": "lectures/lec_01_introduction.html#how-to-use-the-chatbot",
    "title": "Lecture I - Introduction",
    "section": "How to use the Chatbot",
    "text": "How to use the Chatbot\n\nJust click the chatbot bubble on the website\nThe chat will open an you can ask your questions\nIt is programmed by us and uses Mistral AI as backend\nAsk your question as specific as possible\nThis ensures enough context for the model\nWe can see aggregated logs, but cannot identify you\nPlease don’t provide personal information",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#analytics",
    "href": "lectures/lec_01_introduction.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#research",
    "href": "lectures/lec_01_introduction.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#visualization",
    "href": "lectures/lec_01_introduction.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#finance",
    "href": "lectures/lec_01_introduction.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#logistics",
    "href": "lectures/lec_01_introduction.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#my-recommendation",
    "href": "lectures/lec_01_introduction.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google, modify, and solve problems on your own\n\n. . .\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#dont-give-up",
    "href": "lectures/lec_01_introduction.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#learning-path",
    "href": "lectures/lec_01_introduction.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated, read the following helpful blog post about the challenges on medium.com\nIn case you find errors or typos, please report them via e-mail to me",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#installing-an-ide",
    "href": "lectures/lec_01_introduction.html#installing-an-ide",
    "title": "Lecture I - Introduction",
    "section": "Installing an IDE",
    "text": "Installing an IDE\n\nIn this course, we will use Zed as our IDE\nDownload and install it from https://zed.dev/\nIt is available for Windows, Mac and Linux\nIt is free to use, lightweight and fast\nHas AI support built-in, which we will use later",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-is-an-ide",
    "href": "lectures/lec_01_introduction.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nVisual Studio Code from Microsoft",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#installing-python-with-uv",
    "href": "lectures/lec_01_introduction.html#installing-python-with-uv",
    "title": "Lecture I - Introduction",
    "section": "Installing Python with uv",
    "text": "Installing Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#python-on-ipads",
    "href": "lectures/lec_01_introduction.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, you could use Pythonista\nIt works locally on your iPad and can run most scripts\n\n. . .\n\n\n\n\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#hello-my-name-is",
    "href": "lectures/lec_01_introduction.html#hello-my-name-is",
    "title": "Lecture I - Introduction",
    "section": "Hello, my name is …!",
    "text": "Hello, my name is …!\nTask: Open the directory you created for the course and create a new file called hello.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, my name is [YOUR NAME HERE]!\")\n\nHello, my name is [YOUR NAME HERE]!\n\n\n. . .\nRun it by executing the following command in your terminal:\nuv run python hello.py\n. . .",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#hello-world-in-a-message",
    "href": "lectures/lec_01_introduction.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nTask: Create a new file called message_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n. . .\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n. . .\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#hello-world-in-parentheses",
    "href": "lectures/lec_01_introduction.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string, if we are consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\nI shout \"Hello, World!\"\n\n\n. . .\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n. . .\n\nTry it yourself! What does happen, if you try to run it?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#first-errors",
    "href": "lectures/lec_01_introduction.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nLikely the most common error that you will encounter!\nHappens when you make a mistake, e.g., illegal character, missing a colon, parentheses or quotations\nYou can fix this by correcting the code and re-running\nIn the lecture you will encounter many more errors!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-is-a-program",
    "href": "lectures/lec_01_introduction.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nSequence of instructions telling a computer what to do\nWritten in a language the computer can understand\nBasic operations in most languages:\n\nInput: Data from keyboard, file, network, sensors, etc.\nOutput: Display data, save it, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#key-concepts",
    "href": "lectures/lec_01_introduction.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check and execute accordingly\nLoops: Perform actions repeatedly\nFunctions: Group instructions for reusability\n\n\n. . .\n\n\n\n\n\n\nWe will cover these concepts in more detail later in the course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#how-python-executes-code",
    "href": "lectures/lec_01_introduction.html#how-python-executes-code",
    "title": "Lecture I - Introduction",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#hello-again-world",
    "href": "lectures/lec_01_introduction.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n. . .\n\nComment: In the first line we define a comment with #\nVariable: In the second we define a variable message\nFunction: In the third line we call a function print",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#dont-worry",
    "href": "lectures/lec_01_introduction.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused? Don’t worry about it for now!\nWe’ll learn more about variables and functions later",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#the-zen-of-python",
    "href": "lectures/lec_01_introduction.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python\nCollection of 19 statements with general principles\n\n. . .\nTask: Try this code in Python:\n\n# Try this code in Python to see the Zen of Python\nimport this",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#variables",
    "href": "lectures/lec_01_introduction.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\nTime\n\n\n. . .\nBut there are certain rules to variable names!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#variable-naming-conventions",
    "href": "lectures/lec_01_introduction.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n. . .\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#functions",
    "href": "lectures/lec_01_introduction.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n. . .\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\nHello, World!\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nWe will cover functions in more detail later in the course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-are-values-and-types",
    "href": "lectures/lec_01_introduction.html#what-are-values-and-types",
    "title": "Lecture I - Introduction",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nTakes one argument and returns its type as string",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#strings",
    "href": "lectures/lec_01_introduction.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n. . .\n\nResult: “Hello, World” is a string - in short ‘str’.\n. . .\nBut what about the f”?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#formated-strings",
    "href": "lectures/lec_01_introduction.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions, e.g., variables, in braces\nEvaluated at run time and inserted into the string\n\n. . .\n\n\n\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\n. . .\n\nprint(\"{} is a {}\".format(message, message_type))\n\nHello, World! is a &lt;class 'str'&gt;",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#specifying-formatted-strings",
    "href": "lectures/lec_01_introduction.html#specifying-formatted-strings",
    "title": "Lecture I - Introduction",
    "section": "Specifying Formatted Strings",
    "text": "Specifying Formatted Strings\n\nWe can further specify their format with {&lt;to_print&gt;:&lt;width&gt;.&lt;precision&gt;f}\nwidth can be a number specifying the output width\n&lt;, ^, &gt; can be used before the width to align the text\nprecision can be used to specify the decimals\n.f can be used to format floats\n\n\nx = \"hello\"\nprint(f\"{x:&lt;10} has {len(x):&gt;10.2f} characters.\")\n\nhello      has       5.00 characters.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#expressions",
    "href": "lectures/lec_01_introduction.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Great, the result is {y}\")\n\nGreat, the result is 3",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#a-step-back-what-is-a-string",
    "href": "lectures/lec_01_introduction.html#a-step-back-what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "A step back: What is a String?",
    "text": "A step back: What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nStrings are immutable, we can’t change characters in them once created.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#string-operations",
    "href": "lectures/lec_01_introduction.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\n\nBut we can also do much more with strings!\nString concatenation, indexing, slicing, length, etc.\n\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\nHello, World!\n\n\n. . .\n\nprint(two_strings[0]) # Indexing starts at zero!\n\nH\n\n\n. . .\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n13\n\n\n. . .\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n--x----x----x--",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#booleans",
    "href": "lectures/lec_01_introduction.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n. . .\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\nTrue\n&lt;class 'bool'&gt;\n\n\n. . .\n&gt; More on them in our next lecture!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#integers-and-floats",
    "href": "lectures/lec_01_introduction.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: -4.78, 0.1 or 1.23e2\nBit size is not specified (e.g.: 64 bits) in Python!\n\n. . .\n\nx = 1; y = 1.2864e2 # We can separate multiple operations in one line with semicolons\nprint(f\"{x} is of type {type(x)}, {y} is of type {type(y)}\")\n\n1 is of type &lt;class 'int'&gt;, 128.64 is of type &lt;class 'float'&gt;\n\n\n. . .\n\n\n\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#arithmetic-operators",
    "href": "lectures/lec_01_introduction.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#precedence",
    "href": "lectures/lec_01_introduction.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nOperators are the same as in most other languages\nCan be combined with each other and variables\nNormal rules of precedence apply\n\n. . .\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n2 + 3 * 4 = 14\n\n\n. . .\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n(2 + 3) * 4 = 20",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#the-input-function",
    "href": "lectures/lec_01_introduction.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n. . .\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nThe function always returns the input as string!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#input-in-action",
    "href": "lectures/lec_01_introduction.html#input-in-action",
    "title": "Lecture I - Introduction",
    "section": "Input in Action",
    "text": "Input in Action\nTask: Solve the following task:\n\n# TODO: Ask the user for their age and print a compliment\n\n. . .\nSolution\n\nage = int(input(\"How old are you? \"))\nprint(f\"You look great for {age}!\")",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#type-conversion",
    "href": "lectures/lec_01_introduction.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\nString: str(input())\n\n. . .\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#the-round-function",
    "href": "lectures/lec_01_introduction.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#questions",
    "href": "lectures/lec_01_introduction.html#questions",
    "title": "Lecture I - Introduction",
    "section": "Questions?",
    "text": "Questions?\n. . .\n\n\n\n\n\n\nThat’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#interesting-books-to-start",
    "href": "lectures/lec_01_introduction.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nString methods, comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope, classes\nHandling Data in more than one Dimension (IV)\nTuples, lists, sets, dictionaries, and basic I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, debugging",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-programming-with-python",
    "href": "general/syllabus.html#introduction-to-programming-with-python",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nString methods, comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope, classes\nHandling Data in more than one Dimension (IV)\nTuples, lists, sets, dictionaries, and basic I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, debugging",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#data-science-with-python",
    "href": "general/syllabus.html#data-science-with-python",
    "title": "Syllabus",
    "section": "Data Science with Python",
    "text": "Data Science with Python\nIn the second part, we will cover basic data science tools in Python referring to data manipulation, descriptive and explorative analysis as well as visualization. At the end, an outlook will be provided on the next steps in Python.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nUsing Modules and Packages (VI)\nStandard libraries, random numbers and how to use them\nNumPy for Scientific Computing (VII)\nFast array operations with NumPy\nPandas and AI (VIII)\nPandas for data manipulation and AI\nPlotting Data (IX)\nMatplotlib with AI based on hand-on examples",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#programming-projects",
    "href": "general/syllabus.html#programming-projects",
    "title": "Syllabus",
    "section": "Programming Projects",
    "text": "Programming Projects\nIn the third part, students will be assigned mini projects in Python where they can apply their new knowledge in groups on a project of their choice. Each group will present their results and get feedback at the end of the semester.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nYour first Project I (X)\nChoose your project that ties together concepts from the course\nYour first Project II (XI)\nProgress your group-project under assistance\nYour first Project III (XII)\nFinalize your group-project with your team\nPresentations and Discussion (XIII)\nPresent your group’s work and the learnings you have made",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of Python programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nZed\n\nA young and lightweight code editor that is very fast and lightweight with built-in collaboration and AI features.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/cheatsheet.html",
    "href": "general/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Python is an interpreted language - code is executed line by line\nComments start with #\nCode blocks are defined by indentation\n\n\n\n\n\nCreated using assignment operator =\nMust start with letter or underscore\nCase sensitive\nCannot use reserved words\n\n\n\n\n\nStrings (str)\n\nEnclosed in quotes: \"Hello\" or 'Hello'\nF-strings: f\"Value is {variable}\"\nFormat: f\"{variable:&lt;width&gt;.&lt;precision&gt;f}\"\n\nNumbers\n\nIntegers (int): 1, -3, 0\nFloats: -4.78, 0.1, 1.23e2\n\nBooleans (bool)\n\nTrue or False\n\n\n\n\n\n# Arithmetic\naddition = 1 + 2 # 3\nsubtraction = 1 - 2 # -1\nmultiplication = 3 * 4 # 12\ndivision = 7 / 4 # 1.75\nfloor_division = 7 // 4 # 1\nexponentiation = 9 ** 0.5 # 3.0\nmodulo = 10 % 3 # 1\n\n\n\n# Input/Output\nprint(\"Hello\")                    # Display output\nname = input(\"Enter name: \")      # Get user input\n\n# Type Conversion\nint_val = int(\"123\")             # String to integer\nfloat_val = float(\"12.34\")       # String to float\nstr_val = str(123)               # Number to string\n\n# Other\nround(3.14159, 2)                # Round to 2 decimals\nlen(\"Hello\")                     # Get length\ntype(variable)                   # Get type of variable\n\n\n\n\nUse meaningful variable names\nAdd comments to explain complex code\nFollow Python’s naming conventions\nUse f-strings for string formatting\nBe consistent with quote usage (\" or ')",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#python-basics",
    "href": "general/cheatsheet.html#python-basics",
    "title": "Cheatsheet",
    "section": "",
    "text": "Python is an interpreted language - code is executed line by line\nComments start with #\nCode blocks are defined by indentation",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#variables",
    "href": "general/cheatsheet.html#variables",
    "title": "Cheatsheet",
    "section": "",
    "text": "Created using assignment operator =\nMust start with letter or underscore\nCase sensitive\nCannot use reserved words",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#data-types",
    "href": "general/cheatsheet.html#data-types",
    "title": "Cheatsheet",
    "section": "",
    "text": "Strings (str)\n\nEnclosed in quotes: \"Hello\" or 'Hello'\nF-strings: f\"Value is {variable}\"\nFormat: f\"{variable:&lt;width&gt;.&lt;precision&gt;f}\"\n\nNumbers\n\nIntegers (int): 1, -3, 0\nFloats: -4.78, 0.1, 1.23e2\n\nBooleans (bool)\n\nTrue or False",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#basic-operators",
    "href": "general/cheatsheet.html#basic-operators",
    "title": "Cheatsheet",
    "section": "",
    "text": "# Arithmetic\naddition = 1 + 2 # 3\nsubtraction = 1 - 2 # -1\nmultiplication = 3 * 4 # 12\ndivision = 7 / 4 # 1.75\nfloor_division = 7 // 4 # 1\nexponentiation = 9 ** 0.5 # 3.0\nmodulo = 10 % 3 # 1",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#common-functions",
    "href": "general/cheatsheet.html#common-functions",
    "title": "Cheatsheet",
    "section": "",
    "text": "# Input/Output\nprint(\"Hello\")                    # Display output\nname = input(\"Enter name: \")      # Get user input\n\n# Type Conversion\nint_val = int(\"123\")             # String to integer\nfloat_val = float(\"12.34\")       # String to float\nstr_val = str(123)               # Number to string\n\n# Other\nround(3.14159, 2)                # Round to 2 decimals\nlen(\"Hello\")                     # Get length\ntype(variable)                   # Get type of variable",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices",
    "href": "general/cheatsheet.html#best-practices",
    "title": "Cheatsheet",
    "section": "",
    "text": "Use meaningful variable names\nAdd comments to explain complex code\nFollow Python’s naming conventions\nUse f-strings for string formatting\nBe consistent with quote usage (\" or ')",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#string-methods",
    "href": "general/cheatsheet.html#string-methods",
    "title": "Cheatsheet",
    "section": "String Methods",
    "text": "String Methods\ntext = \"Hello, World!\"\ntext.upper()      # Convert to uppercase: \"HELLO, WORLD!\"\ntext.lower()      # Convert to lowercase: \"hello, world!\"\ntext.title()      # Title case: \"Hello, World!\"\ntext.strip()      # Remove leading/trailing whitespace\ntext.replace(\"Hello\", \"Hi\")  # Replace text: \"Hi, World!\"\ntext.find(\"World\")          # Find substring index: 7\ntext.count(\"l\")            # Count occurrences: 3",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#indexing-and-slicing",
    "href": "general/cheatsheet.html#indexing-and-slicing",
    "title": "Cheatsheet",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\ntext = \"Hello, World!\"\ntext[0]      # First character: \"H\"\ntext[-1]     # Last character: \"!\"\ntext[7:12]   # Slice: \"World\"\ntext[::2]    # Every second character: \"Hlo ol!\"\ntext[::-1]   # Reverse string: \"!dlroW ,olleH\"",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#comparison-operators",
    "href": "general/cheatsheet.html#comparison-operators",
    "title": "Cheatsheet",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n== Equal to\n!= Not equal to\n&lt; Less than\n&gt; Greater than\n&lt;= Less than or equal to\n&gt;= Greater than or equal to",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#logical-operators",
    "href": "general/cheatsheet.html#logical-operators",
    "title": "Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n# and: Both conditions must be True\nx &gt; 0 and x &lt; 10    # True if x is between 0 and 10\n\n# or: At least one condition must be True\nx &lt; 0 or x &gt; 10     # True if x is outside 0-10\n\n# not: Inverts the condition\nnot x == 10         # True if x is not 10",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#membership-operators",
    "href": "general/cheatsheet.html#membership-operators",
    "title": "Cheatsheet",
    "section": "Membership Operators",
    "text": "Membership Operators\n\"a\" in \"apple\"          # True\n\"z\" not in \"apple\"      # True",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#control-structures",
    "href": "general/cheatsheet.html#control-structures",
    "title": "Cheatsheet",
    "section": "Control Structures",
    "text": "Control Structures\n\nIf Statements\nif condition:\n    # code if condition is True\nelif other_condition:\n    # code if other_condition is True\nelse:\n    # code if all conditions are False\n\n\nFor Loops\n# Loop with range\nfor i in range(5):          # 0 to 4\n    print(i)\n\n# Loop with range and step\nfor i in range(0, 10, 2):   # 0, 2, 4, 6, 8\n    print(i)\n\n# Loop through string\nfor char in \"Hello\":\n    print(char)\n\n\nWhile Loops\n# Basic while loop\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n# While loop with break\nwhile True:\n    if condition:\n        break    # Exit loop",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-1",
    "href": "general/cheatsheet.html#best-practices-1",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse clear and descriptive variable names\nMaintain consistent indentation (4 spaces)\nUse comments to explain complex logic\nAvoid infinite loops\nKeep code blocks focused and manageable",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#functions",
    "href": "general/cheatsheet.html#functions",
    "title": "Cheatsheet",
    "section": "Functions",
    "text": "Functions\n\nBasic Function Syntax\ndef function_name(parameter1, parameter2):\n    \"\"\"Docstring explaining what the function does\"\"\"\n    # Function body\n    return result\n\n\nFunction Parameters\n# No parameters\ndef greet():\n    print(\"Hello!\")\n\n# Multiple parameters\ndef greet(name, age):\n    print(f\"Hello {name}, you are {age} years old\")\n\n# Default parameters\ndef greet(name=\"Stranger\"):\n    print(f\"Hello {name}\")\n\n# Keyword arguments\ngreet(name=\"Alice\")  # Calling with named parameter\n\n\nReturn Values\n# Return single value\ndef multiply(a, b):\n    return a * b\n\n# Return None (implicit)\ndef greet(name):\n    print(f\"Hello {name}\")\n    # No return statement = returns None\n\n# Multiple return points\ndef check_number(n):\n    if n &gt; 0:\n        return \"positive\"\n    elif n &lt; 0:\n        return \"negative\"\n    return None  # if n == 0\n\n\nFunction Scope\n# Global scope\nglobal_var = 10\n\ndef function():\n    # Local scope\n    local_var = 20\n    print(global_var)  # Can access global\n\n    # Modify global variable\n    global global_var\n    global_var = 30",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#classes",
    "href": "general/cheatsheet.html#classes",
    "title": "Cheatsheet",
    "section": "Classes",
    "text": "Classes\n\nBasic Class Syntax\nclass ClassName:\n    # Class attribute\n    class_attribute = value\n\n    # Constructor\n    def __init__(self, parameter):\n        # Instance attribute\n        self.instance_attribute = parameter\n\n    # Method\n    def method_name(self):\n        return self.instance_attribute\n\n\nClass Example\nclass Student:\n    # Class attribute\n    school = \"Python University\"\n\n    def __init__(self, name):\n        # Instance attribute\n        self.name = name\n\n    def introduce(self):\n        return f\"Hi, I'm {self.name}\"\n\n# Create instance\nstudent = Student(\"Alice\")\nprint(student.introduce())  # \"Hi, I'm Alice\"\n\n\nInheritance\nclass Parent:\n    def method(self):\n        print(\"Parent method\")\n\nclass Child(Parent):\n    def method(self):\n        print(\"Child method\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-2",
    "href": "general/cheatsheet.html#best-practices-2",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse descriptive function and class names\nWrite clear docstrings\nKeep functions focused on a single task\nUse meaningful parameter names\nFollow Python naming conventions:\n\nfunction_name (snake_case)\nClassName (PascalCase)\nvariable_name (snake_case)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuples",
    "href": "general/cheatsheet.html#tuples",
    "title": "Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n# Creating tuples\nmy_tuple = (1, 2, 3)           # Using parentheses\nmy_tuple = 1, 2, 3             # Using just commas\nmy_tuple = tuple([1, 2, 3])    # Using tuple() function\n\n# Tuple operations\nmy_tuple[0]                    # Accessing elements\nmy_tuple[1:3]                  # Slicing\nmy_tuple + (4, 5, 6)          # Concatenation\nmy_tuple * 2                   # Repetition\n\n# Tuple methods\nmy_tuple.count(2)              # Count occurrences\nmy_tuple.index(3)              # Find index of element\n\n# Tuple unpacking\nname, age, city = my_tuple     # Basic unpacking\nname, *rest = my_tuple         # Using * for remaining elements",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#lists",
    "href": "general/cheatsheet.html#lists",
    "title": "Cheatsheet",
    "section": "Lists",
    "text": "Lists\n# Creating lists\nmy_list = [1, 2, 3]           # Using square brackets\nmy_list = list((1, 2, 3))     # Using list() function\n\n# Common list methods\nmy_list.append(4)             # Add element to end\nmy_list.insert(0, 0)         # Insert at index\nmy_list.remove(1)            # Remove first occurrence\nmy_list.pop()                # Remove and return last element\nmy_list.sort()               # Sort in place\nmy_list.reverse()            # Reverse in place\nmy_list.count(2)             # Count occurrences\nmy_list.index(3)             # Find index of element",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#sets",
    "href": "general/cheatsheet.html#sets",
    "title": "Cheatsheet",
    "section": "Sets",
    "text": "Sets\n# Creating sets\nmy_set = {1, 2, 3}           # Using curly braces\nmy_set = set([1, 2, 3])      # Using set() function\n\n# Common set methods\nmy_set.add(4)                # Add element\nmy_set.remove(1)             # Remove element (raises error if not found)\nmy_set.discard(1)            # Remove element (no error if not found)\nmy_set.pop()                 # Remove and return arbitrary element\nmy_set.update({4, 5, 6})     # Add multiple elements\n\n# Set operations\nset1.union(set2)             # Union of sets\nset1.intersection(set2)      # Intersection of sets\nset1.isdisjoint(set2)        # Check if sets have no common elements\nset1.issubset(set2)          # Check if set1 is subset of set2",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#dictionaries",
    "href": "general/cheatsheet.html#dictionaries",
    "title": "Cheatsheet",
    "section": "Dictionaries",
    "text": "Dictionaries\n# Creating dictionaries\nmy_dict = {\"name\": \"John\", \"age\": 30}    # Using curly braces\nmy_dict = dict(name=\"John\", age=30)      # Using dict() function\n\n# Dictionary operations\nmy_dict[\"name\"]              # Access value by key\nmy_dict[\"city\"] = \"Hamburg\"  # Add or update key-value pair\ndel my_dict[\"age\"]           # Remove key-value pair\n\"name\" in my_dict            # Check if key exists\n\n# Dictionary methods\nmy_dict.keys()               # Get all keys\nmy_dict.values()             # Get all values\nmy_dict.items()              # Get all key-value pairs\nmy_dict.get(\"name\")          # Safe way to get value\nmy_dict.pop(\"name\")          # Remove and return value",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#file-handling",
    "href": "general/cheatsheet.html#file-handling",
    "title": "Cheatsheet",
    "section": "File Handling",
    "text": "File Handling\n# Basic file operations\nfile = open(\"file.txt\", \"r\")  # Open for reading\nfile = open(\"file.txt\", \"w\")  # Open for writing\nfile = open(\"file.txt\", \"a\")  # Open for appending\n\n# Reading files\ncontent = file.read()         # Read entire file\nlines = file.readlines()      # Read lines into list\n\n# Writing files\nfile.write(\"Hello\")           # Write string to file\nfile.writelines(lines)        # Write list of strings\n\n# Using with statement (recommended)\nwith open(\"file.txt\", \"r\") as file:\n    content = file.read()",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#data-type-comparison",
    "href": "general/cheatsheet.html#data-type-comparison",
    "title": "Cheatsheet",
    "section": "Data Type Comparison",
    "text": "Data Type Comparison\n\nTuples: Immutable, ordered, allows duplicates\nLists: Mutable, ordered, allows duplicates\nSets: Mutable, unordered, no duplicates\nDictionaries: Mutable, unordered, unique keys",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-3",
    "href": "general/cheatsheet.html#best-practices-3",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse tuples for immutable sequences\nUse lists when order matters and items need to be modified\nUse sets for unique collections\nUse dictionaries for key-value relationships\nAlways use with statement for file operations\nClose files after use if not using with",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#common-built-in-exceptions",
    "href": "general/cheatsheet.html#common-built-in-exceptions",
    "title": "Cheatsheet",
    "section": "Common Built-in Exceptions",
    "text": "Common Built-in Exceptions\n\nValueError: Wrong value type (e.g., converting “hello” to int)\nTypeError: Wrong operation for type (e.g., “hello” + 5)\nNameError: Variable not found\nIndexError: List index out of range\nKeyError: Dictionary key not found\nFileNotFoundError: File/directory not found\nZeroDivisionError: Division by zero\nAttributeError: Object has no attribute/method\nImportError: Module import fails\nSyntaxError: Invalid Python syntax\nIndentationError: Incorrect indentation\nRuntimeError: Generic runtime error",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#try-except-blocks",
    "href": "general/cheatsheet.html#try-except-blocks",
    "title": "Cheatsheet",
    "section": "Try-Except Blocks",
    "text": "Try-Except Blocks\n# Basic try-except\ntry:\n    result = risky_operation()\nexcept Exception as e:\n    print(f\"Error occurred: {e}\")\n\n# Multiple exception handling\ntry:\n    result = risky_operation()\nexcept ValueError as e:\n    print(f\"Value error: {e}\")\nexcept TypeError as e:\n    print(f\"Type error: {e}\")\nexcept Exception as e:\n    print(f\"Other error: {e}\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#raising-exceptions",
    "href": "general/cheatsheet.html#raising-exceptions",
    "title": "Cheatsheet",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n# Basic raise\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\n# Custom exception\nclass CustomError(Exception):\n    pass\n\ndef custom_operation():\n    if error_condition:\n        raise CustomError(\"Custom error message\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#assertions",
    "href": "general/cheatsheet.html#assertions",
    "title": "Cheatsheet",
    "section": "Assertions",
    "text": "Assertions\n# Basic assertions\nassert condition, \"Error message\"\nassert x &gt; 0, \"x must be positive\"\nassert isinstance(x, int), \"x must be integer\"\n\n# Common assertion patterns\ndef process_list(lst):\n    assert isinstance(lst, list), \"Input must be a list\"\n    assert all(isinstance(x, int) for x in lst), \"All elements must be integers\"\n    assert len(lst) &gt; 0, \"List cannot be empty\"",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#debugging-tips",
    "href": "general/cheatsheet.html#debugging-tips",
    "title": "Cheatsheet",
    "section": "Debugging Tips",
    "text": "Debugging Tips\n\nPrint Debugging\n\nprint(f\"Variable x = {x}\")\nprint(f\"Type of x: {type(x)}\")\nprint(f\"Debug: Entering function {function_name}\")\n\nAssertions for Debugging\n\nassert x == expected_value, f\"x should be {expected_value}, but got {x}\"\n\nIDE Debugging\n\n\nSet breakpoints\nStep through code\nInspect variables\nUse watch windows",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-4",
    "href": "general/cheatsheet.html#best-practices-4",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nAlways handle specific exceptions before generic ones\nUse meaningful error messages\nDon’t catch exceptions without handling them\nUse assertions for debugging and testing\nInclude relevant information in error messages\nClean up resources in try-finally blocks",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#common-debugging-workflow",
    "href": "general/cheatsheet.html#common-debugging-workflow",
    "title": "Cheatsheet",
    "section": "Common Debugging Workflow",
    "text": "Common Debugging Workflow\n\nIdentify the error (error message or unexpected behavior)\nLocate the source of the error\nAdd print statements or use debugger\nTest the fix\nAdd error handling if needed",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#modules",
    "href": "general/cheatsheet.html#modules",
    "title": "Cheatsheet",
    "section": "Modules",
    "text": "Modules\n\nImporting Modules\n# Basic import\nimport module_name\nmodule_name.function_name()\n\n# Import specific items\nfrom module_name import function_name, another_function\nfunction_name()\n\n# Import with alias\nimport module_name as alias\nalias.function_name()\n\n\nCommon Built-in Modules\n\n\n\n\n\n\n\n\nModule\nDescription\nCommon Functions/Constants\n\n\n\n\nmath\nMathematical functions\npi, sqrt(), cos()\n\n\nrandom\nRandom number generation\nrandom(), randint()\n\n\ndatetime\nDate and time handling\ndatetime, timedelta\n\n\nos\nOperating system interaction\nlistdir(), path.exists()\n\n\ncsv\nCSV file operations\nreader(), writer()\n\n\nre\nRegular expressions\nsearch(), findall()",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#random-module",
    "href": "general/cheatsheet.html#random-module",
    "title": "Cheatsheet",
    "section": "Random Module",
    "text": "Random Module\nimport random\n\nrandom.random()           # Float between 0 and 1\nrandom.uniform(1, 10)    # Float between 1 and 10\nrandom.randint(1, 10)    # Integer between 1 and 10\nrandom.choice(list)      # Random item from list\nrandom.shuffle(list)     # Shuffle list in place",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#os-module",
    "href": "general/cheatsheet.html#os-module",
    "title": "Cheatsheet",
    "section": "OS Module",
    "text": "OS Module\nimport os\n\nos.listdir('path')           # List directory contents\nos.path.exists('path')       # Check if path exists\nos.path.isfile('path')       # Check if path is file\nos.makedirs('path')          # Create directories\nos.getcwd()                  # Get current working directory\nos.path.join('dir', 'file')  # Join path components",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#csv-module",
    "href": "general/cheatsheet.html#csv-module",
    "title": "Cheatsheet",
    "section": "CSV Module",
    "text": "CSV Module\nimport csv\n\n# Writing CSV\nwith open('file.csv', 'w') as file:\n    writer = csv.writer(file)\n    writer.writerow(['header1', 'header2'])\n    writer.writerow(['data1', 'data2'])\n\n# Reading CSV\nwith open('file.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#regular-expressions-re",
    "href": "general/cheatsheet.html#regular-expressions-re",
    "title": "Cheatsheet",
    "section": "Regular Expressions (re)",
    "text": "Regular Expressions (re)\nimport re\n\n# Basic patterns\nre.search(pattern, string)    # Search for pattern\nre.findall(pattern, string)   # Find all occurrences\nre.sub(pattern, repl, string) # Replace pattern\nre.split(pattern, string)     # Split string by pattern\n\n# Common special characters\n. # Any character\n* # Zero or more\n+ # One or more\n? # Zero or one\n[] # Character set\n\\d # Any digit\n\\w # Word character\n\\s # Whitespace",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#package-management",
    "href": "general/cheatsheet.html#package-management",
    "title": "Cheatsheet",
    "section": "Package Management",
    "text": "Package Management\n# Installing packages\nuv add package_name\nuv add package1 package2\n\n# Remove packages\nuv remove package_name",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-5",
    "href": "general/cheatsheet.html#best-practices-5",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nImport modules at the beginning of the file\nUse specific imports instead of importing everything\nUse meaningful aliases when needed\nKeep virtual environments project-specific\nDocument package dependencies\nUse regular expressions carefully and test them thoroughly",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#numpy-basics",
    "href": "general/cheatsheet.html#numpy-basics",
    "title": "Cheatsheet",
    "section": "NumPy Basics",
    "text": "NumPy Basics\n\nCreating Arrays\nimport numpy as np\n\n# Basic array creation\narr = np.array([1, 2, 3, 4, 5])\narr_2d = np.array([[1, 2], [3, 4]])\n\n# Pre-filled arrays\nzeros = np.zeros((3, 3))        # Array of zeros\nones = np.ones((2, 2))         # Array of ones\nrand = np.random.rand(3, 3)    # Random values\narange = np.arange(0, 10, 2)   # Values from 0 to 10, step 2\nlinspace = np.linspace(0, 1, 5) # 5 evenly spaced values\n\n\nArray Operations\n# Basic operations\narr + 1                  # Add 1 to all elements\narr * 2                  # Multiply all elements by 2\narr &gt; 3                  # Boolean comparison\n\n# Array methods\narr.sort()              # Sort array\narr.reshape(2, 3)       # Reshape array\narr.flatten()           # Convert to 1D array\narr.transpose()         # Transpose array\narr.squeeze()           # Remove single-dimensional entries\n\n# Joining arrays\nnp.concatenate((arr1, arr2))  # Join arrays\nnp.vstack((arr1, arr2))       # Vertical stack\nnp.hstack((arr1, arr2))       # Horizontal stack\n\n\nData Types\n# Common dtypes\n'i'    # integer\n'b'    # boolean\n'f'    # float\n'S'    # string\n'U'    # unicode\n\n# Setting dtype\narr = np.array([1, 2, 3], dtype='f')\narr = arr.astype('i')         # Convert type",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#best-practices-6",
    "href": "general/cheatsheet.html#best-practices-6",
    "title": "Cheatsheet",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse NumPy for numerical computations\nKeep array types homogeneous for better performance\nUse appropriate data types to optimize memory\nPrefer vectorized operations over loops",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#pandas-basics",
    "href": "general/cheatsheet.html#pandas-basics",
    "title": "Cheatsheet",
    "section": "Pandas Basics",
    "text": "Pandas Basics\n\nCreating DataFrames\nimport pandas as pd\n\n# From dictionary\ndf = pd.DataFrame({\n    'Name': ['John', 'Anna'],\n    'Age': [25, 28]\n})\n\n# From CSV/Excel\ndf = pd.read_csv('file.csv')\ndf = pd.read_excel('file.xlsx')\n\n\nBasic Operations\n# Viewing data\ndf.head()               # First 5 rows\ndf.tail()               # Last 5 rows\ndf.info()              # DataFrame info\ndf.describe()          # Summary statistics\n\n# Accessing data\ndf['column_name']      # Access column\ndf.iloc[0]            # Access by position\ndf.loc['label']       # Access by label\n\n# Filtering\ndf[df['Age'] &gt; 25]    # Filter by condition\n\n\nGrouping and Aggregation\n# Basic grouping\ndf.groupby('column').mean()\ndf.groupby(['col1', 'col2']).sum()\n\n# Common aggregations\n.sum()      # Sum of values\n.mean()     # Mean of values\n.max()      # Maximum value\n.min()      # Minimum value\n.count()    # Count of values\n\n\nReshaping Data\n# Melting (wide to long)\npd.melt(df, id_vars=['ID'])\n\n# Combining DataFrames\npd.concat([df1, df2])           # Concatenate\ndf1.join(df2)                   # Join on index\ndf1.merge(df2, on='column')     # Merge on column\n\n\nExcel Operations\n# Reading Excel\ndf = pd.read_excel('file.xlsx', sheet_name='Sheet1')\n\n# Writing to Excel\ndf.to_excel('output.xlsx',\n            sheet_name='Sheet1',\n            index=False)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Programming with Python!",
    "section": "",
    "text": "This module introduces programming with python. Python is a modern and powerful programming language that is widely used in industry and academic projects. Students will learn how to find a code-based solution to basic and complex problems. The course is based on many examples that illustrate how to tackle a potentially complex issue as well as how to implement a solution.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#ai-policy",
    "href": "index.html#ai-policy",
    "title": "Welcome to Programming with Python!",
    "section": "AI Policy",
    "text": "AI Policy\nLevel 1: Pause – Use of AI defined by the educator\nA course chatbot is available on the learning website for exploratory study. It is designed to guide your problem-solving process rather than provide answers directly. Use it as a learning tool, not a solution generator.\nYou may also use external AI tools (e.g., ChatGPT, Claude, Mistral, Gemini). However:\n\nPlease be careful and try to understand the code generated.\nRelying on AI to solve tasks for you weakens your own learning.\nAI should ideally support understanding — not replace practice.\nUsing AI without understand the code can lead to security risks.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nHow can I download PDF slides from the lecture?\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.\n\n\n\n\n\n\n\nUnfortunately, this method does not work perfectly on all browsers. If you have a Chrome based browser, you should be fine.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-chatbot-work",
    "href": "general/faq.html#how-does-the-chatbot-work",
    "title": "Frequently Asked Questions",
    "section": "How does the chatbot work?",
    "text": "How does the chatbot work?\nThe course AI is a chatbot that uses the Mistral and some custom code hosted on Hetzner in Germany. If you have any questions about the course, feel free to ask the AI. Note, that the AI is not perfect and sometimes the answers might be incorrect. For more information about how the data is processed, please refer to the privacy policy.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/privacy.html",
    "href": "general/privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website.\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#introduction",
    "href": "general/privacy.html#introduction",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website.\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#data-controller",
    "href": "general/privacy.html#data-controller",
    "title": "Privacy Policy",
    "section": "2. Data Controller",
    "text": "2. Data Controller\nThe data controller responsible for your personal data is:\nBeyond Simulations GmbH\nAm Eich 9d\n22113 Oststeinbek\nGermany\nEmail: info@beyond-simulations.com"
  },
  {
    "objectID": "general/privacy.html#information-we-collect",
    "href": "general/privacy.html#information-we-collect",
    "title": "Privacy Policy",
    "section": "3. Information We Collect",
    "text": "3. Information We Collect\nWhen you interact with our Chatbot, we collect and process the following types of information:\n\nChat Interactions: This includes the questions, prompts, and text you submit to the Chatbot (“Prompts”) and the responses generated by the Chatbot (“Responses”). We do not store any personal data and all prompts are anonymized.\nTechnical Data: We may automatically collect technical information associated with your interaction, such as timestamps, session identifiers for service functionality. This data is processed on our self-hosted server at Hetzner in Germany.\nUsage Data: We may collect aggregated and anonymized data about how the Chatbot is used to monitor performance and improve the service."
  },
  {
    "objectID": "general/privacy.html#how-we-use-your-information",
    "href": "general/privacy.html#how-we-use-your-information",
    "title": "Privacy Policy",
    "section": "4. How We Use Your Information",
    "text": "4. How We Use Your Information\nWe use the collected information for the following purposes:\n\nTo Provide and Operate the Chatbot: To receive your Prompts, process them using AI models, and deliver Responses back to you.\nTo Route Requests: To manage communication between our Chatbot interface and the underlying AI models via intermediary services.\nFor Safety and Content Moderation: To analyze Prompts and/or potential Responses for harmful, inappropriate, or policy-violating content using designated services by Mistral AI acting as guardrails, aiming to ensure safer interactions.\nFor Service Improvement: To analyze usage patterns to understand user needs, troubleshoot issues, and enhance the Chatbot’s performance and capabilities.\nFor Security and Monitoring: To maintain the security of our service, prevent fraud, and monitor for potential misuse.\nTo Comply with Legal Obligations: To meet any applicable legal or regulatory requirements."
  },
  {
    "objectID": "general/privacy.html#legal-basis-for-processing",
    "href": "general/privacy.html#legal-basis-for-processing",
    "title": "Privacy Policy",
    "section": "5. Legal Basis for Processing",
    "text": "5. Legal Basis for Processing\nWe process your personal data based on the following legal grounds:\n\nLegitimate Interests: Processing is necessary for our legitimate interests in operating and improving the Chatbot service and maintaining its security, provided these interests are not overridden by your data protection rights.\nConsent: In some cases, we might ask for your explicit consent for specific processing activities (e.g., using conversation data for fine-tuning models beyond basic service provision).\nLegal Obligation: Processing is necessary to comply with a legal obligation to which we are subject."
  },
  {
    "objectID": "general/privacy.html#data-sharing-and-third-parties",
    "href": "general/privacy.html#data-sharing-and-third-parties",
    "title": "Privacy Policy",
    "section": "6. Data Sharing and Third Parties",
    "text": "6. Data Sharing and Third Parties\nTo provide the Chatbot service, your Prompts are processed by and shared with the following third-party services and infrastructure providers:\n\nChatbot Interface (Dify): The user interface for the Chatbot runs on our own instance of Dify hosted on Hetzner servers in Germany.\nLLM Observation (Langfuse): We use Langfuse to observe the usage of the LLM models we use. Your Prompts (and generated responses) pass through Langfuse to reach the selected LLM provider or guardrail service. The data is stored on our self-hosted server at Hetzner in Germany.\nHosting Provider (Hetzner): Our instance of Dify and Langfuse is self-hosted on servers provided by Hetzner Online GmbH. Hetzner acts as a data processor providing the infrastructure. We store application data and interaction logs on these servers, located within Germany. Review Hetzner’s privacy policy to understand how they handle data passing through their service: [Link to Hetzner Privacy Policy]\nMistral AI: We use Mistral AI models for two primary purposes: (1) as one of the LLM options to generate Responses to your Prompts, and (2) as a guardrail service to check Prompts and/or potential Responses (which may have been generated by either Google Gemini or Mistral AI itself) for safety, appropriateness, and compliance with content policies before a final response is delivered to you. When Mistral AI is used for either generation or guardrail checking, your data (relevant Prompts and/or potential Responses) is processed according to Mistral AI’s terms and privacy policy. Find more information here: [Link to Mistral AI Privacy Policy]\n\nImportant Note on Third-Party Processing: These LLM and guardrail providers process your data to generate Responses or perform safety checks. They may use data according to their own policies, potentially including service improvement, subject to their terms. We encourage you to review their respective privacy policies. We do not explicitly share personal identifiers like your name or email through the Chatbot interaction unless you voluntarily include such information in your Prompts."
  },
  {
    "objectID": "general/privacy.html#data-storage-security-and-retention",
    "href": "general/privacy.html#data-storage-security-and-retention",
    "title": "Privacy Policy",
    "section": "7. Data Storage, Security, and Retention",
    "text": "7. Data Storage, Security, and Retention\n\nStorage: Chat interaction data (Prompts, Responses) and technical logs may be stored temporarily or persistently (depending on configuration) on our Dify and Langfuse instance hosted on Hetzner servers in Germany.\nSecurity: We implement reasonable technical and organizational measures to protect your data from unauthorized access, disclosure, alteration, or destruction. This includes using HTTPS encryption for data transmitted between your browser, our server, and the LLM providers. Access to the backend systems is restricted.\nRetention: We retain chat interaction data and technical logs only for as long as necessary to fulfill the purposes outlined in this policy, for troubleshooting, security logging, service improvement, or as required by law. Retention periods vary depending on the type of data and our operational needs."
  },
  {
    "objectID": "general/privacy.html#your-data-protection-rights",
    "href": "general/privacy.html#your-data-protection-rights",
    "title": "Privacy Policy",
    "section": "8. Your Data Protection Rights",
    "text": "8. Your Data Protection Rights\nDepending on your location and applicable data protection laws, you may have the following rights regarding your personal data:\n\nRight to Access: You can request copies of your personal data that we hold.\nRight to Rectification: You can request correction of inaccurate or incomplete data.\nRight to Erasure (‘Right to be Forgotten’): You can request the deletion of your personal data under certain conditions.\nRight to Restrict Processing: You can request the limitation of how we process your data under certain conditions.\nRight to Data Portability: You can request that we transfer the data we have collected to another organization, or directly to you, under certain conditions.\nRight to Object: You can object to our processing of your personal data based on legitimate interests.\nRight to Withdraw Consent: If processing is based on consent, you can withdraw it at any time.\n\nTo exercise any of these rights, please contact us using the details provided in Section 2 (Data Controller). We may need to verify your identity before processing your request."
  },
  {
    "objectID": "general/privacy.html#changes-to-this-privacy-policy",
    "href": "general/privacy.html#changes-to-this-privacy-policy",
    "title": "Privacy Policy",
    "section": "9. Changes to This Privacy Policy",
    "text": "9. Changes to This Privacy Policy\nWe may update this Privacy Policy from time to time. We will notify you of any significant changes by posting the new policy on this page and updating the “Last Updated” date at the top. We encourage you to review this policy periodically for any changes."
  },
  {
    "objectID": "general/uv.html",
    "href": "general/uv.html",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It: - Installs Python for you (no manual downloads). - Creates isolated virtual environments (safe sandboxes per project). - Installs and updates packages quickly.\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#why-we-use-uv-for-this-course",
    "href": "general/uv.html#why-we-use-uv-for-this-course",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It: - Installs Python for you (no manual downloads). - Creates isolated virtual environments (safe sandboxes per project). - Installs and updates packages quickly.\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#install-uv",
    "href": "general/uv.html#install-uv",
    "title": "Installing Python",
    "section": "Install uv",
    "text": "Install uv\nChoose the instructions for your operating system.\n\nmacOS or Linux (Terminal)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf curl is missing:\nwget -qO- https://astral.sh/uv/install.sh | sh\nAfter installation: close and reopen your terminal (so your PATH updates).\n\n\nWindows (PowerShell)\nOpen PowerShell and run:\npowershell -ExecutionPolicy Bypass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nIf you see a script execution warning, you can alternatively first run:\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process\nThen re-run the install line.\n\n\nVerify installation\nRun (macOS / Linux / Windows):\nuv --version\nIf you see a version number: great!\n\n\n\n\n\n\nIf you get “command not found” or “‘uv’ is not recognized”:\n\nClose and reopen the terminal (important).\nOn Windows: make sure you used PowerShell (not Command Prompt).\nStill broken? Ask for help, no need of guessing the error.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#install-and-pin-python",
    "href": "general/uv.html#install-and-pin-python",
    "title": "Installing Python",
    "section": "Install (and pin) Python",
    "text": "Install (and pin) Python\nWe want everyone on the same Python version for consistency. Thus, we’ll use Python 3.12 for the course this year.\nInstall (you only need to do this once):\nuv python install 3.12\nCheck the installation:\nuv run python --version\nExpected output starts with:\nPython 3.12.\n\n\n\n\n\n\nWhy pin a version? If the latest Python version moves forward mid‑semester, subtle bugs can appear that might break working code (unlikely, but possible). Pinning keeps everyone in the course aligned.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#create-your-first-project",
    "href": "general/uv.html#create-your-first-project",
    "title": "Installing Python",
    "section": "Create your first project",
    "text": "Create your first project\nPick a folder where you keep course work. If you do not have one, make sure to create one! Open the course folder in your IDE and then run the following from the terminal:\nuv init my-first-project\ncd my-first-project\nThe first line creates a new folder named my-first-project (you can name it anything). The second line moves you into that folder. Alternatively, you can create the folder manually before, open it in your IDE and run uv init . inside it.\nuv init creates: - main.py (starter script) - pyproject.toml (project + dependencies config) - .python-version (records the Python version we chose) - .gitignore (useful if you ever use Git) - README.md (you can jot notes here) - (A .venv folder will appear later once packages are added or synced.)\nYou do not need to edit any of these (except maybe README.md for your notes and main.py if you want to run something different).",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#run-the-starter-script",
    "href": "general/uv.html#run-the-starter-script",
    "title": "Installing Python",
    "section": "Run the starter script",
    "text": "Run the starter script\nInside the project folder:\nuv run python main.py\nYou should see something like:\nHello World!\n(If you want, you can open main.py and change the message, then re-run.)\n\nWhat does that code mean?\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n\ndef main(): defines a function (a reusable block of code).\nprint(...) shows text in the terminal.\nThe line if __name__ == \"__main__\": ensures this only auto-runs when the file is executed directly.\n\nDon’t worry about this yet, we’ll gradually build up to it.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#adding-packages-later-in-the-course",
    "href": "general/uv.html#adding-packages-later-in-the-course",
    "title": "Installing Python",
    "section": "Adding packages (later in the course)",
    "text": "Adding packages (later in the course)\nIf/when you need a package (example: pandas):\nuv add pandas\nIf you added the wrong one:\nuv remove pandas\nIf your pyproject.toml changed (e.g. you pulled code from someone else):\nuv sync\n\n\n\n\n\n\nIf something seems “off”, just close the terminal and reopen in the project folder. Fresh starts fix many early mistakes.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#updating-uv",
    "href": "general/uv.html#updating-uv",
    "title": "Installing Python",
    "section": "Updating uv",
    "text": "Updating uv\nOccasionally:\nuv self update\n(If it ever errors, you can just reinstall using the same one-liner from earlier.)",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#best-practices-for-this-course",
    "href": "general/uv.html#best-practices-for-this-course",
    "title": "Installing Python",
    "section": "Best practices for this course",
    "text": "Best practices for this course\n\nOne project folder per session or assignment keeps everything tidy.\nNever install packages “globally” outside a project.\nPrefer uv run python &lt;file&gt; instead of environment activation.\nKeep a short personal log in each project’s README.md (What did I do? What still confuses me?).\nAsk early for help, guessing usually takes much more time than asking.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#where-to-go-next",
    "href": "general/uv.html#where-to-go-next",
    "title": "Installing Python",
    "section": "10. Where to go next",
    "text": "10. Where to go next\nExplore the official docs later if you’re curious: https://docs.astral.sh/uv/\nYou can always see available commands:\nuv --help",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "general/uv.html#recap",
    "href": "general/uv.html#recap",
    "title": "Installing Python",
    "section": "Recap",
    "text": "Recap\nYou can now: 1. Install uv. 2. Create a project. 3. Run a script. 4. Add/remove/sync packages.\nNow, you’re set for the rest of the course.",
    "crumbs": [
      "Installing Python"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html",
    "href": "lectures/lec_02_control.html",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places.\n\n\n\n\n\n\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool\n\n\n\n\n\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.\n\n\n\n\n\n\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2\n\n\n\n\n\n&gt; Task: Calculate the final value step by step:\n\n# Start with the following values\nprice = 100\ndiscount_percent = 15\ntax_rate = 0.08\n\n# Your task:\n# 1. Apply the discount to the price (price reduced by discount_percent)\n# 2. Add tax to the discounted price\n# 3. Round the final price to 2 decimal places\n# Your code here\n\nfinal_price = ?  # What should this be?\n\n\n\n\n\n\n\nYou can use the round() function to round a number to a specific number of decimal places. For example: round(3.14159, 2) returns 3.14.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#f-strings",
    "href": "lectures/lec_02_control.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#variables-and-data-types",
    "href": "lectures/lec_02_control.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Python uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#arithmetic-operators",
    "href": "lectures/lec_02_control.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Addition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#arithmetic-operators-with-variables",
    "href": "lectures/lec_02_control.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Additional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#arithmetic-operators-task",
    "href": "lectures/lec_02_control.html#arithmetic-operators-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "&gt; Task: Calculate the final value step by step:\n\n# Start with the following values\nprice = 100\ndiscount_percent = 15\ntax_rate = 0.08\n\n# Your task:\n# 1. Apply the discount to the price (price reduced by discount_percent)\n# 2. Add tax to the discounted price\n# 3. Round the final price to 2 decimal places\n# Your code here\n\nfinal_price = ?  # What should this be?\n\n\n\n\n\n\n\nYou can use the round() function to round a number to a specific number of decimal places. For example: round(3.14159, 2) returns 3.14.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#objects",
    "href": "lectures/lec_02_control.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n. . .\n\n\n\n\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#methods",
    "href": "lectures/lec_02_control.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n. . .\n\n\n\n\n\n\nYou can use the dir() function to list all methods and attributes of an object.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#string-methods",
    "href": "lectures/lec_02_control.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#string-methods-in-action",
    "href": "lectures/lec_02_control.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n. . .\n\n\n\n\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#string-task",
    "href": "lectures/lec_02_control.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Task: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n. . .\n\n\n\n\n\n\nRemember, that these methods return a new string. The original string is not modified.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#string-task-in-action",
    "href": "lectures/lec_02_control.html#string-task-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task in Action",
    "text": "String Task in Action\n\nmessage = \" the snake programmer. \"\nprint(message.strip().title().replace(\"Snake\", \"Python\"))\n\nThe Python Programmer.\n\n\n. . .\n\n\n\n\n\n\nHere we chained methods together to perform multiple operations after another in one line.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#indexing",
    "href": "lectures/lec_02_control.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n. . .\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\nH\n!",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#slicing",
    "href": "lectures/lec_02_control.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\nWorld\nWorld",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#slicing-simplified",
    "href": "lectures/lec_02_control.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\nHlo ol!\n!dlroW ,olleH",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#slicing-string-task",
    "href": "lectures/lec_02_control.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Task: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n. . .\n\n\n\n\n\n\nRemember, that these methods return a new string. The original string is not modified.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#comparison-operators",
    "href": "lectures/lec_02_control.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n. . .\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#logical-operators",
    "href": "lectures/lec_02_control.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n. . .\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9;\nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\nTrue\nTrue\nTrue\n\n\n. . .\n\n\n\n\n\n\nNote, that and and or are evaluated from left to right.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#membership-operators",
    "href": "lectures/lec_02_control.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n. . .\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\nTrue\nFalse\n\n\n. . .\n\n\n\n\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#control-structures-1",
    "href": "lectures/lec_02_control.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n. . .\n&gt; Question: What do you think each of the above does?",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#indentation",
    "href": "lectures/lec_02_control.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n. . .\n\n\n\n\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#conditional-statements-1",
    "href": "lectures/lec_02_control.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n. . .\n\n\n\n\n\n\nYou can use the and and or operators to combine multiple conditions.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#if-statements",
    "href": "lectures/lec_02_control.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThe condition is True!\nThis will always be printed!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThis will always be printed!\n\n\n. . .\n\n\n\n\n\n\nWriting if condition: is equivalent to if condition == True:",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#else-statements",
    "href": "lectures/lec_02_control.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is True!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is False!",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#elif-statements",
    "href": "lectures/lec_02_control.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is greater than 10!\n\n\n. . .\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is equal to 10!",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#comparisons-and-conditional-statements",
    "href": "lectures/lec_02_control.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\nYou are the chosen one still visiting school!",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#conditional-logic-task",
    "href": "lectures/lec_02_control.html#conditional-logic-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Logic Task",
    "text": "Conditional Logic Task\n&gt; Task: Create a grade classifier:\n\n# Given a numerical score, classify it into letter grades\nscore = 87  # You can test with different values\n\n# Your task: Create if/elif/else statements that assign letter grades:\n# 90-100: \"A\"\n# 80-89: \"B\"\n# 70-79: \"C\"\n# 60-69: \"D\"\n# Below 60: \"F\"\n# Also handle invalid scores (negative or &gt; 100)\n\n# Your code here\n\nprint(f\"Score: {score}, Grade: {grade}\")",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#loops-1",
    "href": "lectures/lec_02_control.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n. . .\n\n\n\n\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#for-loops",
    "href": "lectures/lec_02_control.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n0\n2\n4\n6\n8\n\n\n. . .\n\n\n\n\n\n\nThe range() function can take up to three arguments: start, stop, and step.\n\n\n\n. . .",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#for-loops-with-strings",
    "href": "lectures/lec_02_control.html#for-loops-with-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with Strings",
    "text": "for-loops with Strings\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#while-loops",
    "href": "lectures/lec_02_control.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n0\n1\n2\n3\n4\n\n\n. . .\n&gt; Question: What could be an issue with poorly written while-loops?",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#while-true",
    "href": "lectures/lec_02_control.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#importance-of-control-flow",
    "href": "lectures/lec_02_control.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n. . .\n\n\n\n\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#loop-task",
    "href": "lectures/lec_02_control.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Task: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100 excluding both 0 and 100.\nnumber = 0\n# Your code here\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_control.html#interesting-books-to-start",
    "href": "lectures/lec_02_control.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNothing new here, but these are still great books to start with!\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "02 Control Flow",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_presentation.html#f-strings",
    "href": "lectures/lec_02_presentation.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "F-Strings",
    "text": "F-Strings\n\nF-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\n\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n\n\n\n\n\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#variables-and-data-types",
    "href": "lectures/lec_02_presentation.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n\n\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#arithmetic-operators",
    "href": "lectures/lec_02_presentation.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n\n\n\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#arithmetic-operators-with-variables",
    "href": "lectures/lec_02_presentation.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators with Variables",
    "text": "Arithmetic Operators with Variables\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#arithmetic-operators-task",
    "href": "lectures/lec_02_presentation.html#arithmetic-operators-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators Task",
    "text": "Arithmetic Operators Task\n&gt; Task: Calculate the final value step by step:\n\n# Start with the following values\nprice = 100\ndiscount_percent = 15\ntax_rate = 0.08\n\n# Your task:\n# 1. Apply the discount to the price (price reduced by discount_percent)\n# 2. Add tax to the discounted price\n# 3. Round the final price to 2 decimal places\n# Your code here\n\nfinal_price = ?  # What should this be?\n\n\n\n\n\n\n\nYou can use the round() function to round a number to a specific number of decimal places. For example: round(3.14159, 2) returns 3.14."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#objects",
    "href": "lectures/lec_02_presentation.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n\n\n\n\n\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#methods",
    "href": "lectures/lec_02_presentation.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n\n\n\n\n\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#string-methods",
    "href": "lectures/lec_02_presentation.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#string-methods-in-action",
    "href": "lectures/lec_02_presentation.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\n\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n\n\n\n\n\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#string-task",
    "href": "lectures/lec_02_presentation.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Task: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n\n\n\n\n\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#string-task-in-action",
    "href": "lectures/lec_02_presentation.html#string-task-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task in Action",
    "text": "String Task in Action\n\nmessage = \" the snake programmer. \"\nprint(message.strip().title().replace(\"Snake\", \"Python\"))\n\n\n\nThe Python Programmer.\n\n\n\n\n\n\n\n\n\nHere we chained methods together to perform multiple operations after another in one line."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#indexing",
    "href": "lectures/lec_02_presentation.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\n\n\nH\n!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#slicing",
    "href": "lectures/lec_02_presentation.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\n\n\nWorld\nWorld"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#slicing-simplified",
    "href": "lectures/lec_02_presentation.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\n\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#slicing-string-task",
    "href": "lectures/lec_02_presentation.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Task: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n\n\n\n\n\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#comparison-operators",
    "href": "lectures/lec_02_presentation.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to\n\n\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#logical-operators",
    "href": "lectures/lec_02_presentation.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9;\nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\n\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#membership-operators",
    "href": "lectures/lec_02_presentation.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\n\n\nTrue\nFalse\n\n\n\n\n\n\n\n\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#control-structures-1",
    "href": "lectures/lec_02_presentation.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n\n&gt; Question: What do you think each of the above does?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#indentation",
    "href": "lectures/lec_02_presentation.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n\n\n\n\n\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#conditional-statements-1",
    "href": "lectures/lec_02_presentation.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n\n\n\n\n\n\n\nYou can use the and and or operators to combine multiple conditions."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#if-statements",
    "href": "lectures/lec_02_presentation.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThe condition is True!\nThis will always be printed!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThis will always be printed!\n\n\n\n\n\n\n\n\n\n\nWriting if condition: is equivalent to if condition == True:"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#else-statements",
    "href": "lectures/lec_02_presentation.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is True!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is False!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#elif-statements",
    "href": "lectures/lec_02_presentation.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is greater than 10!\n\n\n\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is equal to 10!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#comparisons-and-conditional-statements",
    "href": "lectures/lec_02_presentation.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\n\n\nYou are the chosen one still visiting school!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#conditional-logic-task",
    "href": "lectures/lec_02_presentation.html#conditional-logic-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Logic Task",
    "text": "Conditional Logic Task\n&gt; Task: Create a grade classifier:\n\n# Given a numerical score, classify it into letter grades\nscore = 87  # You can test with different values\n\n# Your task: Create if/elif/else statements that assign letter grades:\n# 90-100: \"A\"\n# 80-89: \"B\"\n# 70-79: \"C\"\n# 60-69: \"D\"\n# Below 60: \"F\"\n# Also handle invalid scores (negative or &gt; 100)\n\n# Your code here\n\nprint(f\"Score: {score}, Grade: {grade}\")"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#loops-1",
    "href": "lectures/lec_02_presentation.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n\n\n\n\n\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#for-loops",
    "href": "lectures/lec_02_presentation.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n\n\n0\n2\n4\n6\n8\n\n\n\n\n\n\n\n\n\nThe range() function can take up to three arguments: start, stop, and step."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#for-loops-with-strings",
    "href": "lectures/lec_02_presentation.html#for-loops-with-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with Strings",
    "text": "for-loops with Strings\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\n\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#while-loops",
    "href": "lectures/lec_02_presentation.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n\n\n0\n1\n2\n3\n4\n\n\n\n&gt; Question: What could be an issue with poorly written while-loops?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#while-true",
    "href": "lectures/lec_02_presentation.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#importance-of-control-flow",
    "href": "lectures/lec_02_presentation.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n\n\n\n\n\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#loop-task",
    "href": "lectures/lec_02_presentation.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Task: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100 excluding both 0 and 100.\nnumber = 0\n# Your code here\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#interesting-books-to-start",
    "href": "lectures/lec_02_presentation.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNothing new here, but these are still great books to start with!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_04_dimensions.html",
    "href": "lectures/lec_04_dimensions.html",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Functions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n. . .\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\nWelcome to this lecture, Students!\n\n\n\n\n\n\nScope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n. . .\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?\n\n\n\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n. . .\n\nclass Lectures:\n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\nLecture '4. Data in more than one dimension' is 90 minutes long!",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#functions",
    "href": "lectures/lec_04_dimensions.html#functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Functions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n. . .\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\nWelcome to this lecture, Students!",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#scope",
    "href": "lectures/lec_04_dimensions.html#scope",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Scope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n. . .\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#classes",
    "href": "lectures/lec_04_dimensions.html#classes",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Classes are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n. . .\n\nclass Lectures:\n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\nLecture '4. Data in more than one dimension' is 90 minutes long!",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#what-are-tuples",
    "href": "lectures/lec_04_dimensions.html#what-are-tuples",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Tuples?",
    "text": "What are Tuples?\n\nTuples are ordered collections of items\nThey are immutable (cannot be changed after creation)\nHelp in storing multiple items in a single variable\nCreated using the tuple() function or the () syntax\n\n. . .\n\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n\n(1, 2, 3, 4, 5)",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#tuple-operations",
    "href": "lectures/lec_04_dimensions.html#tuple-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Operations",
    "text": "Tuple Operations\n\nTuples support the same operations as strings\nWe can use indexing and slicing to access elements\nWe can use the + operator to concatenate tuples\nWe can use the * operator to repeat a tuple\n\n. . .\n&gt;Question: What will the following code print?\n\nmy_tuple = (1, 2, 3)\nprint(my_tuple[1:3])\nprint(my_tuple + (4, 5, 6))\nprint(my_tuple * 2)\n\n(2, 3)\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3)",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#tuple-methods",
    "href": "lectures/lec_04_dimensions.html#tuple-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Methods",
    "text": "Tuple Methods\n\nTuples support the following methods:\n\ncount(x): Returns the number of times x appears in the tuple\nindex(x): Returns the index of the first occurrence of x\n\n\n. . .\n&gt;Question: What will this code print?\n\nmy_tuple = (1, 2, 3, 2, 4, 2)\nprint(my_tuple.count(2))\nprint(my_tuple.index(3))\n\n3\n2",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#tuple-data-types",
    "href": "lectures/lec_04_dimensions.html#tuple-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Data Types",
    "text": "Tuple Data Types\n\nTuples can contain elements of different data types\n\n\nmy_tuple = (\"Peter\", 25, \"Hamburg\")\nprint(my_tuple)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n\n# This works as well\nmy_tuple = \"Peter\", 25, \"Hamburg\"\nprint(my_tuple)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n\n\n\n\n\n\nWe can also create tuples by listing the elements separated by commas.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#tuples-from-functions",
    "href": "lectures/lec_04_dimensions.html#tuples-from-functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuples from Functions",
    "text": "Tuples from Functions\n\nFunctions can return tuples\nThis is useful if we want to return multiple values from a function\n\n. . .\n\ndef get_student_info(name, age, city):\n    return name, age, city\n\nstudent_info = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(student_info)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n&gt;Question: How would you access the age from the tuple?",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#tuple-unpacking",
    "href": "lectures/lec_04_dimensions.html#tuple-unpacking",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Unpacking",
    "text": "Tuple Unpacking\n\nAllows us to assign the elements of a tuple to variables\nThe number of variables must match the number of elements\nUse the * operator to assign the remaining elements to a variable\n\n. . .\n\ndef get_student_info(name, age, city):\n    return name, age, city\nname, *rest = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(f\"Name: {name}\")\nprint(f\"Other info: {rest}\")\n\nName: Peter\nOther info: [25, 'Hamburg']\n\n\n. . .\n\n\n\n\n\n\nThe output is positional, so we have to be careful with the order of the variables.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#what-are-lists",
    "href": "lectures/lec_04_dimensions.html#what-are-lists",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are ordered collections of items\nThey are mutable (can be changed after creation)\nCreated using the list() function or the [] syntax\nThey support the same operations as strings and tuples\nHave much more methods and are more versatile than tuples\n\n. . .\n\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\n\n[1, 2, 3, 4, 5]\n\n\n. . .\n&gt;Question: Any idea why lists support more methods?",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#list-methods",
    "href": "lectures/lec_04_dimensions.html#list-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "List Methods",
    "text": "List Methods\n\nCommon methods for lists:\n\ncount(x): Returns the number of times x appears in the list\nappend(x): Adds an element x to the end of the list\ninsert(i, x): Inserts an element x at index i\nremove(x): Removes the first occurrence of element x\nindex(x): Returns the index of the first occurrence of x\npop([i]): Removes the element at index i and returns it\nsort(): Sorts the list in ascending order\nreverse(): Reverses the list",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#lists-in-action",
    "href": "lectures/lec_04_dimensions.html#lists-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Lists in Action",
    "text": "Lists in Action\n&gt;Task: Solve the following problem using lists:\n\n# Imagine the following shoppping list for this weekend\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\n\n. . .\n\nFirst, add some apples to the list for a healthy option\nNext, remove the cider as you already have some at home\nSort all items in the list alphabetically\nPrint each item of the list on a new line\n\n. . .\n\n\n\n\n\n\nYou can use the methods and loops we learned so far to solve the problem.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#what-are-sets",
    "href": "lectures/lec_04_dimensions.html#what-are-sets",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Sets?",
    "text": "What are Sets?\n\nSets are unordered collections of unique elements\nThey are mutable (can be changed after creation)\nCreated using the set() function or the {} syntax\nSupports + and * operations like lists and tuples\nUnlike lists and tuples, sets do not support indexing\n\n. . .\n\nmy_set = {1, 2, 2, 5, 5}\nprint(my_set)\n\n{1, 2, 5}",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#set-methods",
    "href": "lectures/lec_04_dimensions.html#set-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Methods",
    "text": "Set Methods\n\nCommon methods for sets:\n\nadd(x): Adds an element x to the set\nremove(x): Removes an element x from the set\ndiscard(x): Removes an element x from the set if it is present\npop(): Removes and returns an arbitrary element from the set\nupdate(other): Adds all elements from other to the set",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#set-theory",
    "href": "lectures/lec_04_dimensions.html#set-theory",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Theory",
    "text": "Set Theory\n\nAdditional methods are derived from set theory\n\nunion(other): New set with elements from both sets\nintersection(other): New set with common elements\nisdisjoint(other): True if no elements in common\nissubset(other): True if subset of other\n\n\n. . .\n\n\n\n\n\n\nThere are more methods for sets! If you are working intensively with sets, keep that in mind.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#sets-in-action",
    "href": "lectures/lec_04_dimensions.html#sets-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Sets in Action",
    "text": "Sets in Action\n&gt;Task: Solve the following problem using sets:\n\n# You have a list of friends from two different groups\nfriends_group_1 = [\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\"]\nfriends_group_2 = [ \"Smith\", \"Apoc\", \"Cypher\", \"Morpheus\"]\n\n. . .\n\nFirst, find the mutual friends in both groups\nThen create a new set of all friends from both groups\nCount the number of friends in total\nPrint each item of the set on a new line\n\n. . .\n\n\n\n\n\n\nNotice, there is a small error in the given code that you have to fix.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#what-are-dictionaries",
    "href": "lectures/lec_04_dimensions.html#what-are-dictionaries",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Dictionaries?",
    "text": "What are Dictionaries?\n\nDictionaries are unordered collections of key-value pairs\nThey are mutable (can be changed after creation)\nKeys must be unique and immutable\nValues can be of any type\nCreated using the dict() function or the {} syntax\nAs sets we cannot access them by index\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i)\n\n{'name': 'Tobias', 'age': 30, 'city': 'Hamburg'}",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#key-value-pairs",
    "href": "lectures/lec_04_dimensions.html#key-value-pairs",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Key-Value Pairs",
    "text": "Key-Value Pairs\n\nWe can access them by their keys, though!\nYou can think of them as a set of key-value pairs\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i[\"name\"])\n\nTobias\n\n\n. . .\n\n\n\n\n\n\nNote, how we can use the [] operator to access the value of a key?",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#dictionary-operations",
    "href": "lectures/lec_04_dimensions.html#dictionary-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionary Operations",
    "text": "Dictionary Operations\n\nCommon operations and methods:\nin operation to check if a key is in the dictionary\nfor loop to iterate over the dictionary\nkeys() method to return a view of the dictionary’s keys\nvalues() method to return a view of the dictionary’s values\npop(key[, default]) to remove a key and return its value",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#dictionaries-in-action",
    "href": "lectures/lec_04_dimensions.html#dictionaries-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionaries in Action",
    "text": "Dictionaries in Action\n&gt;Task: Solve the following problem using dictionaries:\n\n# Create a dictionary with the following information about yourself: name, age, city\ni_am = {}\n\n. . .\n\nAdd your favorite color and food to the dictionary\nRemove the city from the dictionary\nPrint your name and age in a formatted sentence",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#comparison-between-data-types",
    "href": "lectures/lec_04_dimensions.html#comparison-between-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comparison between Data Types",
    "text": "Comparison between Data Types\n\nTuple: Immutable, ordered, duplicates allowed\nList: Mutable, ordered, duplicates allowed\nSet: Mutable, unordered, no duplicates\nDictionary: Mutable, unordered, no duplicates, key-value pairs\n\n. . .\n\n\n\n\n\n\nThis impacts your code, the operations you can perform and the speed of your program. Thus, it makes sense to understand the differences and choose the right data type for the task.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#when-to-use-which",
    "href": "lectures/lec_04_dimensions.html#when-to-use-which",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "When to use which?",
    "text": "When to use which?\n\nTuples: store a collection of items that should not be changed\nLists: store a collection of items that should be changed\nSets: store a collection of items that should not be changed and duplicates are not allowed\nDictionaries: store a collection of items that should be changed, duplicates are not allowed and require key-value pairs\n\n. . .\n\n\n\n\n\n\nYou can convert between the data types using tuple(), list(), set() and dict(). Note, that this is not always possible, e.g. you cannot convert a list to a dictionary without specifying a key.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#speed-differences",
    "href": "lectures/lec_04_dimensions.html#speed-differences",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Speed Differences",
    "text": "Speed Differences\n\nLists are the most versatile, but slowest\nTuples are generally faster than lists\nSets are generally faster than lists and tuples\nDictionaries depend, but are generally faster than lists and tuples\n\n\n\nCode\nimport timeit\n\n# Number of elements in each data structure\nn = 10000000\n\n# Setup for each data structure, including the test function\nsetup_template = \"\"\"\ndef test_membership(data_structure, element):\n    return element in data_structure\ndata = {data_structure}\n\"\"\"\n\nsetups = {\n    'Tuple': setup_template.format(data_structure=f\"tuple(range({n}))\"),\n    'List': setup_template.format(data_structure=f\"list(range({n}))\"),\n    'Set': setup_template.format(data_structure=f\"set(range({n}))\"),\n    'Dictionary': setup_template.format(data_structure=f\"{{i: i for i in range({n})}}\")\n}\n\n# Measure time for each data structure\nprint(f\"Time taken for a single membership test in {n} elements (in seconds):\")\nprint(\"-\" * 75)\nfor name, setup in setups.items():\n    stmt = f\"test_membership(data, {n-1})\"  # Test membership of the last element\n    time_taken = timeit.timeit(stmt, setup=setup, number=1)\n    print(f\"{name:&lt;10}: {time_taken:.8f}\")\nprint(\"-\" * 75)\nprint(\"Note, that theses values are machine dependent and just for illustration!\")\n\n\nTime taken for a single membership test in 10000000 elements (in seconds):\n---------------------------------------------------------------------------\nTuple     : 0.04582404\nList      : 0.04247979\nSet       : 0.00000271\nDictionary: 0.00000275\n---------------------------------------------------------------------------\nNote, that theses values are machine dependent and just for illustration!",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#comprehensions",
    "href": "lectures/lec_04_dimensions.html#comprehensions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nComprehensions provide a concise way to create data structures\n\nTuple comprehensions: (x for x in iterable)\nList comprehensions: [x for x in iterable]\nSet comprehensions: {x for x in iterable}\nDictionary comprehensions: {x: y for x, y in iterable}\n\n\n. . .\n\n\n\n\n\n\nThe iterable can be any object that can be iterated over, e.g. a list, tuple, set, dictionary, etc.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#iterables",
    "href": "lectures/lec_04_dimensions.html#iterables",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Iterables",
    "text": "Iterables\n\nWe have already introduced those!\nWe can use the for loop to iterate over an iterable\n\n. . .\n\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\nfor item in shopping_list:\n    print(item)\n\ncider\nbeer\nbread\nfrozen_pizza\n\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nfor key, value in who_am_i.items():\n    print(f\"{key}: {value}\")\n\nname: Tobias\nage: 30\ncity: Hamburg",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#nesting",
    "href": "lectures/lec_04_dimensions.html#nesting",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Nesting",
    "text": "Nesting\n\nWe can nest data structures within each other\nThis is useful if we want to store more complex data\n\n. . .\n\nnormal_list = [1, 2, 3, 4, 5]\nnested_list = [\"Hello, World!\", normal_list, (1,2)]\n\nprint(nested_list)\nprint(nested_list[2])\n\n['Hello, World!', [1, 2, 3, 4, 5], (1, 2)]\n(1, 2)\n\n\n. . .\n\n\n\n\n\n\nYou can also nest lists within lists within lists, etc.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#inputoutput",
    "href": "lectures/lec_04_dimensions.html#inputoutput",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Input/Output",
    "text": "Input/Output\n\nA common task in programming is to interact with users\nRemember the input() function from the first lecture?\nIt is a classical example of user input\nAn example of output is the print() function\n\n. . .\n\nname = input(\"Please enter your name: \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nThus, we have already worked with I/O in Python!",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#reading-and-writing-files",
    "href": "lectures/lec_04_dimensions.html#reading-and-writing-files",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Reading and Writing Files",
    "text": "Reading and Writing Files\n\nWe also need to interact with data\nFile handling in Python is quite simple:\n\nUse open(file_name, mode) to open a file\nModes: \"r\" (read), \"w\" (write), \"a\" (append)\n\nBasic operations:\n\nRead: file.read()\nWrite: file.write(content)\nClose: file.close()",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#file-handling-in-action",
    "href": "lectures/lec_04_dimensions.html#file-handling-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "File Handling in Action",
    "text": "File Handling in Action\n\nfile = open(\"hi.txt\", \"w\") # This creates a file called \"hi.txt\"\nfile.write(\"Hello, World!\") # This writes \"Hello, World!\" to the file\nfile.close() # This closes the file\nprint(\"File successfully written\")\n\nFile successfully written\n\n\n. . .\n&gt;Question: Any ideas how to read the file?\n. . .\n\nfile = open(\"hi.txt\", \"r\") # This opens the file \"hi.txt\"\ncontent = file.read() # This reads the content of the file\nfile.close() # This closes the file\nprint(content) # This prints the content of the file\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nClose files with file.close() to free up system resources and ensure data is properly saved.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#easier-file-handling-with-with",
    "href": "lectures/lec_04_dimensions.html#easier-file-handling-with-with",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Easier File Handling with with",
    "text": "Easier File Handling with with\n\nWe can also use the with statement to open a file\nThis ensures the file is properly closed after its handling finishes\nIt’s a good practice to use it when working with files\n\n\nwith open(\"hi_again.txt\", \"w\") as file:\n    file.write(\"Hello again, World!\")\n\nprint(\"File successfully written\")\n\nFile successfully written\n\n\n. . .\n&gt;Task: Open the file hi_again.txt and print its content using with",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#working-with-other-file-types",
    "href": "lectures/lec_04_dimensions.html#working-with-other-file-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Working with other file types",
    "text": "Working with other file types\n\nNaturally, we also want to work with other file types!\nReading and writing CSV files is a common tasks in data analysis\nExcel files are used in many applications and companies\nWe will see how to do this later in the course\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of tuples, sets, lists and dictionaries as well as some basic file handling. For now, just remember that advanced reading and writing is possible and that there are libraries that help with this.\n\n\n\nLiterature {.title}",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_dimensions.html#interesting-books",
    "href": "lectures/lec_04_dimensions.html#interesting-books",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "04 Dimensions",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_presentation.html#functions",
    "href": "lectures/lec_04_presentation.html#functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Functions",
    "text": "Functions\n\nFunctions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\n\n\nWelcome to this lecture, Students!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#scope",
    "href": "lectures/lec_04_presentation.html#scope",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Scope",
    "text": "Scope\n\nScope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#classes",
    "href": "lectures/lec_04_presentation.html#classes",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n\n\nclass Lectures:\n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\n\n\nLecture '4. Data in more than one dimension' is 90 minutes long!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-are-tuples",
    "href": "lectures/lec_04_presentation.html#what-are-tuples",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Tuples?",
    "text": "What are Tuples?\n\nTuples are ordered collections of items\nThey are immutable (cannot be changed after creation)\nHelp in storing multiple items in a single variable\nCreated using the tuple() function or the () syntax\n\n\n\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n\n\n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#tuple-operations",
    "href": "lectures/lec_04_presentation.html#tuple-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Operations",
    "text": "Tuple Operations\n\nTuples support the same operations as strings\nWe can use indexing and slicing to access elements\nWe can use the + operator to concatenate tuples\nWe can use the * operator to repeat a tuple\n\n\n&gt;Question: What will the following code print?\n\nmy_tuple = (1, 2, 3)\nprint(my_tuple[1:3])\nprint(my_tuple + (4, 5, 6))\nprint(my_tuple * 2)\n\n\n\n(2, 3)\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3)"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#tuple-methods",
    "href": "lectures/lec_04_presentation.html#tuple-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Methods",
    "text": "Tuple Methods\n\nTuples support the following methods:\n\ncount(x): Returns the number of times x appears in the tuple\nindex(x): Returns the index of the first occurrence of x\n\n\n\n&gt;Question: What will this code print?\n\nmy_tuple = (1, 2, 3, 2, 4, 2)\nprint(my_tuple.count(2))\nprint(my_tuple.index(3))\n\n\n\n3\n2"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#tuple-data-types",
    "href": "lectures/lec_04_presentation.html#tuple-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Data Types",
    "text": "Tuple Data Types\n\nTuples can contain elements of different data types\n\n\nmy_tuple = (\"Peter\", 25, \"Hamburg\")\nprint(my_tuple)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n# This works as well\nmy_tuple = \"Peter\", 25, \"Hamburg\"\nprint(my_tuple)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n\n\n\n\n\n\nWe can also create tuples by listing the elements separated by commas."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#tuples-from-functions",
    "href": "lectures/lec_04_presentation.html#tuples-from-functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuples from Functions",
    "text": "Tuples from Functions\n\nFunctions can return tuples\nThis is useful if we want to return multiple values from a function\n\n\n\ndef get_student_info(name, age, city):\n    return name, age, city\n\nstudent_info = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(student_info)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n&gt;Question: How would you access the age from the tuple?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#tuple-unpacking",
    "href": "lectures/lec_04_presentation.html#tuple-unpacking",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Unpacking",
    "text": "Tuple Unpacking\n\nAllows us to assign the elements of a tuple to variables\nThe number of variables must match the number of elements\nUse the * operator to assign the remaining elements to a variable\n\n\n\ndef get_student_info(name, age, city):\n    return name, age, city\nname, *rest = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(f\"Name: {name}\")\nprint(f\"Other info: {rest}\")\n\n\n\nName: Peter\nOther info: [25, 'Hamburg']\n\n\n\n\n\n\n\n\n\n\nThe output is positional, so we have to be careful with the order of the variables."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-are-lists",
    "href": "lectures/lec_04_presentation.html#what-are-lists",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are ordered collections of items\nThey are mutable (can be changed after creation)\nCreated using the list() function or the [] syntax\nThey support the same operations as strings and tuples\nHave much more methods and are more versatile than tuples\n\n\n\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\n\n\n\n[1, 2, 3, 4, 5]\n\n\n\n\n&gt;Question: Any idea why lists support more methods?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#list-methods",
    "href": "lectures/lec_04_presentation.html#list-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "List Methods",
    "text": "List Methods\n\nCommon methods for lists:\n\ncount(x): Returns the number of times x appears in the list\nappend(x): Adds an element x to the end of the list\ninsert(i, x): Inserts an element x at index i\nremove(x): Removes the first occurrence of element x\nindex(x): Returns the index of the first occurrence of x\npop([i]): Removes the element at index i and returns it\nsort(): Sorts the list in ascending order\nreverse(): Reverses the list"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lists-in-action",
    "href": "lectures/lec_04_presentation.html#lists-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Lists in Action",
    "text": "Lists in Action\n&gt;Task: Solve the following problem using lists:\n\n# Imagine the following shoppping list for this weekend\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\n\n\n\nFirst, add some apples to the list for a healthy option\nNext, remove the cider as you already have some at home\nSort all items in the list alphabetically\nPrint each item of the list on a new line\n\n\n\n\n\n\n\n\n\nYou can use the methods and loops we learned so far to solve the problem."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-are-sets",
    "href": "lectures/lec_04_presentation.html#what-are-sets",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Sets?",
    "text": "What are Sets?\n\nSets are unordered collections of unique elements\nThey are mutable (can be changed after creation)\nCreated using the set() function or the {} syntax\nSupports + and * operations like lists and tuples\nUnlike lists and tuples, sets do not support indexing\n\n\n\nmy_set = {1, 2, 2, 5, 5}\nprint(my_set)\n\n\n\n{1, 2, 5}"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#set-methods",
    "href": "lectures/lec_04_presentation.html#set-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Methods",
    "text": "Set Methods\n\nCommon methods for sets:\n\nadd(x): Adds an element x to the set\nremove(x): Removes an element x from the set\ndiscard(x): Removes an element x from the set if it is present\npop(): Removes and returns an arbitrary element from the set\nupdate(other): Adds all elements from other to the set"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#set-theory",
    "href": "lectures/lec_04_presentation.html#set-theory",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Theory",
    "text": "Set Theory\n\nAdditional methods are derived from set theory\n\nunion(other): New set with elements from both sets\nintersection(other): New set with common elements\nisdisjoint(other): True if no elements in common\nissubset(other): True if subset of other\n\n\n\n\n\n\n\n\n\nThere are more methods for sets! If you are working intensively with sets, keep that in mind."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#sets-in-action",
    "href": "lectures/lec_04_presentation.html#sets-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Sets in Action",
    "text": "Sets in Action\n&gt;Task: Solve the following problem using sets:\n\n# You have a list of friends from two different groups\nfriends_group_1 = [\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\"]\nfriends_group_2 = [ \"Smith\", \"Apoc\", \"Cypher\", \"Morpheus\"]\n\n\n\nFirst, find the mutual friends in both groups\nThen create a new set of all friends from both groups\nCount the number of friends in total\nPrint each item of the set on a new line\n\n\n\n\n\n\n\n\n\nNotice, there is a small error in the given code that you have to fix."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-are-dictionaries",
    "href": "lectures/lec_04_presentation.html#what-are-dictionaries",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Dictionaries?",
    "text": "What are Dictionaries?\n\nDictionaries are unordered collections of key-value pairs\nThey are mutable (can be changed after creation)\nKeys must be unique and immutable\nValues can be of any type\nCreated using the dict() function or the {} syntax\nAs sets we cannot access them by index\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i)\n\n\n\n{'name': 'Tobias', 'age': 30, 'city': 'Hamburg'}"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#key-value-pairs",
    "href": "lectures/lec_04_presentation.html#key-value-pairs",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Key-Value Pairs",
    "text": "Key-Value Pairs\n\nWe can access them by their keys, though!\nYou can think of them as a set of key-value pairs\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i[\"name\"])\n\n\n\nTobias\n\n\n\n\n\n\n\n\n\n\nNote, how we can use the [] operator to access the value of a key?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#dictionary-operations",
    "href": "lectures/lec_04_presentation.html#dictionary-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionary Operations",
    "text": "Dictionary Operations\n\nCommon operations and methods:\nin operation to check if a key is in the dictionary\nfor loop to iterate over the dictionary\nkeys() method to return a view of the dictionary’s keys\nvalues() method to return a view of the dictionary’s values\npop(key[, default]) to remove a key and return its value"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#dictionaries-in-action",
    "href": "lectures/lec_04_presentation.html#dictionaries-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionaries in Action",
    "text": "Dictionaries in Action\n&gt;Task: Solve the following problem using dictionaries:\n\n# Create a dictionary with the following information about yourself: name, age, city\ni_am = {}\n\n\n\nAdd your favorite color and food to the dictionary\nRemove the city from the dictionary\nPrint your name and age in a formatted sentence"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#comparison-between-data-types",
    "href": "lectures/lec_04_presentation.html#comparison-between-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comparison between Data Types",
    "text": "Comparison between Data Types\n\nTuple: Immutable, ordered, duplicates allowed\nList: Mutable, ordered, duplicates allowed\nSet: Mutable, unordered, no duplicates\nDictionary: Mutable, unordered, no duplicates, key-value pairs\n\n\n\n\n\n\n\n\nThis impacts your code, the operations you can perform and the speed of your program. Thus, it makes sense to understand the differences and choose the right data type for the task."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#when-to-use-which",
    "href": "lectures/lec_04_presentation.html#when-to-use-which",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "When to use which?",
    "text": "When to use which?\n\nTuples: store a collection of items that should not be changed\nLists: store a collection of items that should be changed\nSets: store a collection of items that should not be changed and duplicates are not allowed\nDictionaries: store a collection of items that should be changed, duplicates are not allowed and require key-value pairs\n\n\n\n\n\n\n\n\nYou can convert between the data types using tuple(), list(), set() and dict(). Note, that this is not always possible, e.g. you cannot convert a list to a dictionary without specifying a key."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#speed-differences",
    "href": "lectures/lec_04_presentation.html#speed-differences",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Speed Differences",
    "text": "Speed Differences\n\nLists are the most versatile, but slowest\nTuples are generally faster than lists\nSets are generally faster than lists and tuples\nDictionaries depend, but are generally faster than lists and tuples\n\n\n\nCode\nimport timeit\n\n# Number of elements in each data structure\nn = 10000000\n\n# Setup for each data structure, including the test function\nsetup_template = \"\"\"\ndef test_membership(data_structure, element):\n    return element in data_structure\ndata = {data_structure}\n\"\"\"\n\nsetups = {\n    'Tuple': setup_template.format(data_structure=f\"tuple(range({n}))\"),\n    'List': setup_template.format(data_structure=f\"list(range({n}))\"),\n    'Set': setup_template.format(data_structure=f\"set(range({n}))\"),\n    'Dictionary': setup_template.format(data_structure=f\"{{i: i for i in range({n})}}\")\n}\n\n# Measure time for each data structure\nprint(f\"Time taken for a single membership test in {n} elements (in seconds):\")\nprint(\"-\" * 75)\nfor name, setup in setups.items():\n    stmt = f\"test_membership(data, {n-1})\"  # Test membership of the last element\n    time_taken = timeit.timeit(stmt, setup=setup, number=1)\n    print(f\"{name:&lt;10}: {time_taken:.8f}\")\nprint(\"-\" * 75)\nprint(\"Note, that theses values are machine dependent and just for illustration!\")\n\n\n\n\nTime taken for a single membership test in 10000000 elements (in seconds):\n---------------------------------------------------------------------------\nTuple     : 0.04582404\nList      : 0.04247979\nSet       : 0.00000271\nDictionary: 0.00000275\n---------------------------------------------------------------------------\nNote, that theses values are machine dependent and just for illustration!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#comprehensions",
    "href": "lectures/lec_04_presentation.html#comprehensions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nComprehensions provide a concise way to create data structures\n\nTuple comprehensions: (x for x in iterable)\nList comprehensions: [x for x in iterable]\nSet comprehensions: {x for x in iterable}\nDictionary comprehensions: {x: y for x, y in iterable}\n\n\n\n\n\n\n\n\n\nThe iterable can be any object that can be iterated over, e.g. a list, tuple, set, dictionary, etc."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#iterables",
    "href": "lectures/lec_04_presentation.html#iterables",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Iterables",
    "text": "Iterables\n\nWe have already introduced those!\nWe can use the for loop to iterate over an iterable\n\n\n\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\nfor item in shopping_list:\n    print(item)\n\n\n\ncider\nbeer\nbread\nfrozen_pizza\n\n\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nfor key, value in who_am_i.items():\n    print(f\"{key}: {value}\")\n\n\n\nname: Tobias\nage: 30\ncity: Hamburg"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#nesting",
    "href": "lectures/lec_04_presentation.html#nesting",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Nesting",
    "text": "Nesting\n\nWe can nest data structures within each other\nThis is useful if we want to store more complex data\n\n\n\nnormal_list = [1, 2, 3, 4, 5]\nnested_list = [\"Hello, World!\", normal_list, (1,2)]\n\nprint(nested_list)\nprint(nested_list[2])\n\n\n\n['Hello, World!', [1, 2, 3, 4, 5], (1, 2)]\n(1, 2)\n\n\n\n\n\n\n\n\n\n\nYou can also nest lists within lists within lists, etc."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#inputoutput",
    "href": "lectures/lec_04_presentation.html#inputoutput",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Input/Output",
    "text": "Input/Output\n\nA common task in programming is to interact with users\nRemember the input() function from the first lecture?\nIt is a classical example of user input\nAn example of output is the print() function\n\n\n\nname = input(\"Please enter your name: \")\nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nThus, we have already worked with I/O in Python!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#reading-and-writing-files",
    "href": "lectures/lec_04_presentation.html#reading-and-writing-files",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Reading and Writing Files",
    "text": "Reading and Writing Files\n\nWe also need to interact with data\nFile handling in Python is quite simple:\n\nUse open(file_name, mode) to open a file\nModes: \"r\" (read), \"w\" (write), \"a\" (append)\n\nBasic operations:\n\nRead: file.read()\nWrite: file.write(content)\nClose: file.close()"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#file-handling-in-action",
    "href": "lectures/lec_04_presentation.html#file-handling-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "File Handling in Action",
    "text": "File Handling in Action\n\nfile = open(\"hi.txt\", \"w\") # This creates a file called \"hi.txt\"\nfile.write(\"Hello, World!\") # This writes \"Hello, World!\" to the file\nfile.close() # This closes the file\nprint(\"File successfully written\")\n\n\n\nFile successfully written\n\n\n\n&gt;Question: Any ideas how to read the file?\n\n\n\nfile = open(\"hi.txt\", \"r\") # This opens the file \"hi.txt\"\ncontent = file.read() # This reads the content of the file\nfile.close() # This closes the file\nprint(content) # This prints the content of the file\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\n\nClose files with file.close() to free up system resources and ensure data is properly saved."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#easier-file-handling-with-with",
    "href": "lectures/lec_04_presentation.html#easier-file-handling-with-with",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Easier File Handling with with",
    "text": "Easier File Handling with with\n\nWe can also use the with statement to open a file\nThis ensures the file is properly closed after its handling finishes\nIt’s a good practice to use it when working with files\n\n\nwith open(\"hi_again.txt\", \"w\") as file:\n    file.write(\"Hello again, World!\")\n\nprint(\"File successfully written\")\n\n\n\nFile successfully written\n\n\n\n&gt;Task: Open the file hi_again.txt and print its content using with"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#working-with-other-file-types",
    "href": "lectures/lec_04_presentation.html#working-with-other-file-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Working with other file types",
    "text": "Working with other file types\n\nNaturally, we also want to work with other file types!\nReading and writing CSV files is a common tasks in data analysis\nExcel files are used in many applications and companies\nWe will see how to do this later in the course\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of tuples, sets, lists and dictionaries as well as some basic file handling. For now, just remember that advanced reading and writing is possible and that there are libraries that help with this.\n\n\n\nLiterature {.title}"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#interesting-books",
    "href": "lectures/lec_04_presentation.html#interesting-books",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_06_modules.html",
    "href": "lectures/lec_06_modules.html",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Exceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n. . .\n\nx = int(\"Hello, World!\")\n\n. . .\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’\n\n\n\n\ntry-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n. . .\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept Exception as e:\n    # Code to handle any other exceptions\n    # ...\n\n\n\n\nWe can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n. . .\n\nraise ValueError(\"This is a custom error message\")\n\n. . .\n\n\n\n\n\n\nThe type if raised exception has to exist or you have to create a custom error type before.\n\n\n\n\n\n\n\nAssertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n. . .\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n. . .\nQuestion: Will this raise an AssertionError?\n\n\n\n\nDebugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n. . .\n\n\n\n\n\n\nThat’s why IDEs are so helpful in coding.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#exceptions-and-error-handling",
    "href": "lectures/lec_06_modules.html#exceptions-and-error-handling",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Exceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n. . .\n\nx = int(\"Hello, World!\")\n\n. . .\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#try-except-blocks",
    "href": "lectures/lec_06_modules.html#try-except-blocks",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "try-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n. . .\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept Exception as e:\n    # Code to handle any other exceptions\n    # ...",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#raising-exceptions",
    "href": "lectures/lec_06_modules.html#raising-exceptions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "We can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n. . .\n\nraise ValueError(\"This is a custom error message\")\n\n. . .\n\n\n\n\n\n\nThe type if raised exception has to exist or you have to create a custom error type before.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#assertions",
    "href": "lectures/lec_06_modules.html#assertions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Assertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n. . .\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n. . .\nQuestion: Will this raise an AssertionError?",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#debugging",
    "href": "lectures/lec_06_modules.html#debugging",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Debugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n. . .\n\n\n\n\n\n\nThat’s why IDEs are so helpful in coding.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#why-modules",
    "href": "lectures/lec_06_modules.html#why-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Modules?",
    "text": "Why Modules?\n\nModular programming breaks large tasks into smaller subtasks\nModules are like building blocks for larger applications\nIndividual modules can be combined to create a complete program\nThis approach enhances code organization and reusability",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#creating-modules",
    "href": "lectures/lec_06_modules.html#creating-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Creating Modules",
    "text": "Creating Modules\n\nModules are simply .py files containing Python code\nThey can define functions, classes, and variables\nThey can be imported into other Python scripts\n\n\n# The script new_module.py is in the same directory as this script\nimport lec_06_new_module as new_module # Here we import the module\nnew_module.my_function() # Here we call the function from the module\n\nHello from my_function!",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#importing-functions-from-modules",
    "href": "lectures/lec_06_modules.html#importing-functions-from-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing functions from modules",
    "text": "Importing functions from modules\n\nWe can also import specific functions from a module\nThis is useful if we only need a few functions from a module\nAnalogously, we can import classes or variables from a module\n\n. . .\n\n# Multiple imports from a module are possible as well!\nfrom lec_06_new_module import another_function, yet_another_function\nanother_function()\nyet_another_function()\n\nHello from another_function!\nHello from yet_another_function!\n\n\n. . .\n\n\n\n\n\n\nThis is a good way to avoid importing too much from a module. In addition, we don’t need to use the module name before the function name when we use the functions from the module.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#built-in-modules",
    "href": "lectures/lec_06_modules.html#built-in-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Built-in Modules",
    "text": "Built-in Modules\nPython comes with many built-in modules. Common ones include:\n\n\n\nModule\nDescription\n\n\n\n\nmath\nDifferent mathematical functions\n\n\nrandom\nRandom number generation\n\n\ndatetime\nDate and time manipulation\n\n\nos\nOperating system interaction\n\n\ncsv\nReading and writing CSV files\n\n\nre\nRegular expression operations",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#importing-from-the-standard-library",
    "href": "lectures/lec_06_modules.html#importing-from-the-standard-library",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing from the Standard Library",
    "text": "Importing from the Standard Library\nTask: Use Python’s math module to calculate the area of a circle.\n\n# Import the `math` module.\n# Define a function named `calculate_area` that takes the radius `r` as an argument.\n# Inside the function, use the `math.pi` constant to get the value of π.\n# Calculate the area in the function and return it.\n\n# Your code here\n\nassert calculate_area(5) == 78.53981633974483\n\n. . .\n\n\n\n\n\n\nNote, how assertations can be used to check if a function works correctly.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#random-numbers",
    "href": "lectures/lec_06_modules.html#random-numbers",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers",
    "text": "Random Numbers\nThe random module provides functions for random numbers\n\nrandom.random(): random float between 0 and 1\nrandom.uniform(a, b): random float between a and b\nrandom.randint(a, b): random integer between a and b\nrandom.choice(list): random element from a list\nrandom.shuffle(list): shuffle a list\n\n\n\n\n\n\n\nThere are many more functions in the random module. Use the help() function to get more information about a module or function.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#random-numbers-in-action",
    "href": "lectures/lec_06_modules.html#random-numbers-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers in Action",
    "text": "Random Numbers in Action\nTask: Time for a task! Import the random module and create a small number guessing game with the following requirements:\n\n# Generate a random integer between 1 and 10 using randint().\n# Ask the user to guess the number with input().\n# Print whether the guess was correct.\n# Give a hint if the guess was too high or too low.\n# Repeat the game until the user guesses the number.\n\n# Your code here\n\n. . .\n\n\n\n\n\n\nRemember, that the input function always returns a string!",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#os-module",
    "href": "lectures/lec_06_modules.html#os-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS Module",
    "text": "OS Module\n\nThe os module provides functions to interact with the OS\nos.listdir(path): list all files and directories in a directory\nos.path.isfile(path): check if a path is a file\nos.path.exists(path): check if a path exists\nos.makedirs(path): create a directory\n\n. . .\n\n\n\n\n\n\nThese can be quite useful for file handling. The os module contains many more functions, e.g. for changing the current working directory, for renaming and moving files, etc.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#csv-module",
    "href": "lectures/lec_06_modules.html#csv-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "CSV Module",
    "text": "CSV Module\n\nComma-Separated Values files are used to store tabular data\nWrite: csv.writer(file)\nRead: csv.reader(file)\n\n. . .\n\nimport csv # Import the csv module\n\nwith open('secret_message.csv', 'w') as file: # Open the file in write mode\n    writer = csv.writer(file) # Create a writer object\n    writer.writerow(['Entry', 'Message']) # Write the header\n    writer.writerow(['1', 'Do not open the file']) # Write the first row\n    writer.writerow(['2', 'This is a secret message']) # Write the second row\n\n. . .\nTask: Copy the code and run it. Do you have a new file?",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#os-and-csv-module-in-action",
    "href": "lectures/lec_06_modules.html#os-and-csv-module-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS and CSV Module in Action",
    "text": "OS and CSV Module in Action\nTask: Time for another task! Do the following:\n\n# First, check if a directory called `module_directory` exists.\n# If it does not, create it.\n# Then, list all files in the current directory and save them in a CSV file called `current_files.csv` in the new `module_directory`.\n\nimport os\nif not os.path.exists('module_directory'):\n    pass\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#what-are-regular-expressions",
    "href": "lectures/lec_06_modules.html#what-are-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Regular Expressions?",
    "text": "What are Regular Expressions?\n\nRegular expressions are a way to search for patterns in text\nThey are a useful tool for string manipulation\nWe can use the re module to work with regular expressions\n\n. . .\n\nimport re\npattern = r'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(re.search(pattern, string)) # This will search for the pattern in the string\n\n&lt;re.Match object; span=(7, 12), match='World'&gt;\n\n\n. . .\n\n\n\n\n\n\nSo far, we could also have achieved this with the find method of a string.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#why-regular-expressions",
    "href": "lectures/lec_06_modules.html#why-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Regular Expressions?",
    "text": "Why Regular Expressions?\n\nimport re\npattern = 'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(string.find(pattern)) # No regular expressions here!\n\n7\n\n\n. . .\n\nBut regular expressions are more powerful and flexible\nThey have special characters that allow for complex patterns\nThey are widely used in text processing and web scraping",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#using-regular-expressions",
    "href": "lectures/lec_06_modules.html#using-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Using Regular Expressions",
    "text": "Using Regular Expressions\n\nre.search(pat, str): search for a pattern in a string\nre.findall(pat, str): find all occurrences of a pattern\nre.fullmatch(pat, str): check if entire string matches pattern\nre.sub(pat, repl, str): replace a pattern in a string\nre.split(pat, str): split a string by a pattern\n\n. . .\n\n\n\n\n\n\nAs always, there is more. But these are a good foundation to build upon.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#regular-expression-in-action",
    "href": "lectures/lec_06_modules.html#regular-expression-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Regular Expression in Action",
    "text": "Regular Expression in Action\nTask: Replace all occurences of Python by “SECRET”.\n\nimport re\nstring = \"\"\"\nPython is a programming language.\nPython is also a snake.\nMonty Python was a theater group.\n\"\"\"\n# Your code here\n\n. . .\n\n\n\n\n\n\nRegular expressions are even more powerful when combined with special characters.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#special-characters-i",
    "href": "lectures/lec_06_modules.html#special-characters-i",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters I",
    "text": "Special Characters I\n\n. matches any character\n* matches zero or more of the preceding element\n+ matches one or more of the preceding element\n? matches zero or one of the preceding element\n[] matches any character in the brackets\n| matches either the left or the right side\n\\d matches any digit\n\\w matches any word character (alphanumeric and underscore)\n\\s matches any whitespace character",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#special-characters-ii",
    "href": "lectures/lec_06_modules.html#special-characters-ii",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters II",
    "text": "Special Characters II\n\nThere are many more special characters in regular expressions\nIn order to keep things simple, we will not cover them here\n\n. . .\n\nimport re\nprint(re.findall(r'\\d{3}-\\d{2}-\\d{4}', 'Here is a phone number: 123-45-6789.'))\n\n['123-45-6789']\n\n\n. . .\n\n\n\n\n\n\nIt can be quite complicated to get the hang of these special characters, especially at the beginning. Gladly, there are tools like regexr.com that can help with building the right pattern. Apart from that, help(re) in the terminal can also be very helpful.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#advanced-regular-expressions-in-action",
    "href": "lectures/lec_06_modules.html#advanced-regular-expressions-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Advanced Regular Expressions in Action",
    "text": "Advanced Regular Expressions in Action\nTask: Use regular expressions to extract all dates from the text.\n\ndates = \"\"\"\nOn 07-04-1776, the United States declared its independence. Many years later,\non 11-09-1989, the Berlin Wall fell. In more recent history, the COVID-19\npandemic was declared a global emergency on 04-11-2020.\n\"\"\"\n# Try to find all dates in the above text with findall()\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#what-are-packages",
    "href": "lectures/lec_06_modules.html#what-are-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Packages?",
    "text": "What are Packages?\n\nPackages are esentially collections of modules\nThey can contain multiple modules, subpackages, and data files\nMany packages are available in the Python Package Index (PyPI)\nYou don’t have to invent the wheel yourself\nA lot of functionality is already implemented by others!",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#installing-packages",
    "href": "lectures/lec_06_modules.html#installing-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nPackages are installed in the shell\nUse uv add &lt;package_name&gt; to install a specific package\nAfterward you can import from the package in your Python scripts\n\n. . .",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#packages-in-action",
    "href": "lectures/lec_06_modules.html#packages-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Packages in Action",
    "text": "Packages in Action\nTask: Install the pandas and numpy packages, which are commonly used for data analysis. We will use them together next week!\n. . .\nuv add pandas numpy\n. . .\n\n\n\n\n\n\nIf you install packages like this, you can use the shell to do so! Alternatively, you can use uv add &lt;package_name&gt; in the Python terminal.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#virtual-environments",
    "href": "lectures/lec_06_modules.html#virtual-environments",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Virtual Environments",
    "text": "Virtual Environments\n\nVirtual environments are used to manage dependencies\nThey allow you to have different environments for projects\nThey can be created using the venv module\nThis becomes important if you work on several projects at once\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have completed the first step into data science in Python. Next week, we can use this new knowledge to start to work with some tabular data and matrices.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_modules.html#interesting-books",
    "href": "lectures/lec_06_modules.html#interesting-books",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "06 Modules",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_presentation.html#exceptions-and-error-handling",
    "href": "lectures/lec_06_presentation.html#exceptions-and-error-handling",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Exceptions and Error Handling",
    "text": "Exceptions and Error Handling\n\nExceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n\n\nx = int(\"Hello, World!\")\n\n\n\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#try-except-blocks",
    "href": "lectures/lec_06_presentation.html#try-except-blocks",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Try-Except Blocks",
    "text": "Try-Except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept Exception as e:\n    # Code to handle any other exceptions\n    # ..."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#raising-exceptions",
    "href": "lectures/lec_06_presentation.html#raising-exceptions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n\n\nraise ValueError(\"This is a custom error message\")\n\n\n\n\n\n\n\n\n\nThe type if raised exception has to exist or you have to create a custom error type before."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#assertions",
    "href": "lectures/lec_06_presentation.html#assertions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Assertions",
    "text": "Assertions\n\nAssertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n\n\nQuestion: Will this raise an AssertionError?"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#debugging",
    "href": "lectures/lec_06_presentation.html#debugging",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Debugging",
    "text": "Debugging\n\nDebugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n\n\n\n\n\n\n\nThat’s why IDEs are so helpful in coding."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#why-modules",
    "href": "lectures/lec_06_presentation.html#why-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Modules?",
    "text": "Why Modules?\n\nModular programming breaks large tasks into smaller subtasks\nModules are like building blocks for larger applications\nIndividual modules can be combined to create a complete program\nThis approach enhances code organization and reusability"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#creating-modules",
    "href": "lectures/lec_06_presentation.html#creating-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Creating Modules",
    "text": "Creating Modules\n\nModules are simply .py files containing Python code\nThey can define functions, classes, and variables\nThey can be imported into other Python scripts\n\n\n# The script new_module.py is in the same directory as this script\nimport lec_06_new_module as new_module # Here we import the module\nnew_module.my_function() # Here we call the function from the module\n\n\n\nHello from my_function!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#importing-functions-from-modules",
    "href": "lectures/lec_06_presentation.html#importing-functions-from-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing functions from modules",
    "text": "Importing functions from modules\n\nWe can also import specific functions from a module\nThis is useful if we only need a few functions from a module\nAnalogously, we can import classes or variables from a module\n\n\n\n# Multiple imports from a module are possible as well!\nfrom lec_06_new_module import another_function, yet_another_function\nanother_function()\nyet_another_function()\n\n\n\nHello from another_function!\nHello from yet_another_function!\n\n\n\n\n\n\n\n\n\n\nThis is a good way to avoid importing too much from a module. In addition, we don’t need to use the module name before the function name when we use the functions from the module."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#built-in-modules",
    "href": "lectures/lec_06_presentation.html#built-in-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Built-in Modules",
    "text": "Built-in Modules\nPython comes with many built-in modules. Common ones include:\n\n\n\nModule\nDescription\n\n\n\n\nmath\nDifferent mathematical functions\n\n\nrandom\nRandom number generation\n\n\ndatetime\nDate and time manipulation\n\n\nos\nOperating system interaction\n\n\ncsv\nReading and writing CSV files\n\n\nre\nRegular expression operations"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#importing-from-the-standard-library",
    "href": "lectures/lec_06_presentation.html#importing-from-the-standard-library",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing from the Standard Library",
    "text": "Importing from the Standard Library\nTask: Use Python’s math module to calculate the area of a circle.\n\n# Import the `math` module.\n# Define a function named `calculate_area` that takes the radius `r` as an argument.\n# Inside the function, use the `math.pi` constant to get the value of π.\n# Calculate the area in the function and return it.\n\n# Your code here\n\nassert calculate_area(5) == 78.53981633974483\n\n\n\n\n\n\n\n\nNote, how assertations can be used to check if a function works correctly."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#random-numbers",
    "href": "lectures/lec_06_presentation.html#random-numbers",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers",
    "text": "Random Numbers\nThe random module provides functions for random numbers\n\nrandom.random(): random float between 0 and 1\nrandom.uniform(a, b): random float between a and b\nrandom.randint(a, b): random integer between a and b\nrandom.choice(list): random element from a list\nrandom.shuffle(list): shuffle a list\n\n\n\n\n\n\n\nThere are many more functions in the random module. Use the help() function to get more information about a module or function."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#random-numbers-in-action",
    "href": "lectures/lec_06_presentation.html#random-numbers-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers in Action",
    "text": "Random Numbers in Action\nTask: Time for a task! Import the random module and create a small number guessing game with the following requirements:\n\n# Generate a random integer between 1 and 10 using randint().\n# Ask the user to guess the number with input().\n# Print whether the guess was correct.\n# Give a hint if the guess was too high or too low.\n# Repeat the game until the user guesses the number.\n\n# Your code here\n\n\n\n\n\n\n\n\nRemember, that the input function always returns a string!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#os-module",
    "href": "lectures/lec_06_presentation.html#os-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS Module",
    "text": "OS Module\n\nThe os module provides functions to interact with the OS\nos.listdir(path): list all files and directories in a directory\nos.path.isfile(path): check if a path is a file\nos.path.exists(path): check if a path exists\nos.makedirs(path): create a directory\n\n\n\n\n\n\n\n\nThese can be quite useful for file handling. The os module contains many more functions, e.g. for changing the current working directory, for renaming and moving files, etc."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#csv-module",
    "href": "lectures/lec_06_presentation.html#csv-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "CSV Module",
    "text": "CSV Module\n\nComma-Separated Values files are used to store tabular data\nWrite: csv.writer(file)\nRead: csv.reader(file)\n\n\n\nimport csv # Import the csv module\n\nwith open('secret_message.csv', 'w') as file: # Open the file in write mode\n    writer = csv.writer(file) # Create a writer object\n    writer.writerow(['Entry', 'Message']) # Write the header\n    writer.writerow(['1', 'Do not open the file']) # Write the first row\n    writer.writerow(['2', 'This is a secret message']) # Write the second row\n\n\n\nTask: Copy the code and run it. Do you have a new file?"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#os-and-csv-module-in-action",
    "href": "lectures/lec_06_presentation.html#os-and-csv-module-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS and CSV Module in Action",
    "text": "OS and CSV Module in Action\nTask: Time for another task! Do the following:\n\n# First, check if a directory called `module_directory` exists.\n# If it does not, create it.\n# Then, list all files in the current directory and save them in a CSV file called `current_files.csv` in the new `module_directory`.\n\nimport os\nif not os.path.exists('module_directory'):\n    pass\n# Your code here"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#what-are-regular-expressions",
    "href": "lectures/lec_06_presentation.html#what-are-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Regular Expressions?",
    "text": "What are Regular Expressions?\n\nRegular expressions are a way to search for patterns in text\nThey are a useful tool for string manipulation\nWe can use the re module to work with regular expressions\n\n\n\nimport re\npattern = r'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(re.search(pattern, string)) # This will search for the pattern in the string\n\n\n\n&lt;re.Match object; span=(7, 12), match='World'&gt;\n\n\n\n\n\n\n\n\n\n\nSo far, we could also have achieved this with the find method of a string."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#why-regular-expressions",
    "href": "lectures/lec_06_presentation.html#why-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Regular Expressions?",
    "text": "Why Regular Expressions?\n\nimport re\npattern = 'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(string.find(pattern)) # No regular expressions here!\n\n\n\n7\n\n\n\n\nBut regular expressions are more powerful and flexible\nThey have special characters that allow for complex patterns\nThey are widely used in text processing and web scraping"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#using-regular-expressions",
    "href": "lectures/lec_06_presentation.html#using-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Using Regular Expressions",
    "text": "Using Regular Expressions\n\nre.search(pat, str): search for a pattern in a string\nre.findall(pat, str): find all occurrences of a pattern\nre.fullmatch(pat, str): check if entire string matches pattern\nre.sub(pat, repl, str): replace a pattern in a string\nre.split(pat, str): split a string by a pattern\n\n\n\n\n\n\n\n\nAs always, there is more. But these are a good foundation to build upon."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#regular-expression-in-action",
    "href": "lectures/lec_06_presentation.html#regular-expression-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Regular Expression in Action",
    "text": "Regular Expression in Action\nTask: Replace all occurences of Python by “SECRET”.\n\nimport re\nstring = \"\"\"\nPython is a programming language.\nPython is also a snake.\nMonty Python was a theater group.\n\"\"\"\n# Your code here\n\n\n\n\n\n\n\n\nRegular expressions are even more powerful when combined with special characters."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#special-characters-i",
    "href": "lectures/lec_06_presentation.html#special-characters-i",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters I",
    "text": "Special Characters I\n\n. matches any character\n* matches zero or more of the preceding element\n+ matches one or more of the preceding element\n? matches zero or one of the preceding element\n[] matches any character in the brackets\n| matches either the left or the right side\n\\d matches any digit\n\\w matches any word character (alphanumeric and underscore)\n\\s matches any whitespace character"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#special-characters-ii",
    "href": "lectures/lec_06_presentation.html#special-characters-ii",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters II",
    "text": "Special Characters II\n\nThere are many more special characters in regular expressions\nIn order to keep things simple, we will not cover them here\n\n\n\nimport re\nprint(re.findall(r'\\d{3}-\\d{2}-\\d{4}', 'Here is a phone number: 123-45-6789.'))\n\n\n\n['123-45-6789']\n\n\n\n\n\n\n\n\n\n\nIt can be quite complicated to get the hang of these special characters, especially at the beginning. Gladly, there are tools like regexr.com that can help with building the right pattern. Apart from that, help(re) in the terminal can also be very helpful."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#advanced-regular-expressions-in-action",
    "href": "lectures/lec_06_presentation.html#advanced-regular-expressions-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Advanced Regular Expressions in Action",
    "text": "Advanced Regular Expressions in Action\nTask: Use regular expressions to extract all dates from the text.\n\ndates = \"\"\"\nOn 07-04-1776, the United States declared its independence. Many years later,\non 11-09-1989, the Berlin Wall fell. In more recent history, the COVID-19\npandemic was declared a global emergency on 04-11-2020.\n\"\"\"\n# Try to find all dates in the above text with findall()\n# Your code here"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#what-are-packages",
    "href": "lectures/lec_06_presentation.html#what-are-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Packages?",
    "text": "What are Packages?\n\nPackages are esentially collections of modules\nThey can contain multiple modules, subpackages, and data files\nMany packages are available in the Python Package Index (PyPI)\nYou don’t have to invent the wheel yourself\nA lot of functionality is already implemented by others!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#installing-packages",
    "href": "lectures/lec_06_presentation.html#installing-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nPackages are installed in the shell\nUse uv add &lt;package_name&gt; to install a specific package\nAfterward you can import from the package in your Python scripts"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#packages-in-action",
    "href": "lectures/lec_06_presentation.html#packages-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Packages in Action",
    "text": "Packages in Action\nTask: Install the pandas and numpy packages, which are commonly used for data analysis. We will use them together next week!\n\nuv add pandas numpy\n\n\n\n\n\n\n\n\nIf you install packages like this, you can use the shell to do so! Alternatively, you can use uv add &lt;package_name&gt; in the Python terminal."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#virtual-environments",
    "href": "lectures/lec_06_presentation.html#virtual-environments",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Virtual Environments",
    "text": "Virtual Environments\n\nVirtual environments are used to manage dependencies\nThey allow you to have different environments for projects\nThey can be created using the venv module\nThis becomes important if you work on several projects at once\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have completed the first step into data science in Python. Next week, we can use this new knowledge to start to work with some tabular data and matrices."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#interesting-books",
    "href": "lectures/lec_06_presentation.html#interesting-books",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_08_pandas.html",
    "href": "lectures/lec_08_pandas.html",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "NumPy is a package for scientific computing in Python\nProvides multi-dimensional arrays and matrices\nMuch faster than Python lists for numerical operations\nOperations are implemented in C and C++\n\n. . .\n\n\n\n\n\n\nNumPy arrays are stored in contiguous memory blocks, making operations very efficient.\n\n\n\n\n\n\n\nCore data structure is the ndarray\nCan create arrays from lists, tuples, or other data structures\nSpecial functions like:\n\nnp.zeros() for arrays of zeros\nnp.random.rand() for random values\nnp.arange() for evenly spaced values\nnp.linspace() for linearly spaced values\n\n\n\n\n\n\nSupport for multi-dimensional operations\nCommon operations:\n\nElement-wise arithmetic (+, -, *, /)\nArray indexing and slicing\nShape manipulation (reshape, flatten)\nSorting and transposing\n\n\n. . .\n\n\n\n\n\n\nNumPy operations are vectorized, meaning they operate on entire arrays at once rather than element by element.\n\n\n\n\n\n\nTask: Complete the following task:\n\n# TODO: Create an array with 10 evenly spaced numbers over the interval from 0 to 73.\n\nimport numpy as np\n# YOUR CODE HERE\n\n. . .\n\n\n\n\n\n\nNote, that you can always use the help() function to get more information about a function. But be sure to import the package first, otherwise you will get an error. To quit the help page, press q.\n\n\n\n\n\n\nTask: Complete the following task:\n\n# TODO: Take the following 3x3 array and reduce it to a 1D array.\n\nimport numpy as np\narray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# YOUR CODE HERE",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#what-is-numpy",
    "href": "lectures/lec_08_pandas.html#what-is-numpy",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "NumPy is a package for scientific computing in Python\nProvides multi-dimensional arrays and matrices\nMuch faster than Python lists for numerical operations\nOperations are implemented in C and C++\n\n. . .\n\n\n\n\n\n\nNumPy arrays are stored in contiguous memory blocks, making operations very efficient.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#creating-arrays",
    "href": "lectures/lec_08_pandas.html#creating-arrays",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "Core data structure is the ndarray\nCan create arrays from lists, tuples, or other data structures\nSpecial functions like:\n\nnp.zeros() for arrays of zeros\nnp.random.rand() for random values\nnp.arange() for evenly spaced values\nnp.linspace() for linearly spaced values",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#working-with-arrays",
    "href": "lectures/lec_08_pandas.html#working-with-arrays",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "Support for multi-dimensional operations\nCommon operations:\n\nElement-wise arithmetic (+, -, *, /)\nArray indexing and slicing\nShape manipulation (reshape, flatten)\nSorting and transposing\n\n\n. . .\n\n\n\n\n\n\nNumPy operations are vectorized, meaning they operate on entire arrays at once rather than element by element.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#numpy-in-action-i",
    "href": "lectures/lec_08_pandas.html#numpy-in-action-i",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "Task: Complete the following task:\n\n# TODO: Create an array with 10 evenly spaced numbers over the interval from 0 to 73.\n\nimport numpy as np\n# YOUR CODE HERE\n\n. . .\n\n\n\n\n\n\nNote, that you can always use the help() function to get more information about a function. But be sure to import the package first, otherwise you will get an error. To quit the help page, press q.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#numpy-in-action-ii",
    "href": "lectures/lec_08_pandas.html#numpy-in-action-ii",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "Task: Complete the following task:\n\n# TODO: Take the following 3x3 array and reduce it to a 1D array.\n\nimport numpy as np\narray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# YOUR CODE HERE",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#what-is-pandas",
    "href": "lectures/lec_08_pandas.html#what-is-pandas",
    "title": "Lecture VII - Pandas and AI",
    "section": "What is Pandas?",
    "text": "What is Pandas?\n\nPandas is a data manipulation and analysis library\nIt provides data structures like DataFrames and Series\nTools for data cleaning, analysis, and visualization\nIt can also be used to work with Excel files!",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#how-to-install-pandas",
    "href": "lectures/lec_08_pandas.html#how-to-install-pandas",
    "title": "Lecture VII - Pandas and AI",
    "section": "How to install Pandas",
    "text": "How to install Pandas\n\nIn the last lecture, we have installed it with uv install pandas\nNow, import the package import pandas as pd\n\n. . .\n\n\n\n\n\n\nYou can also use a different abbreviation, but pd is the most common one.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#creating-dataframes",
    "href": "lectures/lec_08_pandas.html#creating-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nDataFrames behave quite similar to Numpy arrays\nBut they have row and column labels\n\n. . .\n\nimport pandas as pd\ndf = pd.DataFrame({ # DataFrame is created from a dictionary\n    \"Name\": [\"Tobias\", \"Robin\", \"Nils\", \"Nikolai\"],\n    \"Kids\": [2, 1, 0, 0],\n    \"City\": [\"Oststeinbek\", \"Oststeinbek\", \"Hamburg\", \"Lübeck\"],\n    \"Salary\": [3000, 3200, 4000, 2500]}); print(df)\n\n      Name  Kids         City  Salary\n0   Tobias     2  Oststeinbek    3000\n1    Robin     1  Oststeinbek    3200\n2     Nils     0      Hamburg    4000\n3  Nikolai     0       Lübeck    2500",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#reading-from-csv-files",
    "href": "lectures/lec_08_pandas.html#reading-from-csv-files",
    "title": "Lecture VII - Pandas and AI",
    "section": "Reading from CSV Files",
    "text": "Reading from CSV Files\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\") # Reads the CSV file\nprint(df)\n\n       Name  Age Department        Position  Salary\n0     Alice   30         HR         Manager   50000\n1       Bob   25         IT       Developer   60000\n2   Charlie   28    Finance         Analyst   55000\n3     David   35  Marketing       Executive   52000\n4       Eve   32      Sales  Representative   48000\n5     Frank   29         IT       Developer   61000\n6     Grace   31         HR       Assistant   45000\n7      Hank   27    Finance         Analyst   53000\n8       Ivy   33  Marketing         Manager   58000\n9      Jack   26      Sales  Representative   47000\n10     Kara   34         IT       Developer   62000\n11      Leo   30         HR         Manager   51000\n12     Mona   28    Finance         Analyst   54000\n13     Nina   35  Marketing       Executive   53000\n14    Oscar   32      Sales  Representative   49000\n15     Paul   29         IT       Developer   63000\n16    Quinn   31         HR       Assistant   46000\n17     Rita   27    Finance         Analyst   52000\n18      Sam   33  Marketing         Manager   59000\n19     Tina   26      Sales  Representative   48000\n20      Uma   34         IT       Developer   64000\n21    Vince   30         HR         Manager   52000\n22     Walt   28    Finance         Analyst   55000\n23     Xena   35  Marketing       Executive   54000\n24     Yara   32      Sales  Representative   50000\n25     Zane   29         IT       Developer   65000\n26     Anna   31         HR       Assistant   47000\n27      Ben   27    Finance         Analyst   53000\n28    Cathy   33  Marketing         Manager   60000\n29    Dylan   26      Sales  Representative   49000\n30     Ella   34         IT       Developer   66000\n31     Finn   30         HR         Manager   53000\n32     Gina   28    Finance         Analyst   56000\n33     Hugo   35  Marketing       Executive   55000\n34     Iris   32      Sales  Representative   51000\n35     Jake   29         IT       Developer   67000\n36     Kyla   31         HR       Assistant   48000\n37     Liam   27    Finance         Analyst   54000\n38      Mia   33  Marketing         Manager   61000\n39     Noah   26      Sales  Representative   50000\n40    Olive   34         IT       Developer   68000\n41     Pete   30         HR         Manager   54000\n42   Quincy   28    Finance         Analyst   57000\n43     Rose   35  Marketing       Executive   56000\n44    Steve   32      Sales  Representative   52000\n45     Tara   29         IT       Developer   69000\n46     Umar   31         HR       Assistant   49000\n47     Vera   27    Finance         Analyst   55000\n48     Will   33  Marketing         Manager   62000\n49     Zara   26      Sales  Representative   51000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#basic-operations",
    "href": "lectures/lec_08_pandas.html#basic-operations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Basic Operations",
    "text": "Basic Operations\n\nUse the df.head() method to display the first 5 rows\nUse the df.tail() method to display the last 5 rows\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.tail())\n\n    Name  Age Department        Position  Salary\n45  Tara   29         IT       Developer   69000\n46  Umar   31         HR       Assistant   49000\n47  Vera   27    Finance         Analyst   55000\n48  Will   33  Marketing         Manager   62000\n49  Zara   26      Sales  Representative   51000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#information-about-the-dataframe",
    "href": "lectures/lec_08_pandas.html#information-about-the-dataframe",
    "title": "Lecture VII - Pandas and AI",
    "section": "Information about the DataFrame",
    "text": "Information about the DataFrame\n\nUse df.info() to display information about a DataFrame\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 5 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   Name        50 non-null     object\n 1   Age         50 non-null     int64 \n 2   Department  50 non-null     object\n 3   Position    50 non-null     object\n 4   Salary      50 non-null     int64 \ndtypes: int64(2), object(3)\nmemory usage: 2.1+ KB\nNone",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#statistics-about-a-dataframe",
    "href": "lectures/lec_08_pandas.html#statistics-about-a-dataframe",
    "title": "Lecture VII - Pandas and AI",
    "section": "Statistics about a DataFrame",
    "text": "Statistics about a DataFrame\n\nUse df.describe() to display summary statistics\nUse the df.index attribute to access the index\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.describe())\n\n             Age        Salary\ncount  50.000000     50.000000\nmean   30.320000  54980.000000\nstd     2.958488   6175.957333\nmin    25.000000  45000.000000\n25%    28.000000  50250.000000\n50%    30.000000  54000.000000\n75%    33.000000  59750.000000\nmax    35.000000  69000.000000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#filtering-dataframes",
    "href": "lectures/lec_08_pandas.html#filtering-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Filtering DataFrames",
    "text": "Filtering DataFrames\n\nUse df['column_name'] to access a column\nUse the df[df['column'] &gt; value] method to filter\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf_high_salary = df[df['Salary'] &gt;= 67000]\nprint(df_high_salary)\nprint(df_high_salary.iloc[2][\"Name\"]) #Access the third row and the \"Name\" column\nprint(df_high_salary.loc[40][\"Name\"]) #Access the label 40 and the \"Name\" column\n\n     Name  Age Department   Position  Salary\n35   Jake   29         IT  Developer   67000\n40  Olive   34         IT  Developer   68000\n45   Tara   29         IT  Developer   69000\nTara\nOlive",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#filtering-in-action",
    "href": "lectures/lec_08_pandas.html#filtering-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Filtering in Action",
    "text": "Filtering in Action\nTask: Complete the following task:\n\n# TODO: Load the employees.csv located in the git repository into a DataFrame\n# First, filter the DataFrame for employees with a manager position\n# Then, print the average salary of the remaining employees\n# Finally, print the name of the employee with the lowest salary\n\n. . .\n\n\n\n\n\n\nNote, that we can use the mean() method on the Salary column, as it is a numeric column. In addition, we can use the min() method on the Salary column to find the lowest salary.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#grouping",
    "href": "lectures/lec_08_pandas.html#grouping",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping",
    "text": "Grouping\n\nGrouping is a powerful feature of Pandas\nGroups data by one or more columns\nAnd then perform operations\nSyntax is df.groupby('column').method()\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf.groupby(['Position']).sum() # Sum per position\n\n\n\n\n\n\n\n\nName\nAge\nDepartment\nSalary\n\n\nPosition\n\n\n\n\n\n\n\n\nAnalyst\nCharlieHankMonaRitaWaltBenGinaLiamQuincyVera\n275\nFinanceFinanceFinanceFinanceFinanceFinanceFina...\n544000\n\n\nAssistant\nGraceQuinnAnnaKylaUmar\n155\nHRHRHRHRHR\n235000\n\n\nDeveloper\nBobFrankKaraPaulUmaZaneEllaJakeOliveTara\n306\nITITITITITITITITITIT\n645000\n\n\nExecutive\nDavidNinaXenaHugoRose\n175\nMarketingMarketingMarketingMarketingMarketing\n270000\n\n\nManager\nAliceIvyLeoSamVinceCathyFinnMiaPeteWill\n315\nHRMarketingHRMarketingHRMarketingHRMarketingHR...\n560000\n\n\nRepresentative\nEveJackOscarTinaYaraDylanIrisNoahSteveZara\n290\nSalesSalesSalesSalesSalesSalesSalesSalesSalesS...\n495000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#grouping-numeric-columns",
    "href": "lectures/lec_08_pandas.html#grouping-numeric-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping Numeric Columns",
    "text": "Grouping Numeric Columns\n\nTo prevent errors, we can select numeric columns first\nAfterwards, perform the operation on the selected columns\nHelps to avoid errors when grouping by non-numeric columns\nOr drop columns by df.drop(columns=[\"column\"])\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nnumeric_cols = df.select_dtypes(include=['number']).columns\nprint(df.groupby(\"Position\")[numeric_cols].sum())\n\n                Age  Salary\nPosition                   \nAnalyst         275  544000\nAssistant       155  235000\nDeveloper       306  645000\nExecutive       175  270000\nManager         315  560000\nRepresentative  290  495000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#grouping-by-multiple-columns",
    "href": "lectures/lec_08_pandas.html#grouping-by-multiple-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping by Multiple Columns",
    "text": "Grouping by Multiple Columns\n\nGroup by multiple columns ['column1', 'column2']\nYou can use lists or tuples to specify multiple columns\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf = df.drop(columns=[\"Name\"])\n# Max per position and department\ndf.groupby(['Position', \"Department\"]).max()\n\n\n\n\n\n\n\n\n\nAge\nSalary\n\n\nPosition\nDepartment\n\n\n\n\n\n\nAnalyst\nFinance\n28\n57000\n\n\nAssistant\nHR\n31\n49000\n\n\nDeveloper\nIT\n34\n69000\n\n\nExecutive\nMarketing\n35\n56000\n\n\nManager\nHR\n30\n54000\n\n\nMarketing\n33\n62000\n\n\nRepresentative\nSales\n32\n52000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#grouping-with-aggregations",
    "href": "lectures/lec_08_pandas.html#grouping-with-aggregations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping with Aggregations",
    "text": "Grouping with Aggregations\n\nWe can use different aggregation functions:\n\nsum(): sum of the values\nmean(): mean of the values\nmax(): maximum of the values\nmin(): minimum of the values\ncount(): count of the values",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#pandas-in-action",
    "href": "lectures/lec_08_pandas.html#pandas-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Pandas in Action",
    "text": "Pandas in Action\nTask: Complete the following task:\n\n# TODO: Load the employees.csv again into a DataFrame\n# First, group by the \"Position\" column and count the employees per position\n# Then, group by the \"Department\" column and calculate the mean of all other columns per department\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\n# Your code here",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#concatenating-dataframes",
    "href": "lectures/lec_08_pandas.html#concatenating-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Concatenating DataFrames",
    "text": "Concatenating DataFrames\n\npd.concat() to concatenate along shared columns\n\n\ndf1 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\ndf2 = pd.DataFrame({\"A\": [7, 8, 9], \"B\": [10, 11, 12]})\ndf = pd.concat([df1, df2])\nprint(df)\n\n   A   B\n0  1   4\n1  2   5\n2  3   6\n0  7  10\n1  8  11\n2  9  12",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#joining-dataframes",
    "href": "lectures/lec_08_pandas.html#joining-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Joining DataFrames",
    "text": "Joining DataFrames\n\nUse pd.join() to join DataFrames along columns\nJoining is done on the index by default!\n\n\ndf1 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=['x', 'y', 'z'])\ndf2 = pd.DataFrame({\"C\": [7, 8, 9], \"D\": [10, 11, 12]}, index=['z', 'y', 'w'])\ndf = df1.join(df2)\nprint(df)\n\n   A  B    C     D\nx  1  4  NaN   NaN\ny  2  5  8.0  11.0\nz  3  6  7.0  10.0",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#merging-dataframes-on-columns",
    "href": "lectures/lec_08_pandas.html#merging-dataframes-on-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Merging DataFrames on Columns",
    "text": "Merging DataFrames on Columns\n\npd.merge(df_name, on='column', how='type')\nmerge DataFrames along shared columns\nhow specifies the type of merge\n\ninner: rows with matching keys in both DataFrames\nouter: rows from both are kept, missing values are filled\nleft: rows from the left are kept, missing values are filled\nright: rows from right are kept, missing values are filled",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#outer-merge",
    "href": "lectures/lec_08_pandas.html#outer-merge",
    "title": "Lecture VII - Pandas and AI",
    "section": "Outer Merge",
    "text": "Outer Merge\n\ndf3 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\ndf4 = pd.DataFrame({\"A\": [2, 3, 4], \"C\": [7, 8, 9]})\ndf_merged = df3.merge(df4, on=\"A\", how=\"outer\")\nprint(df_merged)\n\n   A    B    C\n0  1  4.0  NaN\n1  2  5.0  7.0\n2  3  6.0  8.0\n3  4  NaN  9.0",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#merging-in-action",
    "href": "lectures/lec_08_pandas.html#merging-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Merging in Action",
    "text": "Merging in Action\nTask: Complete the following task:\n\ndf1 = pd.DataFrame({\n    \"Name\": [\"John\", \"Alice\", \"Bob\", \"Carol\"],\n    \"Department\": [\"Sales\", \"IT\", \"HR\", \"Sales\"],\n    \"Salary\": [50000, 60000, 55000, 52000]})\ndf2 = pd.DataFrame({\n    \"Name\": [\"Alice\", \"Bob\", \"Dave\", \"Eve\"],\n    \"Position\": [\"Developer\", \"Manager\", \"Analyst\", \"Developer\"],\n    \"Years\": [5, 8, 3, 4]})\n\n# TODO: Merge the two DataFrames on the \"Name\" column\n# Try different types of merges (inner, outer, left, right)\n# Observe and describe the differences in the results",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#reading-excel-files",
    "href": "lectures/lec_08_pandas.html#reading-excel-files",
    "title": "Lecture VII - Pandas and AI",
    "section": "Reading Excel Files",
    "text": "Reading Excel Files\n\nRead using the pd.read_excel(file_path) function\nWrite using the df.to_excel(file_path) method\n\n. . .\n\nimport pandas as pd\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf.to_excel(\"supplementary/lec_08/employees.xlsx\", index=False)\n\n. . .\n\n\n\n\n\n\nNote, that you likely need to install the openpyxl package to be able to write Excel files, as it handles the file format.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#advanced-excel-file-handling",
    "href": "lectures/lec_08_pandas.html#advanced-excel-file-handling",
    "title": "Lecture VII - Pandas and AI",
    "section": "Advanced Excel file handling",
    "text": "Advanced Excel file handling\nWe can also specify the sheet name when reading and writing\n\n# Writes to the Employees sheet and does not include row indices\ndf.to_excel(\"supplementary/lec_08/employees.xlsx\", sheet_name=\"Employees\", index=False)\n\n. . .\n\n# Reads from the Employees sheet\ndf = pd.read_excel(\"supplementary/lec_08/employees.xlsx\", sheet_name=\"Employees\")\nprint(df.head())\n\n      Name  Age Department        Position  Salary\n0    Alice   30         HR         Manager   50000\n1      Bob   25         IT       Developer   60000\n2  Charlie   28    Finance         Analyst   55000\n3    David   35  Marketing       Executive   52000\n4      Eve   32      Sales  Representative   48000",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#excel-in-action",
    "href": "lectures/lec_08_pandas.html#excel-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Excel in Action",
    "text": "Excel in Action\nTask: Complete the following task:\n\n# TODO: Load the temperatures.xlsx file into a DataFrame\n# Look at the first few rows of the DataFrame\n# Then, print the average temperature per city",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#melting",
    "href": "lectures/lec_08_pandas.html#melting",
    "title": "Lecture VII - Pandas and AI",
    "section": "Melting",
    "text": "Melting\n\nSometimes, you want to transform a DataFrame\nInstead of wide format, you want long format\nThis is useful for certain types of visualizations\nAnd when working with time series data\n\n. . .\nQuestion: Anybody ever heard of the terms?",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#wide-format",
    "href": "lectures/lec_08_pandas.html#wide-format",
    "title": "Lecture VII - Pandas and AI",
    "section": "Wide Format",
    "text": "Wide Format\nFor example, the following DataFrame is in wide format:\n\n\n         Date  Hamburg  Los_Angeles  Tokyo\n0  2024-03-01     12.0         18.2   14.8\n1  2024-03-02      9.8         23.0   17.6\n2  2024-03-03      7.6         20.3   16.0\n3  2024-03-04     10.1         21.1   13.4\n4  2024-03-05     11.2         18.5   15.1\n..        ...      ...          ...    ...\n87 2024-05-27     12.4         24.5   24.9\n88 2024-05-28     17.8         20.6   22.3\n89 2024-05-29     16.2         20.4   20.2\n90 2024-05-30     15.5         20.7   21.7\n91 2024-05-31     12.6         22.0   22.9\n\n[92 rows x 4 columns]",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#long-format",
    "href": "lectures/lec_08_pandas.html#long-format",
    "title": "Lecture VII - Pandas and AI",
    "section": "Long Format",
    "text": "Long Format\nThe melting process transforms it into the following long format:\n\n\n          Date     City  Temperature\n0   2024-03-01  Hamburg         12.0\n1   2024-03-02  Hamburg          9.8\n2   2024-03-03  Hamburg          7.6\n3   2024-03-04  Hamburg         10.1\n4   2024-03-05  Hamburg         11.2\n..         ...      ...          ...\n271 2024-05-27    Tokyo         24.9\n272 2024-05-28    Tokyo         22.3\n273 2024-05-29    Tokyo         20.2\n274 2024-05-30    Tokyo         21.7\n275 2024-05-31    Tokyo         22.9\n\n[276 rows x 3 columns]",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#how-to-melt-dataframes",
    "href": "lectures/lec_08_pandas.html#how-to-melt-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "How to melt DataFrames",
    "text": "How to melt DataFrames\n\nUse pd.melt() to transform from wide to long\nParameters:\n\nid_vars: columns to keep\nvar_name: name of the new column that will contain the names of the original columns\nvalue_name: name of the new column that will contain the values of the original columns\n\n\n. . .\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf = pd.melt(df, id_vars=['Position'], var_name='Variables', value_name='Values')\nprint(df)\n\n           Position Variables   Values\n0           Manager      Name    Alice\n1         Developer      Name      Bob\n2           Analyst      Name  Charlie\n3         Executive      Name    David\n4    Representative      Name      Eve\n..              ...       ...      ...\n195       Developer    Salary    69000\n196       Assistant    Salary    49000\n197         Analyst    Salary    55000\n198         Manager    Salary    62000\n199  Representative    Salary    51000\n\n[200 rows x 3 columns]",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#melting-in-action",
    "href": "lectures/lec_08_pandas.html#melting-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Melting in Action",
    "text": "Melting in Action\nTask: Complete the following task:\n\n# TODO: Load and transform the temperatures.xlsx file by melting it\n# Expected output format:\n#         Date        City  Temperature\n# 0  2024-03-01    Hamburg         7.2\n# 1  2024-03-01 Los_Angeles       18.5\n# 2  2024-03-01      Tokyo        12.3\n# Then, print the maximum temperature per city by grouping by the \"City\" column",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#using-ai-to-generate-code",
    "href": "lectures/lec_08_pandas.html#using-ai-to-generate-code",
    "title": "Lecture VII - Pandas and AI",
    "section": "Using AI to generate code",
    "text": "Using AI to generate code\n\nCoding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT\n\n. . .",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#section",
    "href": "lectures/lec_08_pandas.html#section",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#large-language-models-llms",
    "href": "lectures/lec_08_pandas.html#large-language-models-llms",
    "title": "Lecture VII - Pandas and AI",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#training-llms",
    "href": "lectures/lec_08_pandas.html#training-llms",
    "title": "Lecture VII - Pandas and AI",
    "section": "Training LLMs",
    "text": "Training LLMs\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#pattern-recognition",
    "href": "lectures/lec_08_pandas.html#pattern-recognition",
    "title": "Lecture VII - Pandas and AI",
    "section": "Pattern Recognition",
    "text": "Pattern Recognition\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#probability-based-responses",
    "href": "lectures/lec_08_pandas.html#probability-based-responses",
    "title": "Lecture VII - Pandas and AI",
    "section": "Probability based responses",
    "text": "Probability based responses\n\nAfter each written token, it predicts “what should come next?”\nLike a advanced version of the word prediction on your phone\nChooses the most likely next token based on training\nBut can’t actually “think” or “understand” like humans",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#limitations",
    "href": "lectures/lec_08_pandas.html#limitations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Limitations",
    "text": "Limitations\n\nNo true understanding of cause and effect\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on\nCan reflect biases present in training data\nNo emotional understanding (but can simulate responses!)",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#impact-on-jobs",
    "href": "lectures/lec_08_pandas.html#impact-on-jobs",
    "title": "Lecture VII - Pandas and AI",
    "section": "Impact on Jobs",
    "text": "Impact on Jobs\n\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#current-choices-for-programmers",
    "href": "lectures/lec_08_pandas.html#current-choices-for-programmers",
    "title": "Lecture VII - Pandas and AI",
    "section": "(Current) Choices for Programmers",
    "text": "(Current) Choices for Programmers\n\nGithub Copilot: Integrated into VS Code by Microsoft\nCursor: Fork of VS Code with AI assistance built in\nAider: Chat interface for AI to write code in the terminal\nZed: Lightweight IDE with AI features\n\n. . .\n\n\n\n\n\n\nCurrently, Zed is my favorite one. But this might change in the future, as there is a lot of competition in this space.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#getting-started-with-ai-in-zed",
    "href": "lectures/lec_08_pandas.html#getting-started-with-ai-in-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "Getting started with AI in Zed",
    "text": "Getting started with AI in Zed\n\nYou will need to create an account (right top corner)\nSome free usage per month, after that you need to pay\nFor us, the free plan should be more than enough\nIf you need more prompts, create an account with OpenRouter\nHere you can get an API key and use their free models\n\n\n\n\n\n\n\nIf you use free models, be aware that your prompts are going to be used by the providers and are not private. But for learning and experimenting, this should be no issue.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#using-zed",
    "href": "lectures/lec_08_pandas.html#using-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "Using Zed",
    "text": "Using Zed\n\nOpen the folder with your tutorial files\nCreate a new .py file\nPress Ctrl + L to open the chat",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#asking-for-help",
    "href": "lectures/lec_08_pandas.html#asking-for-help",
    "title": "Lecture VII - Pandas and AI",
    "section": "Asking for help",
    "text": "Asking for help\nTask: Paste the following prompt in to the chat:\nCan you please write me a small number guessing game in python? It should work for one player in the terminal. The player should guess a number between 1-10 and get hints about whether his guess was too large or too small. After 3 tries, end the game if he didn’t succeed with a nice message.\n. . .\nCopy the generated code and paste it into your file.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#more-on-zed",
    "href": "lectures/lec_08_pandas.html#more-on-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "More on Zed",
    "text": "More on Zed\n\nWhile working with Zed, it will suggest you code changes\nYou can accept or reject them\nThe rest you will learn by doing!\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nYou now have the basic knowledge to start working with tabular data and AI!.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_pandas.html#interesting-books",
    "href": "lectures/lec_08_pandas.html#interesting-books",
    "title": "Lecture VII - Pandas and AI",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "08 Pandas and AI",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_08_presentation.html#what-is-numpy",
    "href": "lectures/lec_08_presentation.html#what-is-numpy",
    "title": "Lecture VII - Pandas and AI",
    "section": "What is NumPy?",
    "text": "What is NumPy?\n\nNumPy is a package for scientific computing in Python\nProvides multi-dimensional arrays and matrices\nMuch faster than Python lists for numerical operations\nOperations are implemented in C and C++\n\n\n\n\n\n\n\n\nNumPy arrays are stored in contiguous memory blocks, making operations very efficient."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#creating-arrays",
    "href": "lectures/lec_08_presentation.html#creating-arrays",
    "title": "Lecture VII - Pandas and AI",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nCore data structure is the ndarray\nCan create arrays from lists, tuples, or other data structures\nSpecial functions like:\n\nnp.zeros() for arrays of zeros\nnp.random.rand() for random values\nnp.arange() for evenly spaced values\nnp.linspace() for linearly spaced values"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#working-with-arrays",
    "href": "lectures/lec_08_presentation.html#working-with-arrays",
    "title": "Lecture VII - Pandas and AI",
    "section": "Working with Arrays",
    "text": "Working with Arrays\n\nSupport for multi-dimensional operations\nCommon operations:\n\nElement-wise arithmetic (+, -, *, /)\nArray indexing and slicing\nShape manipulation (reshape, flatten)\nSorting and transposing\n\n\n\n\n\n\n\n\n\nNumPy operations are vectorized, meaning they operate on entire arrays at once rather than element by element."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#numpy-in-action-i",
    "href": "lectures/lec_08_presentation.html#numpy-in-action-i",
    "title": "Lecture VII - Pandas and AI",
    "section": "NumPy in Action I",
    "text": "NumPy in Action I\nTask: Complete the following task:\n\n# TODO: Create an array with 10 evenly spaced numbers over the interval from 0 to 73.\n\nimport numpy as np\n# YOUR CODE HERE\n\n\n\n\n\n\n\n\nNote, that you can always use the help() function to get more information about a function. But be sure to import the package first, otherwise you will get an error. To quit the help page, press q."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#numpy-in-action-ii",
    "href": "lectures/lec_08_presentation.html#numpy-in-action-ii",
    "title": "Lecture VII - Pandas and AI",
    "section": "NumPy in Action II",
    "text": "NumPy in Action II\nTask: Complete the following task:\n\n# TODO: Take the following 3x3 array and reduce it to a 1D array.\n\nimport numpy as np\narray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# YOUR CODE HERE"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#what-is-pandas",
    "href": "lectures/lec_08_presentation.html#what-is-pandas",
    "title": "Lecture VII - Pandas and AI",
    "section": "What is Pandas?",
    "text": "What is Pandas?\n\nPandas is a data manipulation and analysis library\nIt provides data structures like DataFrames and Series\nTools for data cleaning, analysis, and visualization\nIt can also be used to work with Excel files!"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#how-to-install-pandas",
    "href": "lectures/lec_08_presentation.html#how-to-install-pandas",
    "title": "Lecture VII - Pandas and AI",
    "section": "How to install Pandas",
    "text": "How to install Pandas\n\nIn the last lecture, we have installed it with uv install pandas\nNow, import the package import pandas as pd\n\n\n\n\n\n\n\n\nYou can also use a different abbreviation, but pd is the most common one."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#creating-dataframes",
    "href": "lectures/lec_08_presentation.html#creating-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nDataFrames behave quite similar to Numpy arrays\nBut they have row and column labels\n\n\n\nimport pandas as pd\ndf = pd.DataFrame({ # DataFrame is created from a dictionary\n    \"Name\": [\"Tobias\", \"Robin\", \"Nils\", \"Nikolai\"],\n    \"Kids\": [2, 1, 0, 0],\n    \"City\": [\"Oststeinbek\", \"Oststeinbek\", \"Hamburg\", \"Lübeck\"],\n    \"Salary\": [3000, 3200, 4000, 2500]}); print(df)\n\n\n\n      Name  Kids         City  Salary\n0   Tobias     2  Oststeinbek    3000\n1    Robin     1  Oststeinbek    3200\n2     Nils     0      Hamburg    4000\n3  Nikolai     0       Lübeck    2500"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#reading-from-csv-files",
    "href": "lectures/lec_08_presentation.html#reading-from-csv-files",
    "title": "Lecture VII - Pandas and AI",
    "section": "Reading from CSV Files",
    "text": "Reading from CSV Files\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\") # Reads the CSV file\nprint(df)\n\n\n\n       Name  Age Department        Position  Salary\n0     Alice   30         HR         Manager   50000\n1       Bob   25         IT       Developer   60000\n2   Charlie   28    Finance         Analyst   55000\n3     David   35  Marketing       Executive   52000\n4       Eve   32      Sales  Representative   48000\n5     Frank   29         IT       Developer   61000\n6     Grace   31         HR       Assistant   45000\n7      Hank   27    Finance         Analyst   53000\n8       Ivy   33  Marketing         Manager   58000\n9      Jack   26      Sales  Representative   47000\n10     Kara   34         IT       Developer   62000\n11      Leo   30         HR         Manager   51000\n12     Mona   28    Finance         Analyst   54000\n13     Nina   35  Marketing       Executive   53000\n14    Oscar   32      Sales  Representative   49000\n15     Paul   29         IT       Developer   63000\n16    Quinn   31         HR       Assistant   46000\n17     Rita   27    Finance         Analyst   52000\n18      Sam   33  Marketing         Manager   59000\n19     Tina   26      Sales  Representative   48000\n20      Uma   34         IT       Developer   64000\n21    Vince   30         HR         Manager   52000\n22     Walt   28    Finance         Analyst   55000\n23     Xena   35  Marketing       Executive   54000\n24     Yara   32      Sales  Representative   50000\n25     Zane   29         IT       Developer   65000\n26     Anna   31         HR       Assistant   47000\n27      Ben   27    Finance         Analyst   53000\n28    Cathy   33  Marketing         Manager   60000\n29    Dylan   26      Sales  Representative   49000\n30     Ella   34         IT       Developer   66000\n31     Finn   30         HR         Manager   53000\n32     Gina   28    Finance         Analyst   56000\n33     Hugo   35  Marketing       Executive   55000\n34     Iris   32      Sales  Representative   51000\n35     Jake   29         IT       Developer   67000\n36     Kyla   31         HR       Assistant   48000\n37     Liam   27    Finance         Analyst   54000\n38      Mia   33  Marketing         Manager   61000\n39     Noah   26      Sales  Representative   50000\n40    Olive   34         IT       Developer   68000\n41     Pete   30         HR         Manager   54000\n42   Quincy   28    Finance         Analyst   57000\n43     Rose   35  Marketing       Executive   56000\n44    Steve   32      Sales  Representative   52000\n45     Tara   29         IT       Developer   69000\n46     Umar   31         HR       Assistant   49000\n47     Vera   27    Finance         Analyst   55000\n48     Will   33  Marketing         Manager   62000\n49     Zara   26      Sales  Representative   51000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#basic-operations",
    "href": "lectures/lec_08_presentation.html#basic-operations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Basic Operations",
    "text": "Basic Operations\n\nUse the df.head() method to display the first 5 rows\nUse the df.tail() method to display the last 5 rows\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.tail())\n\n\n\n    Name  Age Department        Position  Salary\n45  Tara   29         IT       Developer   69000\n46  Umar   31         HR       Assistant   49000\n47  Vera   27    Finance         Analyst   55000\n48  Will   33  Marketing         Manager   62000\n49  Zara   26      Sales  Representative   51000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#information-about-the-dataframe",
    "href": "lectures/lec_08_presentation.html#information-about-the-dataframe",
    "title": "Lecture VII - Pandas and AI",
    "section": "Information about the DataFrame",
    "text": "Information about the DataFrame\n\nUse df.info() to display information about a DataFrame\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.info())\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 5 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   Name        50 non-null     object\n 1   Age         50 non-null     int64 \n 2   Department  50 non-null     object\n 3   Position    50 non-null     object\n 4   Salary      50 non-null     int64 \ndtypes: int64(2), object(3)\nmemory usage: 2.1+ KB\nNone"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#statistics-about-a-dataframe",
    "href": "lectures/lec_08_presentation.html#statistics-about-a-dataframe",
    "title": "Lecture VII - Pandas and AI",
    "section": "Statistics about a DataFrame",
    "text": "Statistics about a DataFrame\n\nUse df.describe() to display summary statistics\nUse the df.index attribute to access the index\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nprint(df.describe())\n\n\n\n             Age        Salary\ncount  50.000000     50.000000\nmean   30.320000  54980.000000\nstd     2.958488   6175.957333\nmin    25.000000  45000.000000\n25%    28.000000  50250.000000\n50%    30.000000  54000.000000\n75%    33.000000  59750.000000\nmax    35.000000  69000.000000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#filtering-dataframes",
    "href": "lectures/lec_08_presentation.html#filtering-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Filtering DataFrames",
    "text": "Filtering DataFrames\n\nUse df['column_name'] to access a column\nUse the df[df['column'] &gt; value] method to filter\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf_high_salary = df[df['Salary'] &gt;= 67000]\nprint(df_high_salary)\nprint(df_high_salary.iloc[2][\"Name\"]) #Access the third row and the \"Name\" column\nprint(df_high_salary.loc[40][\"Name\"]) #Access the label 40 and the \"Name\" column\n\n\n\n     Name  Age Department   Position  Salary\n35   Jake   29         IT  Developer   67000\n40  Olive   34         IT  Developer   68000\n45   Tara   29         IT  Developer   69000\nTara\nOlive"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#filtering-in-action",
    "href": "lectures/lec_08_presentation.html#filtering-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Filtering in Action",
    "text": "Filtering in Action\nTask: Complete the following task:\n\n# TODO: Load the employees.csv located in the git repository into a DataFrame\n# First, filter the DataFrame for employees with a manager position\n# Then, print the average salary of the remaining employees\n# Finally, print the name of the employee with the lowest salary\n\n\n\n\n\n\n\n\nNote, that we can use the mean() method on the Salary column, as it is a numeric column. In addition, we can use the min() method on the Salary column to find the lowest salary."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping",
    "href": "lectures/lec_08_presentation.html#grouping",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping",
    "text": "Grouping\n\nGrouping is a powerful feature of Pandas\nGroups data by one or more columns\nAnd then perform operations\nSyntax is df.groupby('column').method()\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf.groupby(['Position']).sum() # Sum per position"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-output",
    "href": "lectures/lec_08_presentation.html#grouping-output",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping",
    "text": "Grouping\n\n\n\n\n\n\n\n\nName\nAge\nDepartment\nSalary\n\n\nPosition\n\n\n\n\n\n\n\n\nAnalyst\nCharlieHankMonaRitaWaltBenGinaLiamQuincyVera\n275\nFinanceFinanceFinanceFinanceFinanceFinanceFina...\n544000\n\n\nAssistant\nGraceQuinnAnnaKylaUmar\n155\nHRHRHRHRHR\n235000\n\n\nDeveloper\nBobFrankKaraPaulUmaZaneEllaJakeOliveTara\n306\nITITITITITITITITITIT\n645000\n\n\nExecutive\nDavidNinaXenaHugoRose\n175\nMarketingMarketingMarketingMarketingMarketing\n270000\n\n\nManager\nAliceIvyLeoSamVinceCathyFinnMiaPeteWill\n315\nHRMarketingHRMarketingHRMarketingHRMarketingHR...\n560000\n\n\nRepresentative\nEveJackOscarTinaYaraDylanIrisNoahSteveZara\n290\nSalesSalesSalesSalesSalesSalesSalesSalesSalesS...\n495000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-numeric-columns",
    "href": "lectures/lec_08_presentation.html#grouping-numeric-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping Numeric Columns",
    "text": "Grouping Numeric Columns\n\nTo prevent errors, we can select numeric columns first\nAfterwards, perform the operation on the selected columns\nHelps to avoid errors when grouping by non-numeric columns\nOr drop columns by df.drop(columns=[\"column\"])\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\nnumeric_cols = df.select_dtypes(include=['number']).columns\nprint(df.groupby(\"Position\")[numeric_cols].sum())"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-numeric-columns-output",
    "href": "lectures/lec_08_presentation.html#grouping-numeric-columns-output",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping Numeric Columns",
    "text": "Grouping Numeric Columns\n\n                Age  Salary\nPosition                   \nAnalyst         275  544000\nAssistant       155  235000\nDeveloper       306  645000\nExecutive       175  270000\nManager         315  560000\nRepresentative  290  495000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-by-multiple-columns",
    "href": "lectures/lec_08_presentation.html#grouping-by-multiple-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping by Multiple Columns",
    "text": "Grouping by Multiple Columns\n\nGroup by multiple columns ['column1', 'column2']\nYou can use lists or tuples to specify multiple columns\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf = df.drop(columns=[\"Name\"])\n# Max per position and department\ndf.groupby(['Position', \"Department\"]).max()"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-by-multiple-columns-output",
    "href": "lectures/lec_08_presentation.html#grouping-by-multiple-columns-output",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping by Multiple Columns",
    "text": "Grouping by Multiple Columns\n\n\n\n\n\n\n\n\n\nAge\nSalary\n\n\nPosition\nDepartment\n\n\n\n\n\n\nAnalyst\nFinance\n28\n57000\n\n\nAssistant\nHR\n31\n49000\n\n\nDeveloper\nIT\n34\n69000\n\n\nExecutive\nMarketing\n35\n56000\n\n\nManager\nHR\n30\n54000\n\n\nMarketing\n33\n62000\n\n\nRepresentative\nSales\n32\n52000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#grouping-with-aggregations",
    "href": "lectures/lec_08_presentation.html#grouping-with-aggregations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Grouping with Aggregations",
    "text": "Grouping with Aggregations\n\nWe can use different aggregation functions:\n\nsum(): sum of the values\nmean(): mean of the values\nmax(): maximum of the values\nmin(): minimum of the values\ncount(): count of the values"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#pandas-in-action",
    "href": "lectures/lec_08_presentation.html#pandas-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Pandas in Action",
    "text": "Pandas in Action\nTask: Complete the following task:\n\n# TODO: Load the employees.csv again into a DataFrame\n# First, group by the \"Position\" column and count the employees per position\n# Then, group by the \"Department\" column and calculate the mean of all other columns per department\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\n# Your code here"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#concatenating-dataframes",
    "href": "lectures/lec_08_presentation.html#concatenating-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Concatenating DataFrames",
    "text": "Concatenating DataFrames\n\npd.concat() to concatenate along shared columns\n\n\ndf1 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\ndf2 = pd.DataFrame({\"A\": [7, 8, 9], \"B\": [10, 11, 12]})\ndf = pd.concat([df1, df2])\nprint(df)\n\n\n\n   A   B\n0  1   4\n1  2   5\n2  3   6\n0  7  10\n1  8  11\n2  9  12"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#joining-dataframes",
    "href": "lectures/lec_08_presentation.html#joining-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "Joining DataFrames",
    "text": "Joining DataFrames\n\nUse pd.join() to join DataFrames along columns\nJoining is done on the index by default!\n\n\ndf1 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=['x', 'y', 'z'])\ndf2 = pd.DataFrame({\"C\": [7, 8, 9], \"D\": [10, 11, 12]}, index=['z', 'y', 'w'])\ndf = df1.join(df2)\nprint(df)\n\n\n\n   A  B    C     D\nx  1  4  NaN   NaN\ny  2  5  8.0  11.0\nz  3  6  7.0  10.0"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#merging-dataframes-on-columns",
    "href": "lectures/lec_08_presentation.html#merging-dataframes-on-columns",
    "title": "Lecture VII - Pandas and AI",
    "section": "Merging DataFrames on Columns",
    "text": "Merging DataFrames on Columns\n\npd.merge(df_name, on='column', how='type')\nmerge DataFrames along shared columns\nhow specifies the type of merge\n\ninner: rows with matching keys in both DataFrames\nouter: rows from both are kept, missing values are filled\nleft: rows from the left are kept, missing values are filled\nright: rows from right are kept, missing values are filled"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#outer-merge",
    "href": "lectures/lec_08_presentation.html#outer-merge",
    "title": "Lecture VII - Pandas and AI",
    "section": "Outer Merge",
    "text": "Outer Merge\n\ndf3 = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\ndf4 = pd.DataFrame({\"A\": [2, 3, 4], \"C\": [7, 8, 9]})\ndf_merged = df3.merge(df4, on=\"A\", how=\"outer\")\nprint(df_merged)\n\n\n\n   A    B    C\n0  1  4.0  NaN\n1  2  5.0  7.0\n2  3  6.0  8.0\n3  4  NaN  9.0"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#merging-in-action",
    "href": "lectures/lec_08_presentation.html#merging-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Merging in Action",
    "text": "Merging in Action\nTask: Complete the following task:\n\ndf1 = pd.DataFrame({\n    \"Name\": [\"John\", \"Alice\", \"Bob\", \"Carol\"],\n    \"Department\": [\"Sales\", \"IT\", \"HR\", \"Sales\"],\n    \"Salary\": [50000, 60000, 55000, 52000]})\ndf2 = pd.DataFrame({\n    \"Name\": [\"Alice\", \"Bob\", \"Dave\", \"Eve\"],\n    \"Position\": [\"Developer\", \"Manager\", \"Analyst\", \"Developer\"],\n    \"Years\": [5, 8, 3, 4]})\n\n# TODO: Merge the two DataFrames on the \"Name\" column\n# Try different types of merges (inner, outer, left, right)\n# Observe and describe the differences in the results"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#reading-excel-files",
    "href": "lectures/lec_08_presentation.html#reading-excel-files",
    "title": "Lecture VII - Pandas and AI",
    "section": "Reading Excel Files",
    "text": "Reading Excel Files\n\nRead using the pd.read_excel(file_path) function\nWrite using the df.to_excel(file_path) method\n\n\n\nimport pandas as pd\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf.to_excel(\"supplementary/lec_08/employees.xlsx\", index=False)\n\n\n\n\n\n\n\n\n\nNote, that you likely need to install the openpyxl package to be able to write Excel files, as it handles the file format."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#advanced-excel-file-handling",
    "href": "lectures/lec_08_presentation.html#advanced-excel-file-handling",
    "title": "Lecture VII - Pandas and AI",
    "section": "Advanced Excel file handling",
    "text": "Advanced Excel file handling\nWe can also specify the sheet name when reading and writing\n\n# Writes to the Employees sheet and does not include row indices\ndf.to_excel(\"supplementary/lec_08/employees.xlsx\", sheet_name=\"Employees\", index=False)\n\n\n\n# Reads from the Employees sheet\ndf = pd.read_excel(\"supplementary/lec_08/employees.xlsx\", sheet_name=\"Employees\")\nprint(df.head())\n\n\n\n      Name  Age Department        Position  Salary\n0    Alice   30         HR         Manager   50000\n1      Bob   25         IT       Developer   60000\n2  Charlie   28    Finance         Analyst   55000\n3    David   35  Marketing       Executive   52000\n4      Eve   32      Sales  Representative   48000"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#excel-in-action",
    "href": "lectures/lec_08_presentation.html#excel-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Excel in Action",
    "text": "Excel in Action\nTask: Complete the following task:\n\n# TODO: Load the temperatures.xlsx file into a DataFrame\n# Look at the first few rows of the DataFrame\n# Then, print the average temperature per city"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#melting",
    "href": "lectures/lec_08_presentation.html#melting",
    "title": "Lecture VII - Pandas and AI",
    "section": "Melting",
    "text": "Melting\n\nSometimes, you want to transform a DataFrame\nInstead of wide format, you want long format\nThis is useful for certain types of visualizations\nAnd when working with time series data\n\n\nQuestion: Anybody ever heard of the terms?"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#wide-format",
    "href": "lectures/lec_08_presentation.html#wide-format",
    "title": "Lecture VII - Pandas and AI",
    "section": "Wide Format",
    "text": "Wide Format\nFor example, the following DataFrame is in wide format:\n\n\n         Date  Hamburg  Los_Angeles  Tokyo\n0  2024-03-01     12.0         18.2   14.8\n1  2024-03-02      9.8         23.0   17.6\n2  2024-03-03      7.6         20.3   16.0\n3  2024-03-04     10.1         21.1   13.4\n4  2024-03-05     11.2         18.5   15.1\n..        ...      ...          ...    ...\n87 2024-05-27     12.4         24.5   24.9\n88 2024-05-28     17.8         20.6   22.3\n89 2024-05-29     16.2         20.4   20.2\n90 2024-05-30     15.5         20.7   21.7\n91 2024-05-31     12.6         22.0   22.9\n\n[92 rows x 4 columns]"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#long-format",
    "href": "lectures/lec_08_presentation.html#long-format",
    "title": "Lecture VII - Pandas and AI",
    "section": "Long Format",
    "text": "Long Format\nThe melting process transforms it into the following long format:\n\n\n          Date     City  Temperature\n0   2024-03-01  Hamburg         12.0\n1   2024-03-02  Hamburg          9.8\n2   2024-03-03  Hamburg          7.6\n3   2024-03-04  Hamburg         10.1\n4   2024-03-05  Hamburg         11.2\n..         ...      ...          ...\n271 2024-05-27    Tokyo         24.9\n272 2024-05-28    Tokyo         22.3\n273 2024-05-29    Tokyo         20.2\n274 2024-05-30    Tokyo         21.7\n275 2024-05-31    Tokyo         22.9\n\n[276 rows x 3 columns]"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#how-to-melt-dataframes",
    "href": "lectures/lec_08_presentation.html#how-to-melt-dataframes",
    "title": "Lecture VII - Pandas and AI",
    "section": "How to melt DataFrames",
    "text": "How to melt DataFrames\n\nUse pd.melt() to transform from wide to long\nParameters:\n\nid_vars: columns to keep\nvar_name: name of the new column that will contain the names of the original columns\nvalue_name: name of the new column that will contain the values of the original columns\n\n\n\n\ndf = pd.read_csv(\"supplementary/lec_08/employees.csv\")\ndf = pd.melt(df, id_vars=['Position'], var_name='Variables', value_name='Values')\nprint(df)"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#how-to-melt-dataframes-output",
    "href": "lectures/lec_08_presentation.html#how-to-melt-dataframes-output",
    "title": "Lecture VII - Pandas and AI",
    "section": "How to melt DataFrames",
    "text": "How to melt DataFrames\n\n           Position Variables   Values\n0           Manager      Name    Alice\n1         Developer      Name      Bob\n2           Analyst      Name  Charlie\n3         Executive      Name    David\n4    Representative      Name      Eve\n..              ...       ...      ...\n195       Developer    Salary    69000\n196       Assistant    Salary    49000\n197         Analyst    Salary    55000\n198         Manager    Salary    62000\n199  Representative    Salary    51000\n\n[200 rows x 3 columns]"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#melting-in-action",
    "href": "lectures/lec_08_presentation.html#melting-in-action",
    "title": "Lecture VII - Pandas and AI",
    "section": "Melting in Action",
    "text": "Melting in Action\nTask: Complete the following task:\n\n# TODO: Load and transform the temperatures.xlsx file by melting it\n# Expected output format:\n#         Date        City  Temperature\n# 0  2024-03-01    Hamburg         7.2\n# 1  2024-03-01 Los_Angeles       18.5\n# 2  2024-03-01      Tokyo        12.3\n# Then, print the maximum temperature per city by grouping by the \"City\" column"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#using-ai-to-generate-code",
    "href": "lectures/lec_08_presentation.html#using-ai-to-generate-code",
    "title": "Lecture VII - Pandas and AI",
    "section": "Using AI to generate code",
    "text": "Using AI to generate code\n\nCoding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#section",
    "href": "lectures/lec_08_presentation.html#section",
    "title": "Lecture VII - Pandas and AI",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#large-language-models-llms",
    "href": "lectures/lec_08_presentation.html#large-language-models-llms",
    "title": "Lecture VII - Pandas and AI",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#training-llms",
    "href": "lectures/lec_08_presentation.html#training-llms",
    "title": "Lecture VII - Pandas and AI",
    "section": "Training LLMs",
    "text": "Training LLMs\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#pattern-recognition",
    "href": "lectures/lec_08_presentation.html#pattern-recognition",
    "title": "Lecture VII - Pandas and AI",
    "section": "Pattern Recognition",
    "text": "Pattern Recognition\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#probability-based-responses",
    "href": "lectures/lec_08_presentation.html#probability-based-responses",
    "title": "Lecture VII - Pandas and AI",
    "section": "Probability based responses",
    "text": "Probability based responses\n\nAfter each written token, it predicts “what should come next?”\nLike a advanced version of the word prediction on your phone\nChooses the most likely next token based on training\nBut can’t actually “think” or “understand” like humans"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#limitations",
    "href": "lectures/lec_08_presentation.html#limitations",
    "title": "Lecture VII - Pandas and AI",
    "section": "Limitations",
    "text": "Limitations\n\nNo true understanding of cause and effect\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on\nCan reflect biases present in training data\nNo emotional understanding (but can simulate responses!)"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#impact-on-jobs",
    "href": "lectures/lec_08_presentation.html#impact-on-jobs",
    "title": "Lecture VII - Pandas and AI",
    "section": "Impact on Jobs",
    "text": "Impact on Jobs\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#current-choices-for-programmers",
    "href": "lectures/lec_08_presentation.html#current-choices-for-programmers",
    "title": "Lecture VII - Pandas and AI",
    "section": "(Current) Choices for Programmers",
    "text": "(Current) Choices for Programmers\n\nGithub Copilot: Integrated into VS Code by Microsoft\nCursor: Fork of VS Code with AI assistance built in\nAider: Chat interface for AI to write code in the terminal\nZed: Lightweight IDE with AI features\n\n\n\n\n\n\n\n\nCurrently, Zed is my favorite one. But this might change in the future, as there is a lot of competition in this space."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#getting-started-with-ai-in-zed",
    "href": "lectures/lec_08_presentation.html#getting-started-with-ai-in-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "Getting started with AI in Zed",
    "text": "Getting started with AI in Zed\n\nYou will need to create an account (right top corner)\nSome free usage per month, after that you need to pay\nFor us, the free plan should be more than enough\nIf you need more prompts, create an account with OpenRouter\nHere you can get an API key and use their free models\n\n\n\n\n\n\n\nIf you use free models, be aware that your prompts are going to be used by the providers and are not private. But for learning and experimenting, this should be no issue."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#using-zed",
    "href": "lectures/lec_08_presentation.html#using-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "Using Zed",
    "text": "Using Zed\n\nOpen the folder with your tutorial files\nCreate a new .py file\nPress Ctrl + L to open the chat"
  },
  {
    "objectID": "lectures/lec_08_presentation.html#asking-for-help",
    "href": "lectures/lec_08_presentation.html#asking-for-help",
    "title": "Lecture VII - Pandas and AI",
    "section": "Asking for help",
    "text": "Asking for help\nTask: Paste the following prompt in to the chat:\nCan you please write me a small number guessing game in python? It should work for one player in the terminal. The player should guess a number between 1-10 and get hints about whether his guess was too large or too small. After 3 tries, end the game if he didn’t succeed with a nice message.\n\nCopy the generated code and paste it into your file."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#more-on-zed",
    "href": "lectures/lec_08_presentation.html#more-on-zed",
    "title": "Lecture VII - Pandas and AI",
    "section": "More on Zed",
    "text": "More on Zed\n\nWhile working with Zed, it will suggest you code changes\nYou can accept or reject them\nThe rest you will learn by doing!\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nYou now have the basic knowledge to start working with tabular data and AI!."
  },
  {
    "objectID": "lectures/lec_08_presentation.html#interesting-books",
    "href": "lectures/lec_08_presentation.html#interesting-books",
    "title": "Lecture VII - Pandas and AI",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_10_projects.html#congratulations",
    "href": "lectures/lec_10_projects.html#congratulations",
    "title": "Lecture X - Programming Projects",
    "section": "Congratulations",
    "text": "Congratulations\nYou’ve learned your first steps to program with Python! 🎉\n. . .",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#structure",
    "href": "lectures/lec_10_projects.html#structure",
    "title": "Lecture X - Programming Projects",
    "section": "Structure",
    "text": "Structure\n\nOver the upcoming weeks you will work on a project\nYou will present it in the last week of this course\nYou can work in groups of up to 3 people\nChoose from a list of ideas or propose your own idea!\n\n. . .\n\n\n\n\n\n\nYou have enough time to discuss different ideas in your group today. From my experience, it is a good idea to choose a project that you are really interested in.",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#presentation",
    "href": "lectures/lec_10_projects.html#presentation",
    "title": "Lecture X - Programming Projects",
    "section": "Presentation",
    "text": "Presentation\n\nEach group has 10 minutes for the presentation with 5 additional minutes for questions\nIntroduce your idea and the development cycle\nProvide code examples and/or visualizations\nComment on challenges and what you’ve learned\n\n. . .\n\n\n\n\n\n\nYour project does not have to be perfect! To pass, you simply have to show that you tried your best. Try, fail potentially and learn - that’s the best way to improve your coding skills.",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-1-data-analysis-and-visualization",
    "href": "lectures/lec_10_projects.html#idea-1-data-analysis-and-visualization",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 1: Data Analysis and Visualization",
    "text": "Idea 1: Data Analysis and Visualization\n\nCollect and clean a data of your choice\nUse libraries like Pandas and Matplotlib for analysis\nCreate visualizations to communicate insights\nExplore data storytelling techniques",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-2-web-scraping-and-data-collection",
    "href": "lectures/lec_10_projects.html#idea-2-web-scraping-and-data-collection",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 2: Web Scraping and Data Collection",
    "text": "Idea 2: Web Scraping and Data Collection\n\nIdentify target websites and data to collect\nUse a library like BeautifulSoup\nHandle data storage and management\nVisualize the collected data in a dashboard",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-3-machine-learning",
    "href": "lectures/lec_10_projects.html#idea-3-machine-learning",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 3: Machine Learning",
    "text": "Idea 3: Machine Learning\n\nChoose a problem and dataset\nPreprocess data and select features\nTrain models using libraries like scikit-learn or TensorFlow\nEvaluate model performance and iterate",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-4-web-dashboard-development",
    "href": "lectures/lec_10_projects.html#idea-4-web-dashboard-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 4: Web Dashboard Development",
    "text": "Idea 4: Web Dashboard Development\n\nDesign a complex dashboard as web application\nVisualize some data or implement calculations\nMake it interesting and interactive\nDeploy the dashboard",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-5-ai-chatbot-development",
    "href": "lectures/lec_10_projects.html#idea-5-ai-chatbot-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 5: AI Chatbot Development",
    "text": "Idea 5: AI Chatbot Development\n\nDefine chatbot purpose and scope\nUse prompt engineering to define chatbot behavior\nIntegrate it with an API of your choice\nDeploy the chatbot in your terminal or as a web service",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-6-computer-vision-and-image-processing",
    "href": "lectures/lec_10_projects.html#idea-6-computer-vision-and-image-processing",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 6: Computer Vision and Image Processing",
    "text": "Idea 6: Computer Vision and Image Processing\n\nWork with image or video datasets\nExplore real-time image processing applications\nUse a library like supervision and YOLO",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-7-simulation",
    "href": "lectures/lec_10_projects.html#idea-7-simulation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 7: Simulation",
    "text": "Idea 7: Simulation\n\nDefine the system or process to simulate\nModel complex interactions and dynamics\nAnalyze simulation results and validate models\nVisualize the results",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-8-game-development",
    "href": "lectures/lec_10_projects.html#idea-8-game-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 8: Game Development",
    "text": "Idea 8: Game Development\n\nDesign game mechanics and storylines\nUse a library like Pygame to create the game\nTest and refine gameplay for user experience",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-9-automation",
    "href": "lectures/lec_10_projects.html#idea-9-automation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 9: Automation",
    "text": "Idea 9: Automation\n\nDefine a task or process to automate\nUse a library like pyautogui to automate the task\nTest and refine the automation for reliability",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#idea-10-other-ideas",
    "href": "lectures/lec_10_projects.html#idea-10-other-ideas",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 10: Other Ideas?",
    "text": "Idea 10: Other Ideas?\n\nHave an idea that is not on the list?\nLet me know and we can discuss it!\nThe best ideas often come from you!",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#ask-questions",
    "href": "lectures/lec_10_projects.html#ask-questions",
    "title": "Lecture X - Programming Projects",
    "section": "Ask Questions",
    "text": "Ask Questions\n\nIn case you need help, you can always ask me!\nThe next lectures are there to work on your project\nYou can also write me an email at vlcek@beyondsimulations.com\n\n\n\n\n\n\n\nI am always happy to help you with your project. There are no stupid questions!",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#use-of-ai",
    "href": "lectures/lec_10_projects.html#use-of-ai",
    "title": "Lecture X - Programming Projects",
    "section": "Use of AI",
    "text": "Use of AI\n\nFeel free to use AI to help you with your project\nHowever, you should understand the code you use\nI’d currently recommend to use Zed as your IDE\nIt has Claude and ChatGPT integrated",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#how-to-continue-after-the-presentations",
    "href": "lectures/lec_10_projects.html#how-to-continue-after-the-presentations",
    "title": "Lecture X - Programming Projects",
    "section": "How to continue after the presentations?",
    "text": "How to continue after the presentations?\n\nThe best way to continue learning is to keep programming in the future\nPotentially, you will continue to do so during your studies\nCoding in your Thesis is a another great way to improve\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#advent-of-code",
    "href": "lectures/lec_10_projects.html#advent-of-code",
    "title": "Lecture X - Programming Projects",
    "section": "Advent of Code",
    "text": "Advent of Code\n\nAdvent of Code is a fun way to keep programming\nHere you can solve programming puzzles during Advent\nIt is completely free and ad-free and starts at 01.12.",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#thats-it-for-the-lecture-series",
    "href": "lectures/lec_10_projects.html#thats-it-for-the-lecture-series",
    "title": "Lecture X - Programming Projects",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nWe now have covered the basics of Python\nI hope you enjoyed the lecture and found it helpful\nIf you have questions or feedback, please let me know!\nI wish you all the best for your studies and your career!",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_projects.html#interesting-books",
    "href": "lectures/lec_10_projects.html#interesting-books",
    "title": "Lecture X - Programming Projects",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "10 Projects",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_10_presentation.html#congratulations",
    "href": "lectures/lec_10_presentation.html#congratulations",
    "title": "Lecture X - Programming Projects",
    "section": "Congratulations",
    "text": "Congratulations\nYou’ve learned your first steps to program with Python! 🎉"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#structure",
    "href": "lectures/lec_10_presentation.html#structure",
    "title": "Lecture X - Programming Projects",
    "section": "Structure",
    "text": "Structure\n\nOver the upcoming weeks you will work on a project\nYou will present it in the last week of this course\nYou can work in groups of up to 3 people\nChoose from a list of ideas or propose your own idea!\n\n\n\n\n\n\n\n\nYou have enough time to discuss different ideas in your group today. From my experience, it is a good idea to choose a project that you are really interested in."
  },
  {
    "objectID": "lectures/lec_10_presentation.html#presentation",
    "href": "lectures/lec_10_presentation.html#presentation",
    "title": "Lecture X - Programming Projects",
    "section": "Presentation",
    "text": "Presentation\n\nEach group has 10 minutes for the presentation with 5 additional minutes for questions\nIntroduce your idea and the development cycle\nProvide code examples and/or visualizations\nComment on challenges and what you’ve learned\n\n\n\n\n\n\n\n\nYour project does not have to be perfect! To pass, you simply have to show that you tried your best. Try, fail potentially and learn - that’s the best way to improve your coding skills."
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-1-data-analysis-and-visualization",
    "href": "lectures/lec_10_presentation.html#idea-1-data-analysis-and-visualization",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 1: Data Analysis and Visualization",
    "text": "Idea 1: Data Analysis and Visualization\n\nCollect and clean a data of your choice\nUse libraries like Pandas and Matplotlib for analysis\nCreate visualizations to communicate insights\nExplore data storytelling techniques"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-2-web-scraping-and-data-collection",
    "href": "lectures/lec_10_presentation.html#idea-2-web-scraping-and-data-collection",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 2: Web Scraping and Data Collection",
    "text": "Idea 2: Web Scraping and Data Collection\n\nIdentify target websites and data to collect\nUse a library like BeautifulSoup\nHandle data storage and management\nVisualize the collected data in a dashboard"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-3-machine-learning",
    "href": "lectures/lec_10_presentation.html#idea-3-machine-learning",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 3: Machine Learning",
    "text": "Idea 3: Machine Learning\n\nChoose a problem and dataset\nPreprocess data and select features\nTrain models using libraries like scikit-learn or TensorFlow\nEvaluate model performance and iterate"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-4-web-dashboard-development",
    "href": "lectures/lec_10_presentation.html#idea-4-web-dashboard-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 4: Web Dashboard Development",
    "text": "Idea 4: Web Dashboard Development\n\nDesign a complex dashboard as web application\nVisualize some data or implement calculations\nMake it interesting and interactive\nDeploy the dashboard"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-5-ai-chatbot-development",
    "href": "lectures/lec_10_presentation.html#idea-5-ai-chatbot-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 5: AI Chatbot Development",
    "text": "Idea 5: AI Chatbot Development\n\nDefine chatbot purpose and scope\nUse prompt engineering to define chatbot behavior\nIntegrate it with an API of your choice\nDeploy the chatbot in your terminal or as a web service"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-6-computer-vision-and-image-processing",
    "href": "lectures/lec_10_presentation.html#idea-6-computer-vision-and-image-processing",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 6: Computer Vision and Image Processing",
    "text": "Idea 6: Computer Vision and Image Processing\n\nWork with image or video datasets\nExplore real-time image processing applications\nUse a library like supervision and YOLO"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-7-simulation",
    "href": "lectures/lec_10_presentation.html#idea-7-simulation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 7: Simulation",
    "text": "Idea 7: Simulation\n\nDefine the system or process to simulate\nModel complex interactions and dynamics\nAnalyze simulation results and validate models\nVisualize the results"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-8-game-development",
    "href": "lectures/lec_10_presentation.html#idea-8-game-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 8: Game Development",
    "text": "Idea 8: Game Development\n\nDesign game mechanics and storylines\nUse a library like Pygame to create the game\nTest and refine gameplay for user experience"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-9-automation",
    "href": "lectures/lec_10_presentation.html#idea-9-automation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 9: Automation",
    "text": "Idea 9: Automation\n\nDefine a task or process to automate\nUse a library like pyautogui to automate the task\nTest and refine the automation for reliability"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#idea-10-other-ideas",
    "href": "lectures/lec_10_presentation.html#idea-10-other-ideas",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 10: Other Ideas?",
    "text": "Idea 10: Other Ideas?\n\nHave an idea that is not on the list?\nLet me know and we can discuss it!\nThe best ideas often come from you!"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#ask-questions",
    "href": "lectures/lec_10_presentation.html#ask-questions",
    "title": "Lecture X - Programming Projects",
    "section": "Ask Questions",
    "text": "Ask Questions\n\nIn case you need help, you can always ask me!\nThe next lectures are there to work on your project\nYou can also write me an email at vlcek@beyondsimulations.com\n\n\n\n\n\n\n\nI am always happy to help you with your project. There are no stupid questions!"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#use-of-ai",
    "href": "lectures/lec_10_presentation.html#use-of-ai",
    "title": "Lecture X - Programming Projects",
    "section": "Use of AI",
    "text": "Use of AI\n\nFeel free to use AI to help you with your project\nHowever, you should understand the code you use\nI’d currently recommend to use Zed as your IDE\nIt has Claude and ChatGPT integrated"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#how-to-continue-after-the-presentations",
    "href": "lectures/lec_10_presentation.html#how-to-continue-after-the-presentations",
    "title": "Lecture X - Programming Projects",
    "section": "How to continue after the presentations?",
    "text": "How to continue after the presentations?\n\nThe best way to continue learning is to keep programming in the future\nPotentially, you will continue to do so during your studies\nCoding in your Thesis is a another great way to improve\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#advent-of-code",
    "href": "lectures/lec_10_presentation.html#advent-of-code",
    "title": "Lecture X - Programming Projects",
    "section": "Advent of Code",
    "text": "Advent of Code\n\nAdvent of Code is a fun way to keep programming\nHere you can solve programming puzzles during Advent\nIt is completely free and ad-free and starts at 01.12."
  },
  {
    "objectID": "lectures/lec_10_presentation.html#thats-it-for-the-lecture-series",
    "href": "lectures/lec_10_presentation.html#thats-it-for-the-lecture-series",
    "title": "Lecture X - Programming Projects",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nWe now have covered the basics of Python\nI hope you enjoyed the lecture and found it helpful\nIf you have questions or feedback, please let me know!\nI wish you all the best for your studies and your career!"
  },
  {
    "objectID": "lectures/lec_10_presentation.html#interesting-books",
    "href": "lectures/lec_10_presentation.html#interesting-books",
    "title": "Lecture X - Programming Projects",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "tutorials/tut_02_control.html",
    "href": "tutorials/tut_02_control.html",
    "title": "Tutorial II - Control Structures for Your Code",
    "section": "",
    "text": "Introduction\nJust like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions. Don’t worry, I won’t repeat this section again and again.\n\n\nDecoding secret messages with methods\nIn this exercise, we’ll practice string manipulation and slicing. You’ll work with a secret message encoded using various string operations and learn how to apply some new methods like title(), replace() and count(). By following a series of steps, you’ll gradually decode the message. Let’s begin with the encoded message and work through each decoding step:\n\n# Decode a secret message by following a series of instructions.\n# Each instruction requires you to use different operations and methods.\n# The encoded message is:\nsecret_message = \".tnega terces a sa slliks ym sevorpmi erutcel oN\"\n\n# a) TODO: Reverse the string\n# Hint: You can use slicing to reverse a string\n# Your code here\n\n# b) TODO: Remove the period at the end\n# Your code here\n\n# c) TODO: Replace 'No' with 'This'\n# Your code here\n\n# d) TODO: Convert the string to title case\n# -&gt; Capitalize the first letter of each word\n# Your code here\n\n# e) TODO: Add an exclamation mark at the end of the sentence\n# Your code here\n\n# f) TODO: Count how many times the letter 's' appears in the decoded message (upper and lower case)\n# Your code here\n\n\n\n\n\n\n\nUse the help() function to get more information about a method. For example, typing help(str.replace) in the shell will show the documentation for the replace() method. To exit the documentation, press q.\n\n\n\n\n\nClassifying temperatures\nIn this exercise, we’ll practice using conditional statements to classify temperatures into different categories. We’ll create a program that takes a temperature input from the user and provides a classification based on the temperature range. This exercise will help you understand how to use if-elif-else statements, handle user input, and implement a simple loop for program repetition.\n\n# Use if-elif-else statements to classify the temperature\n# Below 0: \"Freezing\"\n# 0-10: \"Cold\"\n# 11-20: \"Cool\"\n# 21-30: \"Warm\"\n# Above 30: \"Hot\"\n\n# a) TODO: Formulate a small programm that asks the user for a temperature and then prints the corresponding classification.\n# Your code here\n\n# b) TODO: Test your code with -5, 15 and 35 as temperature\n# Hint: You dont't need any new code here, just run the code from the previous step with different inputs.\n\n# c) TODO: Add a feature that asks the user if they want to continue and then repeats the programm if they type \"yes\".\n# If the user does not want to continue, the programm should end.\n# Your code here\n\n\n\nNumber guessing game\nIn this exercise, we’ll create an interactive number guessing game for two players. This game will help you practice using loops, conditional statements, and user input handling. You’ll also learn how to implement a simple game logic and manage player turns. This exercise will reinforce your understanding of control structures and basic development concepts in Python.\n\n# Create a number guessing game with 2 players. The first player is the game master and the second player is the guesser.\n# Start by asking for their names. Then, ask the game master to input the secret number between 1 and 20.\n# Make sure, that the number is not shown by adding at least 25 new lines after the input prompt. Then, ask the player to guess the number.\n# If the guess is too high or too low, provide feedback in order to help the player and let the player guess again.\n# If the guess is correct, congratulate the player and end the game.\n\n# a) TODO: Your task list in more detail:\n# - Ask for the names of the game master and the player\n# - Implement the main game loop using a while loop\n# - Ask the game master for the secret number from 1-20\n# - Hint: Use `print(\"\\n\" * 25)` to add 25 new lines\n# - Ask the player for a guess\n# - Compare the guess to the secret number\n# - Provide feedback (too high, too low, or correct)\n# - Keep track of the number of guesses\n# - End the game when the correct number is guessed\n# - Print a congratulatory message with the number of guesses taken\n# - Use the given structure below to implement the game.\n\n# Ask for the names of the game master and the player\ngame_master = input(\"Enter the name of the game master: \")\nplayer = input(\"Enter the name of the player: \")\n\n# Ask the game master for the secret number\nwhile True:\n    secret_number = int(input(f\"{game_master}, enter the secret number between 1 and 20: \"))\n    if secret_number &lt; 1 or secret_number &gt; 20:\n        print(\"Please enter a valid number.\")\n    else:\n        break\n\nprint(\"\\n\" * 25)  # Add 25 new lines to hide the secret number\n\n# Initialize variables\nguesses = 0\ncorrect = False\n\n# Main game loop\nwhile not correct:\n    # Ask the player for a guess\n    # Add the code here to ask the player for a guess\n    guesses += 1\n\n    # Compare the guess to the secret number\n    # Add code here to compare the guess to the secret number\n    # If the guess is correct, set correct to True in order to end the game.\n\n# Print congratulatory message\n# Add the code here to print a congratulatory message.\n\n# b) TODO: Add a feature to allow both players to play again, this time switching the roles with the game master.\n# If the player wants to play again, the game should reset and the player should be able to play again, entering a new secret number to guess for the former game master.\n# If the player does not want to play again, the game should end. Hint: Make sure to inform the players about the new game master using their stated names.\n# Your code here\n\n# c) TODO: Bonus Task - Enhance the game by adding difficulty levels\n# Implement three difficulty levels: Easy (1-10), Medium (1-20), and Hard (1-30)\n# Ask the game master to choose a difficulty level before entering the secret number\n# Adjust the range of possible numbers based on the chosen difficulty\n# Provide a different number of allowed guesses for each difficulty level:\n#   - Easy: 5 guesses\n#   - Medium: 10 guesses\n#   - Hard: 15 guesses\n# If the player doesn't guess the number within the allowed guesses, end the game and reveal the secret number\n# Your code here\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "02 Control Flow",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_04_dimensions.html",
    "href": "tutorials/tut_04_dimensions.html",
    "title": "Tutorial IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Calculating distances on a 2D grid\nIn this exercise, you’ll work with tuples representing points in 2D space. You’ll create functions to calculate distances from the origin, find the farthest point, and practice working with lists of tuples. This task will help you understand how to manipulate multi-dimensional data and perform calculations based on coordinates.\n\n# TODO: Calculate distances in 2 dimensions\n# - You are working with tuples representing points in 2D space (x, y).\n# - Write a function that takes a tuple and returns the distance from the origin (0, 0).\n# - Create a list of 5 tuples representing multiple points and calculate the distance for each point.\n# - Create a function that takes a list of tuples and returns the point that is farthest from the origin.\n# - Print the result to the console.\n\n\n\nA phonebook application\nIn this exercise, you’ll create a simple phonebook application that demonstrates the use of dictionaries in Python. This task will help you practice working with key-value pairs, user input handling, and basic file I/O operations. By implementing functions to add, update, and delete entries, you’ll gain hands-on experience with common dictionary operations. Additionally, saving the phonebook to a text file will introduce you to persisting data between program executions.\n\n# TODO: Create a phonebook application\n# - Create a dictionary to store names and phone numbers.\n# - Add at least 5 entries to the dictionary in the initialisation.\n# - Write a function to look up a phone number by name based on a user input.\n# - Write a function to update a phone number based on a user input.\n# - Write a function to delete an entry by name based on a user input.\n# - Write a function that saves the phonebook to a text file.\n# - Write a small program that asks for a user input on whether the user wants to add, remove, or update a phone number.\n# - After each operation, the phonebook should be saved to the text file.\n\n\n\nTreasure Hunt Game\nIn this task on a treasure hunt game, you’ll repeat how to handle user input and learn how to manage game states in several dimensions. Furthermore, you’ll have the opportunity to enhance the game with additional features, making it more dynamic and challenging.\n\n# a) TODO: Take a look at the code below and the instructions and add the missing code to make the game work.\n# - The game should be played on a 3x3 grid.\n# - The treasure is located at position (3, 3).\n# - There is an obstacle at position (2, 2).\n# - The player starts at position (1, 1) in the upper left corner.\n# - The player can move up, down, left, or right.\n# - The player cannot move outside the boundaries of the grid.\n# - If the player hits the obstacle, the game is over.\n# - If the player finds the treasure, the game is won.\n# - Continuously prompt the player to enter a move (up, down, left, right).\n\ngrid_size = 3 # Size of the grid\ntreasure = (3,3) # Tuple for the treasure\nobstacle = (2,2) # Tuple for the obstacle\n\n# Player's starting position in a dictionary\nplayer_position = {\"x\": 1, \"y\": 1}\n\n# Function to move the player\ndef move_player(direction):\n    if direction == \"up\" and player_position[\"y\"] &gt; 1:\n        player_position[\"y\"] -= 1\n    # TODO: Add a move down\n    # TODO: Add a move left\n    elif direction == \"right\" and player_position[\"x\"] &lt; grid_size:\n        player_position[\"x\"] += 1\n    else:\n        print(\"Invalid move. Try again.\")\n\n# Function to check the player's position\ndef check_position():\n    pos = (player_position[\"x\"], player_position[\"y\"])\n    if pos == treasure:\n        print(\"You found the treasure and won!\")\n        return False\n    # TODO: Check if the player hit the obstacle and return False if so\n    else:\n        return True\n\n# Main game loop\ndef play_game():\n    print(\"Welcome to the Mini Treasure Hunt Game!\")\n    while True:\n        print(f\"Current position: {player_position}\")\n        move = input(\"Enter move (up, down, left, right): \").strip().lower()\n        move_player(move)\n        if check_position() == False:\n            break\n\n# Start the game\nplay_game()\n\n# b) TODO: Improve the game by adding further functionality as described below.\n# - There should be a game master who can set the size of the grid, the treasure and the obstacle.\n# - Use the input to initialise the game\n# - Print all information to the console at the start of the game\n# Your code here\n\n# c) TODO: Add a feature to allow for multiple obstacles on the grid.\n# - The game master should be able to set the number of obstacles in the grid and their positions.\n# - Print the position of the obstacles and the treasure after the game has been finished.\n# - Try to make the printout as nice as possible.\n# Your code here\n\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "04 Dimensions",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html",
    "href": "tutorials/tut_06_modules.html",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "",
    "text": "In this task, we will implement a simple game where the user has to guess a scrambled word. Again, we will use the methods we have learned so far: string methods, list methods, random module, and conditional statements.\n\n# TODO: Write the code for a small game\n# The game should work as follows:\n# - The computer selects a word from a list of words\n# - The computer scrambles the word and shows it to the user\n# - The user has to guess the word and has three guesses\n# - The user gets feedback on whether their guess is correct or not\n# - The computer tells the user how many guesses they used\n\n# List of words to choose from for the game\nwords = [\"python\", \"programming\", \"computer\", \"algorithm\", \"database\"]\n\n# Hint: Use the random.choice() function to select a word from the list and try to come up with the rest of the code yourself!\n\nimport random\n\ndef scramble_word(word):\n    # Convert the word to a list of characters, shuffle them, and join back into a string\n    chars = list(word)\n    # Your code to shuffle the list here!\n    return ''.join(chars)\n\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html#scrambled-word-game",
    "href": "tutorials/tut_06_modules.html#scrambled-word-game",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "",
    "text": "In this task, we will implement a simple game where the user has to guess a scrambled word. Again, we will use the methods we have learned so far: string methods, list methods, random module, and conditional statements.\n\n# TODO: Write the code for a small game\n# The game should work as follows:\n# - The computer selects a word from a list of words\n# - The computer scrambles the word and shows it to the user\n# - The user has to guess the word and has three guesses\n# - The user gets feedback on whether their guess is correct or not\n# - The computer tells the user how many guesses they used\n\n# List of words to choose from for the game\nwords = [\"python\", \"programming\", \"computer\", \"algorithm\", \"database\"]\n\n# Hint: Use the random.choice() function to select a word from the list and try to come up with the rest of the code yourself!\n\nimport random\n\ndef scramble_word(word):\n    # Convert the word to a list of characters, shuffle them, and join back into a string\n    chars = list(word)\n    # Your code to shuffle the list here!\n    return ''.join(chars)\n\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html#custom-modules",
    "href": "tutorials/tut_06_modules.html#custom-modules",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "Custom Modules",
    "text": "Custom Modules\nHere we will practice how to create our own modules and use them in our scripts. Our objective is to create a small module that contains a few functions for a calculator.\n\n# TODO: Create a new module called calculator.py\n# The module should contain at least four functions:\n# add, subtract, multiply, and divide\n# Afterward, the following code should work:\n\nimport calculator as calc\n\nassert calc.add(2, 3) == 5\nassert calc.subtract(5, 1) == 4\nassert calc.multiply(4, 7) == 28\nassert calc.divide(10, 2) == 5\n\nprint(\"Wonderful, all tests passed!\")",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html#random-package",
    "href": "tutorials/tut_06_modules.html#random-package",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "Random Package",
    "text": "Random Package\nDo you remember the random number guessing game from previous tutorials? We will now use the random package to implement a small version of it without any game master.\n\n# TODO: Implement a random number guessing game.\n# The game should work as follows:\n# - The computer selects a random number between 1 and 10\n# - The user has to guess the number and has three guesses\n# - The computer tells the user whether their guess is too high, too low, or correct\n# - The computer should also print how many guesses the user made before guessing the number correctly\n# - It should also ask the user if they want to play again\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html#regular-expressions",
    "href": "tutorials/tut_06_modules.html#regular-expressions",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "Regular Expressions",
    "text": "Regular Expressions\nIn the last task, we will practice how to use regular expressions to match patterns in text. Imagine you are an overworked consultant and you have the task to extract all dates from a text.\n\n# TODO: Try to extract all dates in the text below:\ntext = \"\"\"\nHere is a date: 12.03.2024. Here is another one: 01/01/2024. And here is the third one: 2024-01-01.\nLet's add more: 15-04-2023, 16/05/2023, and 17.06.2023.\nIn July, we have 18/07/2023 and 19-07-2023.\nAugust brings us 20.08.2023 and 21/08/2023.\nSeptember dates include 22-09-2023 and 23.09.2023.\nOctober has 24/10/2023 and 25-10-2023.\nNovember features 26.11.2023 and 27/11/2023.\nFinally, December rounds out the year with 28-12-2023 and 29.12.2023.\n\nContinuing with more dates:\n01-01-2025, 02/02/2025, 03.03.2025, 04-04-2025, 05/05/2025, 06.06.2025,\n07-07-2025, 08/08/2025, 09.09.2025, 10-10-2025, 11/11/2025, 12.12.2025.\n\nEven more dates:\n13-01-2026, 14/02/2026, 15.03.2026, 16-04-2026, 17/05/2026, 18.06.2026,\n19-07-2026, 20/08/2026, 21.09.2026, 22-10-2026, 23/11/2026, 24.12.2026.\n\nAnd some more:\n25-01-2027, 26/02/2027, 27.03.2027, 28-04-2027, 29/05/2027, 30.06.2027,\n01-07-2027, 02/08/2027, 03.09.2027, 04-10-2027, 05/11/2027, 06.12.2027.\n\"\"\"\n\n# Your code here",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_06_modules.html#a-better-password-strength-checker",
    "href": "tutorials/tut_06_modules.html#a-better-password-strength-checker",
    "title": "Tutorial VI - Using Modules and Packages",
    "section": "A better Password Strength Checker",
    "text": "A better Password Strength Checker\nIn this task, we will implement an improved password strength checker. We can use and practice all methods we have learned so far: string methods, regular expressions, and conditional statements.\n\n# TODO: Implement a new password strength checker\n# Check for:\n# - Minimum length of 8 characters\n# - At least one uppercase letter\n# - At least one lowercase letter\n# - At least one digit\n# - At least one special character (!@#$%^&*)\n# Return \"Weak\" if no criteria is met, \"Medium\" if at least 3 criteria are met, \"Strong\" if all criteria are met\n\n# Test your function\nprint(check_password_strength(\"abc123\"))  # Should return \"Weak\"\nprint(check_password_strength(\"Str0ngP@ssw0rd\"))  # Should return \"Strong\"\nprint(check_password_strength(\"Password123\"))  # Should return \"Medium\"",
    "crumbs": [
      "06 Modules",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tut_08_pandas.html",
    "href": "tutorials/tut_08_pandas.html",
    "title": "Tutorial VII - Pandas and AI",
    "section": "",
    "text": "NASA GISTEMP Climate Change Analysis\nIn this exercise, you’ll use Pandas to analyze real global temperature anomaly data from NASA, helping to understand trends in climate change over time. Work together with the LLM in your Code Editor to complete the task.\nThe dataset is provided by the GISS Team, 2024: GISS Surface Temperature Analysis (GISTEMP), version 4. NASA Goddard Institute for Space Studies. Dataset at https://data.giss.nasa.gov/gistemp/.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# First, we load the NASA GISTEMP dataset for global temperature anomalies.\nurl = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv\"\ntemp_anomaly_data = pd.read_csv(url, skiprows=1) # skiprows=1 ensures that the first column is not read as a row index\n\n# Convert all numeric columns (except 'Year') to float, replacing '***' with NaN\nnumeric_columns = temp_anomaly_data.columns.drop('Year')\ntemp_anomaly_data[numeric_columns] = temp_anomaly_data[numeric_columns].replace('***', float('nan')).astype(float)\n\n# TODO: a) Display the first 5 rows to learn basic information about the DataFrame. For your work, you only need the 'Year' and and the data from all months. Drop the rest of the columns.\n# Your code here\n\n# TODO: b) Calculate and print the average temperature anomaly for each year.\n# Hint: To do so, you first need to pd.melt()` the DataFrame to convert months to a single column.\n# Your code here\n\n# TODO: c) Find the year with the highest temperature anomaly and the year with the lowest.\n# Hint: Use the `idxmax()` and `idxmin()` methods\n# Your code here\n\n# TODO: e) Save the melted DataFrame to a Excel file with the name 'temp_anomaly_data.xlsx' for next lecture.\n# Your code here\n\n\n\nCreate a Game with AI\nIn this exercise, you’ll use Pygame to create a jump and run game. Work together with the LLM in your Code Editor to complete the task. Start by asking the LLM to generate the game code for a simple jump and run game. Then, continue to improve the game together with the LLM step by step. We will present the most interesting games today at the end of the lecture.\n\n\nThat’s it!\nAfter a week, you can find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "08 Pandas and AI",
      "Tutorial"
    ]
  },
  {
    "objectID": "assignments/assignment_01.html",
    "href": "assignments/assignment_01.html",
    "title": "Assignment I",
    "section": "",
    "text": "Introduction\nThis is the first of the two assignments for this course. It will be graded as pass/fail. You and your group of up to 3 students will need to submit it before the start of lecture 7 on scientific programming. Please hand in one assignment per group via the e-mail address vlcek@beyondsimulations.com.\nIn the assignment, you will practice the concepts you learned in the first part of the course. You will find a lot of information online and you are welcome to use generative AI to help you with the assignment. However, you are not allowed to copy the code from other groups and you have to indicate where and how you used AI to help you. Try to use comments to structure and to explain your code. Furthermore, use descriptive variable names and format your code nicely in order to make it more readable.\n\n\nTax refund for donations\nIn this excercise, you will create a program that is able to calculate the amount of tax a person can get back for a donation. First, research the rules for tax refunds for donations in Germany. Then, create a program that is able to calculate the amount of tax a person can get back for a donation. The program should ask the user for the amount of the donation and the yearly income and then calculate the amount of tax the user can get back. The program should then print the amount of tax to the console. Note, that the program should also handle wrong inputs from the user, e.g. if the user enters a negative donation amount or a non-numeric income.\n\n# Tax refund for donations\n# TODO: Create a program that is able to calculate the amount of tax a person can get back for a donation.\n# Your code here\n\n\n\n\n\n\n\nUse the input() function to get user input in order to let the user interact with your program.\n\n\n\n\n\nText based adventure game\nIn this excercise, you will create a text based adventure game. You are completely free in the choice of the story, but it must at least include 4 choices, 3 different endings, the choice to restart the game and yourself as a character of the game. Try to use the concepts of conditionals, loops, and functions to create a game that is both fun and interactive for the user. Note, that the program should also handle wrong inputs from the user, e.g. if the user enters a choice that is not available.\n\n# Test based adventure game\n# TODO: Create a text based adventure game with at least 3 choices, 2 different endings and the choice to restart the game.\n# Your code here\n\n\n\nHangman\nIn this excercise, you will create a program that is able to play the game Hangman. The program should ask the game master for a secret word. Afterward, it should ask the player to guess a letter and then check if the letter is in the word. The program should then print the word with the guessed letters and the number of tries left. The program should also handle wrong inputs from the user, e.g. if the user enters a non-letter or a letter that is already guessed.\n\n# Hangman\n# TODO: Create a program that is able to play the game Hangman with a game master and one player.\n# Your code here\n\n\n\nCaesar Cipher\nIn this excercise, you will create a program that is able to encrypt and decrypt messages using the Caesar Cipher. The program should ask the user for a message and a key and whether to encrypt or decrypt the message. The program should then encrypt the message by shifting each letter of the message by the key or decrypt the message by shifting each letter of the message back by the key. The program should then print the encrypted or decrypted message and asks the user whether to continue with the next message or to quit the program. Note, that you only need to encrypt or decrypt letters, keep other characters unchanged.\n\n# TODO: Create a programm able to encrypt and decrypt messages using the Caesar Cipher.\n# Your code here",
    "crumbs": [
      "Assignments",
      "01 Assignment"
    ]
  }
]