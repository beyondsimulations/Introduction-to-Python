---
title: "Tutorial II - Control Structures"
subtitle: "Programming with Python"

format:
    html:
        theme: litera
        highlight-style: arrow
        linkcolor: "#a60000"
        code-copy: true
        code-link: true
        toc: true
        toc-location: right
        code-overflow: wrap
    pdf: 
        documentclass: report
        geometry:
            - margin=1in
        fontfamily: roboto
        fontfamilyoptions: sfdefault
        colorlinks: true
---

# Introduction
Just like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else's solution is very different from developing your own.

Remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions. Don't worry, I won't repeat this section again and again.

# Decoding secret messages with methods
In this exercise, we'll practice string manipulation and slicing. You'll work with a secret message encoded using various string operations and learn how to apply some new methods like `title()`, `replace()` and `count()`. By following a series of steps, you'll gradually decode the message. Let's begin with the encoded message and work through each decoding step:

```{python}
# Decode a secret message by following a series of instructions.
# Each instruction requires you to use different operations and methods.
# The encoded message is:
secret_message = "!nohtyyP gnidoc nrael ot nuf si tI"

# a) TODO: Reverse the string
# Hint: You can use slicing to reverse a string
# Your code here

# b) TODO: Remove the exclamation mark at the beginning
# Your code here

# c) TODO: Replace 'yP' with 'Py'
# Your code here

# d) TODO: Convert the string to title case
# -> Capitalize the first letter of each word
# Your code here

# e) TODO: Add spaces around the word 'coding' 
# Hint: Use the replace() method
# Your code here

# f) TODO: Count how many times the letter 'n' appears in the decoded message
# Your code here

```

:::{.callout-tip}
Use the `help()` function to get more information about a method. For example, typing `help(str.replace)` in the shell will show the documentation for the `replace()` method. To exit the documentation, press `q`.
:::

