---
title: "Lecture I - Introduction"
subtitle: "Programming with Python"
author: "Dr. Tobias Vlćek"
institute: "Kühne Logistics University Hamburg <br> Fall 2024"

format:
    html:
        theme: litera
        highlight-style: breezedark
        linkcolor: "#a60000"
        slide-number: true
        code-copy: true
        code-link: true
        toc: true
        toc-location: right
    pdf: default
    revealjs:
        theme: [default, ../styles.scss]
        transition: slide
        transition-speed: fast
        highlight-style: breezedark
        slide-number: true
        code-copy: true
        code-link: true
        preview-links: auto
        footer: " {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-introduction.qmd)"
        output-file: lecture-presentation.html
---

# [About this course]{.flow} {background-color="#FFE0D3"}

## About me

:::{.incremental}
- Post-doctoral researcher from the University of Hamburg
- **Field:** Optimizing and simulating complex systems
- **Languages:** of choice: Julia, Python and Rust
- **Interest:** Mathematical Modelling, Simulations, Machine Learning
- **Teaching:** Operations Research, Algorithms, and Programming
- **Contact:** [vlcek@beyondsimulations.com](mailto:vlcek@beyondsimulations.com)
:::
. . .

:::{.callout-note}
I really appreciate active participation and interaction!
:::

## Course outline

- **Part I:** Introduction to Programming with Python
- **Part II:** Data Science Tools with Python
- **Part III:** Programming Projects

## Participation

- Prequisite for course *Management Science* (Prof. Goel)
- Try actively participating in this course 
- You will find it much (!) easier to follow Prof. Goel's course
- Materials will be provided in the KLU portal
- Slides are hosted at [python.beyondsimulations.com](https://python.beyondsimulations.com)

## Teaching

- **Lecture:** Presentation of tools and concepts, based on examples
- **Tutorial:** Hands-on examples to be solved in groups
- **Difficulty:** Difficult at first, but gradually easier

## Passing the course 

- Pass/fail course
- 75% attendance required for passing the course
- 2 assignments and 1 little project
- You will be given programming exercises to solve with Python
- You can group up (3 students) and work together 
- Each student group submits one solution together

## Solution

- Provide a code solution to the problem (`.py` files)
- Code files need to be executable
- Detailed explanations of your code should be provided
- Use comments or docstrings in your code
- Provide a general (verbal) introduction to each problem

. . .

:::{.callout-tip}
I'd encourage you to start and submit your solution early
:::

## Difficulty of the course

- We'll cover the basics of programming (in Python) at the beginning
- This is similar to learning a new foreign language
- First, you have to get used to the language and learn the first words
- Later, you'll be able to apply the language and see results
- Similar to learning a language: *Practice, practice, practice!*

## What to expect
- Some **investment** in the beginning to see the **return** later
- You can ask questions and get support anytime 
- After completing the course, you will be able to read code 
- **and** write your own program using Python
- **That's quite something!**

## Help from AI

- You are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 ...)
- These new tools are really powerful for learning Python!
- They can help you a lot to get started with programming

. . .

:::{.callout-warning}
But you should *not* simply use them to *replace* your learning.
:::

# [Why learn programming?]{.flow} {background-color="#FFE0D3"}

## Analytics {background-color="black" background-image="https://images.unsplash.com/photo-1666875753105-c63a6f3bdc86"}

::: footer
:::

## Research {background-image="https://images.unsplash.com/photo-1690050070284-d1a628f5b494"}

::: footer
:::

## Visualization {background-color="black" background-image="https://images.unsplash.com/photo-1584291527935-456e8e2dd734"}

::: footer
:::

## Finance {background-color="black" background-image="https://images.unsplash.com/photo-1642052502780-8ee67e3bf930"}

::: footer
:::

## Logistics {background-color="black" background-image="https://images.unsplash.com/photo-1465447142348-e9952c393450"}

::: footer
:::

# [Introduction]{.flow} {background-color="#FFE0D3"}

## Goals of the course

* Essential concepts and tools of modern programming
* Automated solutions for recurrent tasks
* Algorithm-based solutions of complex problems
* **Usage of AI** in a specific context

## Language

* Python (**3**), but the concepts expand to other languages, too!
* A good language to get started
* Can be used for a wide variety of tasks
* Heavily used in industry and research (data science, AI)

# [How to *learn* programming]{.flow} {background-color="#FFE0D3"}

## My personal recommendation

1. **Be present**: Attend the lecture and participate
2. **Put in some work**: Repeat lecture notes and try examples yourself
3. **Do coding**: Run code examples on your own, play around, *google*/*find help*, modify, and solve problems on your own

. . .

:::{.callout-note}
Great resources to start are books. In my opinion they are much more helpful than watching videos and there are some great books out there! Problems to solve can for example be found on [Codewars](https://www.codewars.com/).
:::

## Don't give up!

- Programming is **problem solving**, don't get **frustrated** too easily!
- Learn something new: Expect to **stretch** your comfort zone
- Collaborate with your colleagues and figure out solutions together

<center>

<br>
<iframe src="https://giphy.com/embed/Qkbm4jGMam7PfdWzHM" width="480" height="270" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

<center>

## The learning path can be quite hilly
- Help each other! :) 
- Try to find help: Lecture materials and books, Python (library) documentation, online (google, ChatGPT, StackOverflow.com)
- In case you get frustrated, read the following [nice little blog post about programming on medium.com](https://medium.com/sololearn/why-learning-to-code-is-soooo-hard-3c2372e9d12c)



## Let's get started!

## Why Python?

- **Simple Syntax**: Python’s syntax is straightforward and easy to learn.
- **Versatility**: Used in web development, data analysis, artificial intelligence, and more.
- **Community Support**: A large community of users and extensive documentation.

## Setting Up Python

- Download Python from the [official Python website](https://www.python.org/downloads/).
- Install and verify your installation by running the following in your terminal.
```shell
python --version
```

## Your First Python Code

```{.python}
# This is a comment in Python
print("Hello, World!")
```
