---
title: "Lecture II - Control Structures for Your Code"
subtitle: "Programming with Python"
author: "Dr. Tobias Vlćek"
institute: "Kühne Logistics University Hamburg <br> Fall 2024"
title-slide-attributes:
    data-background-color: "#FFE0D3"

execute:
    echo: true

format:
    revealjs:
        theme: [default, ../styles.scss]
        transition: slide
        transition-speed: fast
        highlight-style: breezedark
        width: 1260
        height: 840
        slide-number: true
        code-copy: true
        code-link: true
        preview-links: auto
        footer: " {{< meta title >}} | {{< meta subtitle >}} | {{< meta author >}} | [Home](lecture-introduction.qmd)"
        output-file: lecture-presentation.html
    html:
        theme: litera
        highlight-style: breezedark
        linkcolor: "#a60000"
        slide-number: true
        code-copy: true
        code-link: true
        toc: true
        toc-location: right
    pdf: 
        documentclass: report
---

# [Quick Recap of the last Lecture]{.flow .r-fit-text} {.title}

## Variables and Data Types

- Python uses dynamic typing
- Basic data types: int, float, str, bool
- Variables are created by assignment

## Arithmetic Operators

- Addition: `+`
- Subtraction: `-`
- Multiplication: `*`
- Division: `/`
- Floor Division: `//`
- Exponentiation: `**`
- Modulo: `%`

## F-Strings

- F-strings provide a way to embed expressions inside string literals
- You can include expressions inside f-strings by placing them inside curly braces `{}`
- This makes it easier to include dynamic content

# [Indexing and Slicing]{.flow .r-fit-text} {.title}

## Indexing

- Indexing allows you to access elements of a sequence (e.g., string, list, tuple) by their position
- Positive indexing starts at 0 for the first element
- Negative indexing starts at -1 for the last element

## Slicing

- Slicing allows you to extract a portion of a sequence
- Syntax: `sequence[start:stop:step]`
- `start` is the index of the first element to include
- `stop` is the index of the first element to exclude
- `step` is the increment between indices (default is 1)
- Slicing allows you to extract a portion of a sequence (e.g., string, list, tuple) by specifying the start and stop indices    
- The result is a new sequence containing the extracted elements

# [Comparison Operators]{.flow .r-fit-text} {.title}

- Comparison operators are used to compare two values
- The result of a comparison is a boolean value (`True` or `False`)
- Common comparison operators: `==`, `!=`, `>`, `<`, `>=`, `<=`

# [Logical Operators]{.flow .r-fit-text} {.title}

- Logical operators are used to combine multiple comparison operators
- Common logical operators: `and`, `or`, `not`

# [Control Structures]{.flow .r-fit-text} {.title}

- Control structures are used to control the flow of execution in a program
- Common control structures: `if`, `elif`, `else`, `for`, `while`   
- `if` statements are used to execute a block of code if a condition is true
- `elif` statements are used to execute a block of code if the previous condition is false and the current condition is true
- `else` statements are used to execute a block of code if the previous conditions are false
- `for` loops are used to iterate over a sequence (e.g., list, tuple, string)
- `while` loops are used to execute a block of code repeatedly until a condition is false   

# [Conditional Statements]{.flow .r-fit-text} {.title}

- Conditional statements allow you to execute different blocks of code based on whether a condition is true or false
- Common conditional statements: `if`, `elif`, `else`

# [Loops]{.flow .r-fit-text} {.title}

- Loops allow you to execute a block of code repeatedly
- Common loops: `for`, `while`








