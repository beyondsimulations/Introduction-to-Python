[
  {
    "objectID": "literature.html",
    "href": "literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of Python programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "literature.html#books",
    "href": "literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "literature.html#resources",
    "href": "literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "literature.html#books-1",
    "href": "literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "literature.html#resources-1",
    "href": "literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html",
    "href": "part-1/lecture-introduction.html",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects\n\n\n\n\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at python.beyondsimulations.com\n\n\n\n\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier\n\n\n\n\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together\n\n\n\n\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early\n\n\n\n\n\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!\n\n\n\n\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!\n\n\n\n\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation\n\n\n\n\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#about-me",
    "href": "part-1/lecture-introduction.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#course-outline",
    "href": "part-1/lecture-introduction.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Part I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#participation",
    "href": "part-1/lecture-introduction.html#participation",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Prequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at python.beyondsimulations.com",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#teaching",
    "href": "part-1/lecture-introduction.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Lecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#passing-the-course",
    "href": "part-1/lecture-introduction.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Pass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#solution",
    "href": "part-1/lecture-introduction.html#solution",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Provide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#difficulty-of-the-course",
    "href": "part-1/lecture-introduction.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "We’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#what-to-expect",
    "href": "part-1/lecture-introduction.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Some investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#goals-of-the-course",
    "href": "part-1/lecture-introduction.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Essential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#python-as-language",
    "href": "part-1/lecture-introduction.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#help-from-ai",
    "href": "part-1/lecture-introduction.html#help-from-ai",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "You are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#analytics",
    "href": "part-1/lecture-introduction.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#research",
    "href": "part-1/lecture-introduction.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#visualization",
    "href": "part-1/lecture-introduction.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#finance",
    "href": "part-1/lecture-introduction.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#logistics",
    "href": "part-1/lecture-introduction.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#my-recommendation",
    "href": "part-1/lecture-introduction.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google/find help, modify, and solve problems on your own\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#dont-give-up",
    "href": "part-1/lecture-introduction.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated too easily at the start!\nLearn something new: Expect to stretch your comfort zone",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#learning-path",
    "href": "part-1/lecture-introduction.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated with programming, read the following helpful blog post about the challenges on medium.com",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#errors",
    "href": "part-1/lecture-introduction.html#errors",
    "title": "Lecture I - Introduction",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form: ::: {.r-stack} https://tally.so/r/w7oapa :::",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#install-python",
    "href": "part-1/lecture-introduction.html#install-python",
    "title": "Lecture I - Introduction",
    "section": "Install Python",
    "text": "Install Python\n\nYou could download it from the Python website or with Anaconda\nBut I would recommend we start by using Thonny\nIt is an open source IDE that runs on Windows, Linux and Mac\nIt comes with a built-in Python interpreter and package management!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#what-is-an-ide",
    "href": "part-1/lecture-introduction.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nAn IDE (Integrated Development Environment) is an application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python and aimed at beginners\nIt does not use the latest Python and has the most features\nBut it is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#thonny",
    "href": "part-1/lecture-introduction.html#thonny",
    "title": "Lecture I - Introduction",
    "section": "Thonny",
    "text": "Thonny\n\nDownload and install Thonny from the website\nStart the programm and you should see the following window:",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#python-on-ipads",
    "href": "part-1/lecture-introduction.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, if you have no other option, you could use Pythonista\nIt works locally on your iPad and can run most Python scripts\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages generally available in Python are be available in Pythonista, thus you might need a computer to solve certain problems.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#first-start-of-pythonista",
    "href": "part-1/lecture-introduction.html#first-start-of-pythonista",
    "title": "Lecture I - Introduction",
    "section": "First start of Pythonista",
    "text": "First start of Pythonista\n\n\n\n\n\n\nFigure 1: First start of Pythonista",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#hello-world",
    "href": "part-1/lecture-introduction.html#hello-world",
    "title": "Lecture I - Introduction",
    "section": "Hello, World!",
    "text": "Hello, World!\nYour Task: Create a directory for the course and create a new file called hello_world.py with the following code and save it:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n. . .\nRun the code with the green ‘run’ button at the top or by going to the line and pressing Shift+Enter:\n. . .\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#hello-world-in-a-message",
    "href": "part-1/lecture-introduction.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nYour Task: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n. . .\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n. . .\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#hello-world-in-parentheses",
    "href": "part-1/lecture-introduction.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string. We just have to be consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\nI shout \"Hello, World!\"\n\n\n. . .\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n. . .\n\nTry it yourself! What does happen, if you try to run this code?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#first-errors",
    "href": "part-1/lecture-introduction.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nThis is likely the most common error that you will encounter!\nIt happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\nYou can fix this by correcting the code and re-running\nIn the course of the lecture you will encounter many more errors!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#what-is-a-program",
    "href": "part-1/lecture-introduction.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nA sequence of instructions telling a computer what to do\nWritten in a programming language the computer can understand\nBasic operations in most languages:\n\nInput: Get data from keyboard, file, network, sensors, etc.\nOutput: Display data on screen, save to file, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#key-concepts",
    "href": "part-1/lecture-introduction.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check conditions and execute accordingly\nLoops: Perform actions repeatedly, often with variations\nFunctions: Group instructions for reusability\n\n\n\nProgramming: Process of breaking a large, complex task into smaller and smaller substasks until the subtask is simple enough to be performed with one of these basic instructions (Downey, 2015, P. 2)",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#hello-again-world",
    "href": "part-1/lecture-introduction.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n. . .\n\nComment: In the first line we define a comment with #\n\nIt is not executed but used to explain what code does\n\nVariable: In the second line we define a variable message\n\nIt points to a string that contains the text “Hello, World!”\n\nFunction: In the third line we call a function print\n\nIt prints out whatever is stored in message",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#dont-worry",
    "href": "part-1/lecture-introduction.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused?\nDon’t worry about it for now!\nWe’ll learn more about variables and functions later",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#the-zen-of-python",
    "href": "part-1/lecture-introduction.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python: A collection of 19 statements intended to communicate general principles\n\n\n# Try this code in Python to see the Zen of Python\nimport this",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#variables",
    "href": "part-1/lecture-introduction.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types before\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\nTime\n\n\n. . .\nBut there are certain rules to variable names!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#variable-naming-conventions",
    "href": "part-1/lecture-introduction.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n. . .\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#functions",
    "href": "part-1/lecture-introduction.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\nHelp in organizing code and promoting reusability\n\n. . .\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe will cover functions in more detail later in the course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#values-and-types-1",
    "href": "part-1/lecture-introduction.html#values-and-types-1",
    "title": "Lecture I - Introduction",
    "section": "Values and Types",
    "text": "Values and Types\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nIt takes one argument (a value) and returns its type as string",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#strings",
    "href": "part-1/lecture-introduction.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n. . .\n\nResult: “Hello, World” is a string - in short ‘str’.\n. . .\nBut what about the f”?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#formated-strings",
    "href": "part-1/lecture-introduction.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions (here variables) in braces\nThey are evaluated at run time and inserted into the string\nThis is called interpolation\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\nHello, World! is a &lt;class 'str'&gt;",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#expressions",
    "href": "part-1/lecture-introduction.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n\n3\n\n\n\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n\nThe result is 3\n\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n\nAgain, the result is 3",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#what-is-a-string",
    "href": "part-1/lecture-introduction.html#what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "What is a String?",
    "text": "What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nStrings are immutable, we can’t change single characters in them once they are created.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#string-operations",
    "href": "part-1/lecture-introduction.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\nBut we can also do much more with strings!\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\nHello, World!\n\n\n. . .\n\nprint(two_strings[0]) # Indexing starts at zero!\n\nH\n\n\n. . .\n\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n\nHell\n\n\n. . .\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n13\n\n\n. . .\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n--x----x----x--",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#booleans",
    "href": "part-1/lecture-introduction.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n. . .\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\nTrue\n&lt;class 'bool'&gt;\n\n\n. . .\n&gt; More on them in our next lecture!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#integers-and-floats",
    "href": "part-1/lecture-introduction.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: 2.5, -4.789123, 0.0 or 1.234e2\nBit size does not have to be specified (e.g.: 64 bits) in Python\n\n. . .\n\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n\n1 is of type &lt;class 'int'&gt;\n128.64 is of type float\n\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#arithmetic-operators",
    "href": "part-1/lecture-introduction.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n. . .\n\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how the integers in the division are converted to floats before the division is performed.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#precedence",
    "href": "part-1/lecture-introduction.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nThe operators are the same as in most other languages\nThey can be combined with each other, and with variables\nNormal rules of precedence apply\n\n. . .\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n2 + 3 * 4 = 14\n\n\n. . .\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n(2 + 3) * 4 = 20",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#the-input-function",
    "href": "part-1/lecture-introduction.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n. . .\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nThe function always returns the input as string!\n\n\n. . .\n\n&gt; Try it yourself!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#type-conversion",
    "href": "part-1/lecture-introduction.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\n\n. . .\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n\n. . .\n\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#the-round-function",
    "href": "part-1/lecture-introduction.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-introduction.html#interesting-books-to-start",
    "href": "part-1/lecture-introduction.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-1/lecture-presentation.html#about-me",
    "href": "part-1/lecture-presentation.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "About me",
    "text": "About me\n\n\nPost-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#course-outline",
    "href": "part-1/lecture-presentation.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects"
  },
  {
    "objectID": "part-1/lecture-presentation.html#participation",
    "href": "part-1/lecture-presentation.html#participation",
    "title": "Lecture I - Introduction",
    "section": "Participation",
    "text": "Participation\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at python.beyondsimulations.com"
  },
  {
    "objectID": "part-1/lecture-presentation.html#teaching",
    "href": "part-1/lecture-presentation.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier"
  },
  {
    "objectID": "part-1/lecture-presentation.html#passing-the-course",
    "href": "part-1/lecture-presentation.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together"
  },
  {
    "objectID": "part-1/lecture-presentation.html#solution",
    "href": "part-1/lecture-presentation.html#solution",
    "title": "Lecture I - Introduction",
    "section": "Solution",
    "text": "Solution\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n\n\n\n\n\n\n\nTip\n\n\nI’d encourage you to start and submit your solution early"
  },
  {
    "objectID": "part-1/lecture-presentation.html#difficulty-of-the-course",
    "href": "part-1/lecture-presentation.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#what-to-expect",
    "href": "part-1/lecture-presentation.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "What to expect",
    "text": "What to expect\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#goals-of-the-course",
    "href": "part-1/lecture-presentation.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context"
  },
  {
    "objectID": "part-1/lecture-presentation.html#python-as-language",
    "href": "part-1/lecture-presentation.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "Python as Language",
    "text": "Python as Language\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation"
  },
  {
    "objectID": "part-1/lecture-presentation.html#help-from-ai",
    "href": "part-1/lecture-presentation.html#help-from-ai",
    "title": "Lecture I - Introduction",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n\n\n\n\n\n\n\nWarning\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-1/lecture-presentation.html#analytics",
    "href": "part-1/lecture-presentation.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash"
  },
  {
    "objectID": "part-1/lecture-presentation.html#research",
    "href": "part-1/lecture-presentation.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash"
  },
  {
    "objectID": "part-1/lecture-presentation.html#visualization",
    "href": "part-1/lecture-presentation.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash"
  },
  {
    "objectID": "part-1/lecture-presentation.html#finance",
    "href": "part-1/lecture-presentation.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash"
  },
  {
    "objectID": "part-1/lecture-presentation.html#logistics",
    "href": "part-1/lecture-presentation.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash"
  },
  {
    "objectID": "part-1/lecture-presentation.html#my-recommendation",
    "href": "part-1/lecture-presentation.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google/find help, modify, and solve problems on your own\n\n\n\n\n\n\n\n\nTip\n\n\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "part-1/lecture-presentation.html#dont-give-up",
    "href": "part-1/lecture-presentation.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated too easily at the start!\nLearn something new: Expect to stretch your comfort zone"
  },
  {
    "objectID": "part-1/lecture-presentation.html#learning-path",
    "href": "part-1/lecture-presentation.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated with programming, read the following helpful blog post about the challenges on medium.com"
  },
  {
    "objectID": "part-1/lecture-presentation.html#errors",
    "href": "part-1/lecture-presentation.html#errors",
    "title": "Lecture I - Introduction",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form: ::: {.r-stack} https://tally.so/r/w7oapa :::"
  },
  {
    "objectID": "part-1/lecture-presentation.html#install-python",
    "href": "part-1/lecture-presentation.html#install-python",
    "title": "Lecture I - Introduction",
    "section": "Install Python",
    "text": "Install Python\n\nYou could download it from the Python website or with Anaconda\nBut I would recommend we start by using Thonny\nIt is an open source IDE that runs on Windows, Linux and Mac\nIt comes with a built-in Python interpreter and package management!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#what-is-an-ide",
    "href": "part-1/lecture-presentation.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nAn IDE (Integrated Development Environment) is an application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python and aimed at beginners\nIt does not use the latest Python and has the most features\nBut it is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft"
  },
  {
    "objectID": "part-1/lecture-presentation.html#thonny",
    "href": "part-1/lecture-presentation.html#thonny",
    "title": "Lecture I - Introduction",
    "section": "Thonny",
    "text": "Thonny\n\nDownload and install Thonny from the website\nStart the programm and you should see the following window:"
  },
  {
    "objectID": "part-1/lecture-presentation.html#python-on-ipads",
    "href": "part-1/lecture-presentation.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, if you have no other option, you could use Pythonista\nIt works locally on your iPad and can run most Python scripts\n\n\n\n\n\n\n\n\nCaution\n\n\nNot all packages generally available in Python are be available in Pythonista, thus you might need a computer to solve certain problems."
  },
  {
    "objectID": "part-1/lecture-presentation.html#first-start-of-pythonista",
    "href": "part-1/lecture-presentation.html#first-start-of-pythonista",
    "title": "Lecture I - Introduction",
    "section": "First start of Pythonista",
    "text": "First start of Pythonista\n\n\nFigure 1: First start of Pythonista"
  },
  {
    "objectID": "part-1/lecture-presentation.html#hello-world",
    "href": "part-1/lecture-presentation.html#hello-world",
    "title": "Lecture I - Introduction",
    "section": "Hello, World!",
    "text": "Hello, World!\nYour Task: Create a directory for the course and create a new file called hello_world.py with the following code and save it:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n\nRun the code with the green ‘run’ button at the top or by going to the line and pressing Shift+Enter:\n\n\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "part-1/lecture-presentation.html#hello-world-in-a-message",
    "href": "part-1/lecture-presentation.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nYour Task: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n\n\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nHello, World!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#hello-world-in-parentheses",
    "href": "part-1/lecture-presentation.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string. We just have to be consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\n\n\nI shout \"Hello, World!\"\n\n\n\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n\n\n\nTry it yourself! What does happen, if you try to run this code?"
  },
  {
    "objectID": "part-1/lecture-presentation.html#first-errors",
    "href": "part-1/lecture-presentation.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nThis is likely the most common error that you will encounter!\nIt happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\nYou can fix this by correcting the code and re-running\nIn the course of the lecture you will encounter many more errors!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#what-is-a-program",
    "href": "part-1/lecture-presentation.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nA sequence of instructions telling a computer what to do\nWritten in a programming language the computer can understand\nBasic operations in most languages:\n\nInput: Get data from keyboard, file, network, sensors, etc.\nOutput: Display data on screen, save to file, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc."
  },
  {
    "objectID": "part-1/lecture-presentation.html#key-concepts",
    "href": "part-1/lecture-presentation.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check conditions and execute accordingly\nLoops: Perform actions repeatedly, often with variations\nFunctions: Group instructions for reusability\n\n\n\nProgramming: Process of breaking a large, complex task into smaller and smaller substasks until the subtask is simple enough to be performed with one of these basic instructions (Downey, 2015, P. 2)"
  },
  {
    "objectID": "part-1/lecture-presentation.html#hello-again-world",
    "href": "part-1/lecture-presentation.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nComment: In the first line we define a comment with #\n\nIt is not executed but used to explain what code does\n\nVariable: In the second line we define a variable message\n\nIt points to a string that contains the text “Hello, World!”\n\nFunction: In the third line we call a function print\n\nIt prints out whatever is stored in message"
  },
  {
    "objectID": "part-1/lecture-presentation.html#dont-worry",
    "href": "part-1/lecture-presentation.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused?\nDon’t worry about it for now!\nWe’ll learn more about variables and functions later"
  },
  {
    "objectID": "part-1/lecture-presentation.html#the-zen-of-python",
    "href": "part-1/lecture-presentation.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python: A collection of 19 statements intended to communicate general principles\n\n\n# Try this code in Python to see the Zen of Python\nimport this"
  },
  {
    "objectID": "part-1/lecture-presentation.html#variables",
    "href": "part-1/lecture-presentation.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types before\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\n\n\nTime\n\n\n\nBut there are certain rules to variable names!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#variable-naming-conventions",
    "href": "part-1/lecture-presentation.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792"
  },
  {
    "objectID": "part-1/lecture-presentation.html#functions",
    "href": "part-1/lecture-presentation.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\nHelp in organizing code and promoting reusability\n\n\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\n\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\nNote\n\n\nWe will cover functions in more detail later in the course."
  },
  {
    "objectID": "part-1/lecture-presentation.html#values-and-types-1",
    "href": "part-1/lecture-presentation.html#values-and-types-1",
    "title": "Lecture I - Introduction",
    "section": "Values and Types",
    "text": "Values and Types\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nIt takes one argument (a value) and returns its type as string"
  },
  {
    "objectID": "part-1/lecture-presentation.html#strings",
    "href": "part-1/lecture-presentation.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\n\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n\n\nResult: “Hello, World” is a string - in short ‘str’.\n\n\nBut what about the f”?"
  },
  {
    "objectID": "part-1/lecture-presentation.html#formated-strings",
    "href": "part-1/lecture-presentation.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions (here variables) in braces\nThey are evaluated at run time and inserted into the string\nThis is called interpolation\n\n\n\n\n\n\n\n\nNote\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\n\n\nHello, World! is a &lt;class 'str'&gt;"
  },
  {
    "objectID": "part-1/lecture-presentation.html#expressions",
    "href": "part-1/lecture-presentation.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n\n\n\n3\n\n\n\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n\n\n\nThe result is 3\n\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n\n\n\nAgain, the result is 3"
  },
  {
    "objectID": "part-1/lecture-presentation.html#what-is-a-string",
    "href": "part-1/lecture-presentation.html#what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "What is a String?",
    "text": "What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\nNote\n\n\nStrings are immutable, we can’t change single characters in them once they are created."
  },
  {
    "objectID": "part-1/lecture-presentation.html#string-operations",
    "href": "part-1/lecture-presentation.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\nBut we can also do much more with strings!\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\n\n\nHello, World!\n\n\n\n\nprint(two_strings[0]) # Indexing starts at zero!\n\n\n\nH\n\n\n\n\n\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n\n\n\nHell\n\n\n\n\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n\n\n13\n\n\n\n\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n\n\n--x----x----x--"
  },
  {
    "objectID": "part-1/lecture-presentation.html#booleans",
    "href": "part-1/lecture-presentation.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\n\n&gt; More on them in our next lecture!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#integers-and-floats",
    "href": "part-1/lecture-presentation.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: 2.5, -4.789123, 0.0 or 1.234e2\nBit size does not have to be specified (e.g.: 64 bits) in Python\n\n\n\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n\n\n\n1 is of type &lt;class 'int'&gt;\n128.64 is of type float\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#arithmetic-operators",
    "href": "part-1/lecture-presentation.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\n\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how the integers in the division are converted to floats before the division is performed."
  },
  {
    "objectID": "part-1/lecture-presentation.html#precedence",
    "href": "part-1/lecture-presentation.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nThe operators are the same as in most other languages\nThey can be combined with each other, and with variables\nNormal rules of precedence apply\n\n\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n\n\n2 + 3 * 4 = 14\n\n\n\n\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n\n\n(2 + 3) * 4 = 20"
  },
  {
    "objectID": "part-1/lecture-presentation.html#the-input-function",
    "href": "part-1/lecture-presentation.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe function always returns the input as string!\n\n\n\n\n\n\n&gt; Try it yourself!"
  },
  {
    "objectID": "part-1/lecture-presentation.html#type-conversion",
    "href": "part-1/lecture-presentation.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\n\n\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n\n\n\n\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")"
  },
  {
    "objectID": "part-1/lecture-presentation.html#the-round-function",
    "href": "part-1/lecture-presentation.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n\n\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types."
  },
  {
    "objectID": "part-1/lecture-presentation.html#interesting-books-to-start",
    "href": "part-1/lecture-presentation.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n\n\n\n\nLecture I - Introduction | Programming with Python | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "faq.html#unanswered-questions",
    "href": "faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "faq.html#contribution-and-mistakes",
    "href": "faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "faq.html#faqs",
    "href": "faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, I haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "part-2/tutorial-control.html",
    "href": "part-2/tutorial-control.html",
    "title": "Tutorial II - Control Structures",
    "section": "",
    "text": "Just like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions. Don’t worry, I won’t repeat this section again and again.",
    "crumbs": [
      "02 Control",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-2/tutorial-control.html#string-manipulation",
    "href": "part-2/tutorial-control.html#string-manipulation",
    "title": "Tutorial II - Control Structures",
    "section": "String Manipulation",
    "text": "String Manipulation\nFirst, here are some commonly used string methods we could use to decode the message:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring\n\n\n\n\n\n\n\nTip\n\n\n\nYou can use the dir() function to list all methods and attributes of an object. Here, we could see that upper(), lower(), title(), strip(), replace(), find(), and count() are all methods of the string object str.\n\n\nLet’s begin with the encoded message and work through each decoding step:\n\n# Decode a secret message by following a series of instructions.\n# Each instruction requires you to use different operations and methods.\n# The encoded message is:\nsecret_message = \"!nohtyyP gnidoc nrael ot nuf si tI\"\n\n# a) TODO: Reverse the string\n# Hint: You can use slicing to reverse a string\n# Your code here\n\n# b) TODO: Remove the exclamation mark at the beginning\n# Hint: Use string slicing\n# Your code here\n\n# c) TODO: Replace 'yP' with 'Py'\n# Hint: Use the replace() method\n# Your code here\n\n# d) TODO: Convert the string to title case\n# -&gt; Capitalize the first letter of each word\n# Hint: Use the title() method\n# Your code here\n\n# e) TODO: Add spaces around the word 'coding' \n# Hint: Use the replace() method\n# Your code here\n\n# f) TODO: Count how many times the letter 'n' appears in the decoded message\n# Hint: Use the count() method\n# Your code here\n\n\n\n\n\n\n\nTip\n\n\n\nUse the help() function to get more information about a method. For example, typing help(str.replace) in the shell will show the documentation for the replace() method. To exit the documentation, press q.",
    "crumbs": [
      "02 Control",
      "Tutorial"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment I",
    "section": "",
    "text": "Nothing here yet. Please check back later.",
    "crumbs": [
      "Assignments",
      "01 Assignment"
    ]
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment II",
    "section": "",
    "text": "Nothing here yet. Please check back later.",
    "crumbs": [
      "Assignments",
      "02 Assignment"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html",
    "href": "part-2/lecture-control.html",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).\n\n\n\n\n\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n# Let's illustrate these concepts with a small example:\nx = 1\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"x is of type {type(x).__name__}\")\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n. . .\n\n&gt; What are the types of x, y, z, w?\n\n\n\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.\n\n\n\n\n\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n. . .\n&gt; What is the value of x after the operations?",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#f-strings",
    "href": "part-2/lecture-control.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#variables-and-data-types",
    "href": "part-2/lecture-control.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Python uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n# Let's illustrate these concepts with a small example:\nx = 1\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"x is of type {type(x).__name__}\")\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n. . .\n\n&gt; What are the types of x, y, z, w?",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#arithmetic-operators",
    "href": "part-2/lecture-control.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Addition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#arithmetic-operators-with-variables",
    "href": "part-2/lecture-control.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Additional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n. . .\n&gt; What is the value of x after the operations?",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#objects",
    "href": "part-2/lecture-control.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#methods",
    "href": "part-2/lecture-control.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nMethods are used to perform operations on an object\nMethods are used to access and modify the attributes of an object\nMethods are used to access and modify the methods of an object\nMethods are used to access and modify the attributes of an object\nMethods are used to access and modify the methods of an object",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#indexing",
    "href": "part-2/lecture-control.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n. . .\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\nH\n!",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#slicing",
    "href": "part-2/lecture-control.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\nWorld\nWorld",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-control.html#slicing-simplified",
    "href": "part-2/lecture-control.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\nHlo ol!\n!dlroW ,olleH",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-2/lecture-presentation.html#f-strings",
    "href": "part-2/lecture-presentation.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "F-Strings",
    "text": "F-Strings\n\nF-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\n\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new)."
  },
  {
    "objectID": "part-2/lecture-presentation.html#variables-and-data-types",
    "href": "part-2/lecture-presentation.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n&gt; Question: What are the types of x, y, z, w?\n\nx = 1\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"x is of type {type(x).__name__}\")\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n\n\nx is of type int\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "part-2/lecture-presentation.html#arithmetic-operators",
    "href": "part-2/lecture-presentation.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "part-2/lecture-presentation.html#arithmetic-operators-with-variables",
    "href": "part-2/lecture-presentation.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators with Variables",
    "text": "Arithmetic Operators with Variables\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-2/lecture-presentation.html#objects",
    "href": "part-2/lecture-presentation.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n\n\n\n\n\n\n\nNote\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "part-2/lecture-presentation.html#methods",
    "href": "part-2/lecture-presentation.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "part-2/lecture-presentation.html#indexing",
    "href": "part-2/lecture-presentation.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\n\n\nH\n!"
  },
  {
    "objectID": "part-2/lecture-presentation.html#slicing",
    "href": "part-2/lecture-presentation.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\n\n\nWorld\nWorld"
  },
  {
    "objectID": "part-2/lecture-presentation.html#slicing-simplified",
    "href": "part-2/lecture-presentation.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\n\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Programming with Python!",
    "section": "",
    "text": "Objectives\nThis module introduces programming with python. Python is a modern and powerful programming language that is widely used in industry and academic projects. Students will learn how to find a code-based solution to basic and complex problems. The course is based on many examples that illustrate how to tackle a potentially complex issue as well as how to implement a solution.\n\n\nLearning Outcomes\nUpon completion of the course, students …\n\ncan implement solutions to complex problems in python\nknow basic concepts of programming and algorithms such as loops, functions\ncan apply basic data manipulation and visualization\nwill be able to read and write code\nwill have experience working with python libraries such as NumPy, Pandas, Matplotlib\nwill know how to collaborate in a small team to find solutions for problems at hand\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any prior knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Structure\nThe course is based on a hands-on approach with a two-fold structure:\n\nLectures: In the lectures, we will introduce concepts and illustrate them in reproducible examples.\nHands-on Tutorials: Students will practically apply the concepts of the lecture in hands-on examples.\nAssignments: Students will solve programming exercises in groups of up to three students that they will have to hand in.\n\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Programming with Python\nPart II: Data Science with Python\nPart III: Programming Projects\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nPassing the Course\n\n75% attendance required for passing the course\nYou will be given two programming assignments and one project to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under vlcek@beyondsimulations.com.\n\n\nContributors\nA huge thanks to Phillip Bach who contributed to the course.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nLoops (for, while), conditional statements (if-else), basic logic\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope\nHandling Data in more than one Dimension (IV)\nTuples, Lists, Sets, Dictionaries, and I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, strings, regular expressions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#introduction-to-programming-with-python",
    "href": "syllabus.html#introduction-to-programming-with-python",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#lectures",
    "href": "syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nLoops (for, while), conditional statements (if-else), basic logic\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope\nHandling Data in more than one Dimension (IV)\nTuples, Lists, Sets, Dictionaries, and I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, strings, regular expressions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#data-science-with-python",
    "href": "syllabus.html#data-science-with-python",
    "title": "Syllabus",
    "section": "Data Science with Python",
    "text": "Data Science with Python\nIn the second part, we will cover basic data science tools in Python referring to data manipulation, descriptive and explorative analysis as well as visualization. At the end, an outlook will be provided on the next steps in Python, including statistical analysis and machine learning.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#lectures-1",
    "href": "syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nUsing Modules and Random Numbers (VI)\nStandard libraries, random numbers and how to use them\nNumPy and Pandas for Scientific Computing (VII)\nData manipulation with Pandas, array operations with NumPy\nPlotting Data (VIII)\nMatplotlib, Seaborne based on hand-on examples\nFirst steps into A.I. (IX)\nA brief intro to machine learning concepts",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#programming-projects",
    "href": "syllabus.html#programming-projects",
    "title": "Syllabus",
    "section": "Programming Projects",
    "text": "Programming Projects\nIn the third part, students will be assigned mini projects in Python where they can apply their new knowledge in groups on a project of their choice. Each group will present their results and get feedback at the end of the semester.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#lectures-2",
    "href": "syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nYour first Project I (X)\nChoose your project that ties together concepts from the course\nYour first Project II (XI)\nProgress your group-project under assistance\nYour first Project III (XII)\nFinalize your group-project with your team\nPresentations and Discussion (XIII)\nPresent your group’s work and the learnings you have made",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-1/tutorial-introduction.html",
    "href": "part-1/tutorial-introduction.html",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\n\n\n\nI would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.\n\n\n\nIn the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-1/tutorial-introduction.html#solutions",
    "href": "part-1/tutorial-introduction.html#solutions",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-1/tutorial-introduction.html#how-to-tackle-the-exercises",
    "href": "part-1/tutorial-introduction.html#how-to-tackle-the-exercises",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "I would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-1/tutorial-introduction.html#tutorials-vs-assignments",
    "href": "part-1/tutorial-introduction.html#tutorials-vs-assignments",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "In the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-2/lecture-presentation.html#string-methods",
    "href": "part-2/lecture-presentation.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "part-2/lecture-presentation.html#string-methods-in-action",
    "href": "part-2/lecture-presentation.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\n\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "part-2/lecture-presentation.html#comparisons",
    "href": "part-2/lecture-presentation.html#comparisons",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons",
    "text": "Comparisons\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\n\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-2/lecture-presentation.html#importance-of-control-flow",
    "href": "part-2/lecture-presentation.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n\n\n\n\n\n\n\nNote\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  },
  {
    "objectID": "part-2/lecture-presentation.html#comparison-operators",
    "href": "part-2/lecture-presentation.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\n\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-2/lecture-presentation.html#logical-operators",
    "href": "part-2/lecture-presentation.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\n\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "part-2/lecture-presentation.html#membership-operators",
    "href": "part-2/lecture-presentation.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\n\n\nTrue\nFalse\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "part-2/lecture-presentation.html#identity-operators",
    "href": "part-2/lecture-presentation.html#identity-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Identity Operators",
    "text": "Identity Operators\n\nIdentity operators are used to check if two values are the same object\nCommon identity operators: is, is not"
  },
  {
    "objectID": "part-2/lecture-presentation.html#control-structures-1",
    "href": "part-2/lecture-presentation.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nControl structures are used to control the flow of execution in a program\nCommon control structures: if, elif, else, for, while"
  },
  {
    "objectID": "part-02/tutorial-control.html",
    "href": "part-02/tutorial-control.html",
    "title": "Tutorial II - Control Structures",
    "section": "",
    "text": "Introduction\nJust like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions. Don’t worry, I won’t repeat this section again and again.\n\n\nSlicing secret messages\nIn this exercise, we’ll practice string manipulation and slicing. You’ll work with a secret message encoded using various string operations and learn how to apply some new methods like title(), replace() and count(). By following a series of steps, you’ll gradually decode the message. Let’s begin with the encoded message and work through each decoding step:\n\n# Decode a secret message by following a series of instructions.\n# Each instruction requires you to use different operations and methods.\n# The encoded message is:\nsecret_message = \"!nohtyyP gnidoc nrael ot nuf si tI\"\n\n# a) TODO: Reverse the string\n# Hint: You can use slicing to reverse a string\n# Your code here\n\n# b) TODO: Remove the exclamation mark at the beginning\n# Hint: Use string slicing\n# Your code here\n\n# c) TODO: Replace 'yP' with 'Py'\n# Hint: Use the replace() method\n# Your code here\n\n# d) TODO: Convert the string to title case\n# -&gt; Capitalize the first letter of each word\n# Hint: Use the title() method\n# Your code here\n\n# e) TODO: Add spaces around the word 'coding' \n# Hint: Use the replace() method\n# Your code here\n\n# f) TODO: Count how many times the letter 'n' appears in the decoded message\n# Hint: Use the count() method\n# Your code here\n\n\n\n\n\n\n\nTip\n\n\n\nUse the help() function to get more information about a method. For example, typing help(str.replace) in the shell will show the documentation for the replace() method. To exit the documentation, press q."
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of Python programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, I haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html",
    "href": "part-01/lecture-introduction.html",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects\n\n\n\n\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at python.beyondsimulations.com\n\n\n\n\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier\n\n\n\n\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together\n\n\n\n\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early\n\n\n\n\n\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!\n\n\n\n\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!\n\n\n\n\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation\n\n\n\n\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-01/lecture-introduction.html#about-me",
    "href": "part-01/lecture-introduction.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#course-outline",
    "href": "part-01/lecture-introduction.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Part I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects"
  },
  {
    "objectID": "part-01/lecture-introduction.html#participation",
    "href": "part-01/lecture-introduction.html#participation",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Prequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at python.beyondsimulations.com"
  },
  {
    "objectID": "part-01/lecture-introduction.html#teaching",
    "href": "part-01/lecture-introduction.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Lecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier"
  },
  {
    "objectID": "part-01/lecture-introduction.html#passing-the-course",
    "href": "part-01/lecture-introduction.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Pass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together"
  },
  {
    "objectID": "part-01/lecture-introduction.html#solution",
    "href": "part-01/lecture-introduction.html#solution",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Provide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early"
  },
  {
    "objectID": "part-01/lecture-introduction.html#difficulty-of-the-course",
    "href": "part-01/lecture-introduction.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "We’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-to-expect",
    "href": "part-01/lecture-introduction.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Some investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#goals-of-the-course",
    "href": "part-01/lecture-introduction.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Essential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context"
  },
  {
    "objectID": "part-01/lecture-introduction.html#python-as-language",
    "href": "part-01/lecture-introduction.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation"
  },
  {
    "objectID": "part-01/lecture-introduction.html#help-from-ai",
    "href": "part-01/lecture-introduction.html#help-from-ai",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "You are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-01/lecture-introduction.html#analytics",
    "href": "part-01/lecture-introduction.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash"
  },
  {
    "objectID": "part-01/lecture-introduction.html#research",
    "href": "part-01/lecture-introduction.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash"
  },
  {
    "objectID": "part-01/lecture-introduction.html#visualization",
    "href": "part-01/lecture-introduction.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash"
  },
  {
    "objectID": "part-01/lecture-introduction.html#finance",
    "href": "part-01/lecture-introduction.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash"
  },
  {
    "objectID": "part-01/lecture-introduction.html#logistics",
    "href": "part-01/lecture-introduction.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash"
  },
  {
    "objectID": "part-01/lecture-introduction.html#my-recommendation",
    "href": "part-01/lecture-introduction.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google/find help, modify, and solve problems on your own\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "part-01/lecture-introduction.html#dont-give-up",
    "href": "part-01/lecture-introduction.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated too easily at the start!\nLearn something new: Expect to stretch your comfort zone"
  },
  {
    "objectID": "part-01/lecture-introduction.html#learning-path",
    "href": "part-01/lecture-introduction.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated with programming, read the following helpful blog post about the challenges on medium.com"
  },
  {
    "objectID": "part-01/lecture-introduction.html#errors",
    "href": "part-01/lecture-introduction.html#errors",
    "title": "Lecture I - Introduction",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form: ::: {.r-stack} https://tally.so/r/w7oapa :::"
  },
  {
    "objectID": "part-01/lecture-introduction.html#install-python",
    "href": "part-01/lecture-introduction.html#install-python",
    "title": "Lecture I - Introduction",
    "section": "Install Python",
    "text": "Install Python\n\nYou could download it from the Python website or with Anaconda\nBut I would recommend we start by using Thonny\nIt is an open source IDE that runs on Windows, Linux and Mac\nIt comes with a built-in Python interpreter and package management!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-an-ide",
    "href": "part-01/lecture-introduction.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nAn IDE (Integrated Development Environment) is an application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python and aimed at beginners\nIt does not use the latest Python and has the most features\nBut it is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft"
  },
  {
    "objectID": "part-01/lecture-introduction.html#thonny",
    "href": "part-01/lecture-introduction.html#thonny",
    "title": "Lecture I - Introduction",
    "section": "Thonny",
    "text": "Thonny\n\nDownload and install Thonny from the website\nStart the programm and you should see the following window:"
  },
  {
    "objectID": "part-01/lecture-introduction.html#python-on-ipads",
    "href": "part-01/lecture-introduction.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, if you have no other option, you could use Pythonista\nIt works locally on your iPad and can run most Python scripts\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages generally available in Python are be available in Pythonista, thus you might need a computer to solve certain problems."
  },
  {
    "objectID": "part-01/lecture-introduction.html#first-start-of-pythonista",
    "href": "part-01/lecture-introduction.html#first-start-of-pythonista",
    "title": "Lecture I - Introduction",
    "section": "First start of Pythonista",
    "text": "First start of Pythonista\n\n\n\n\n\n\nFigure 1: First start of Pythonista"
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world",
    "href": "part-01/lecture-introduction.html#hello-world",
    "title": "Lecture I - Introduction",
    "section": "Hello, World!",
    "text": "Hello, World!\nYour Task: Create a directory for the course and create a new file called hello_world.py with the following code and save it:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n. . .\nRun the code with the green ‘run’ button at the top or by going to the line and pressing Shift+Enter:\n. . .\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world-in-a-message",
    "href": "part-01/lecture-introduction.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nYour Task: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n. . .\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n. . .\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world-in-parentheses",
    "href": "part-01/lecture-introduction.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string. We just have to be consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\nI shout \"Hello, World!\"\n\n\n. . .\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n. . .\n\nTry it yourself! What does happen, if you try to run this code?"
  },
  {
    "objectID": "part-01/lecture-introduction.html#first-errors",
    "href": "part-01/lecture-introduction.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nThis is likely the most common error that you will encounter!\nIt happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\nYou can fix this by correcting the code and re-running\nIn the course of the lecture you will encounter many more errors!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-a-program",
    "href": "part-01/lecture-introduction.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nA sequence of instructions telling a computer what to do\nWritten in a programming language the computer can understand\nBasic operations in most languages:\n\nInput: Get data from keyboard, file, network, sensors, etc.\nOutput: Display data on screen, save to file, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc."
  },
  {
    "objectID": "part-01/lecture-introduction.html#key-concepts",
    "href": "part-01/lecture-introduction.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check conditions and execute accordingly\nLoops: Perform actions repeatedly, often with variations\nFunctions: Group instructions for reusability\n\n\n\nProgramming: Process of breaking a large, complex task into smaller and smaller substasks until the subtask is simple enough to be performed with one of these basic instructions (Downey, 2015, P. 2)"
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-again-world",
    "href": "part-01/lecture-introduction.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n. . .\n\nComment: In the first line we define a comment with #\n\nIt is not executed but used to explain what code does\n\nVariable: In the second line we define a variable message\n\nIt points to a string that contains the text “Hello, World!”\n\nFunction: In the third line we call a function print\n\nIt prints out whatever is stored in message"
  },
  {
    "objectID": "part-01/lecture-introduction.html#dont-worry",
    "href": "part-01/lecture-introduction.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused?\nDon’t worry about it for now!\nWe’ll learn more about variables and functions later"
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-zen-of-python",
    "href": "part-01/lecture-introduction.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python: A collection of 19 statements intended to communicate general principles\n\n\n# Try this code in Python to see the Zen of Python\nimport this"
  },
  {
    "objectID": "part-01/lecture-introduction.html#variables",
    "href": "part-01/lecture-introduction.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types before\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\nTime\n\n\n. . .\nBut there are certain rules to variable names!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#variable-naming-conventions",
    "href": "part-01/lecture-introduction.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n. . .\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792"
  },
  {
    "objectID": "part-01/lecture-introduction.html#functions",
    "href": "part-01/lecture-introduction.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n. . .\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe will cover functions in more detail later in the course."
  },
  {
    "objectID": "part-01/lecture-introduction.html#values-and-types-1",
    "href": "part-01/lecture-introduction.html#values-and-types-1",
    "title": "Lecture I - Introduction",
    "section": "Values and Types",
    "text": "Values and Types\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nIt takes one argument (a value) and returns its type as string"
  },
  {
    "objectID": "part-01/lecture-introduction.html#strings",
    "href": "part-01/lecture-introduction.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n. . .\n\nResult: “Hello, World” is a string - in short ‘str’.\n. . .\nBut what about the f”?"
  },
  {
    "objectID": "part-01/lecture-introduction.html#formated-strings",
    "href": "part-01/lecture-introduction.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions (here variables) in braces\nThey are evaluated at run time and inserted into the string\nThis is called interpolation\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\nHello, World! is a &lt;class 'str'&gt;"
  },
  {
    "objectID": "part-01/lecture-introduction.html#expressions",
    "href": "part-01/lecture-introduction.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n\n3\n\n\n\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n\nThe result is 3\n\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n\nAgain, the result is 3"
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-a-string",
    "href": "part-01/lecture-introduction.html#what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "What is a String?",
    "text": "What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nStrings are immutable, we can’t change single characters in them once they are created."
  },
  {
    "objectID": "part-01/lecture-introduction.html#string-operations",
    "href": "part-01/lecture-introduction.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\nBut we can also do much more with strings!\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\nHello, World!\n\n\n. . .\n\nprint(two_strings[0]) # Indexing starts at zero!\n\nH\n\n\n. . .\n\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n\nHell\n\n\n. . .\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n13\n\n\n. . .\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n--x----x----x--"
  },
  {
    "objectID": "part-01/lecture-introduction.html#booleans",
    "href": "part-01/lecture-introduction.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n. . .\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\nTrue\n&lt;class 'bool'&gt;\n\n\n. . .\n&gt; More on them in our next lecture!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#integers-and-floats",
    "href": "part-01/lecture-introduction.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: 2.5, -4.789123, 0.0 or 1.234e2\nBit size does not have to be specified (e.g.: 64 bits) in Python\n\n. . .\n\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n\n1 is of type &lt;class 'int'&gt;\n128.64 is of type float\n\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#arithmetic-operators",
    "href": "part-01/lecture-introduction.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n. . .\n\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how the integers in the division are converted to floats before the division is performed."
  },
  {
    "objectID": "part-01/lecture-introduction.html#precedence",
    "href": "part-01/lecture-introduction.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nThe operators are the same as in most other languages\nThey can be combined with each other, and with variables\nNormal rules of precedence apply\n\n. . .\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n2 + 3 * 4 = 14\n\n\n. . .\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n(2 + 3) * 4 = 20"
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-input-function",
    "href": "part-01/lecture-introduction.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n. . .\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nThe function always returns the input as string!\n\n\n. . .\n\n&gt; Try it yourself!"
  },
  {
    "objectID": "part-01/lecture-introduction.html#type-conversion",
    "href": "part-01/lecture-introduction.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\n\n. . .\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n\n. . .\n\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")"
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-round-function",
    "href": "part-01/lecture-introduction.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types."
  },
  {
    "objectID": "part-01/lecture-introduction.html#interesting-books-to-start",
    "href": "part-01/lecture-introduction.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "part-01/tutorial-introduction.html",
    "href": "part-01/tutorial-introduction.html",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\n\n\n\nI would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.\n\n\n\nIn the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first."
  },
  {
    "objectID": "part-01/tutorial-introduction.html#solutions",
    "href": "part-01/tutorial-introduction.html#solutions",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers.\nUnderstanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions."
  },
  {
    "objectID": "part-01/tutorial-introduction.html#how-to-tackle-the-exercises",
    "href": "part-01/tutorial-introduction.html#how-to-tackle-the-exercises",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "I would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates."
  },
  {
    "objectID": "part-01/tutorial-introduction.html#tutorials-vs-assignments",
    "href": "part-01/tutorial-introduction.html#tutorials-vs-assignments",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "In the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first."
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nMethods, Comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope\nHandling Data in more than one Dimension (IV)\nTuples, Lists, Sets, Dictionaries, and I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, strings, regular expressions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-programming-with-python",
    "href": "general/syllabus.html#introduction-to-programming-with-python",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nMethods, Comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope\nHandling Data in more than one Dimension (IV)\nTuples, Lists, Sets, Dictionaries, and I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, strings, regular expressions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#data-science-with-python",
    "href": "general/syllabus.html#data-science-with-python",
    "title": "Syllabus",
    "section": "Data Science with Python",
    "text": "Data Science with Python\nIn the second part, we will cover basic data science tools in Python referring to data manipulation, descriptive and explorative analysis as well as visualization. At the end, an outlook will be provided on the next steps in Python, including statistical analysis and machine learning.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nUsing Modules and Random Numbers (VI)\nStandard libraries, random numbers and how to use them\nNumPy and Pandas for Scientific Computing (VII)\nData manipulation with Pandas, array operations with NumPy\nPlotting Data (VIII)\nMatplotlib, Seaborne based on hand-on examples\nFirst steps into A.I. (IX)\nA brief intro to machine learning concepts",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#programming-projects",
    "href": "general/syllabus.html#programming-projects",
    "title": "Syllabus",
    "section": "Programming Projects",
    "text": "Programming Projects\nIn the third part, students will be assigned mini projects in Python where they can apply their new knowledge in groups on a project of their choice. Each group will present their results and get feedback at the end of the semester.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nYour first Project I (X)\nChoose your project that ties together concepts from the course\nYour first Project II (XI)\nProgress your group-project under assistance\nYour first Project III (XII)\nFinalize your group-project with your team\nPresentations and Discussion (XIII)\nPresent your group’s work and the learnings you have made",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html",
    "href": "part-02/lecture-control.html",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).\n\n\n\n\n\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of x, y, z, w?\n\nx = 1\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"x is of type {type(x).__name__}\")\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\nx is of type int\ny is of type float\nz is of type str\nw is of type bool\n\n\n\n\n\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.\n\n\n\n\n\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-control.html#f-strings",
    "href": "part-02/lecture-control.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new)."
  },
  {
    "objectID": "part-02/lecture-control.html#variables-and-data-types",
    "href": "part-02/lecture-control.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Python uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of x, y, z, w?\n\nx = 1\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"x is of type {type(x).__name__}\")\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\nx is of type int\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators",
    "href": "part-02/lecture-control.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Addition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "href": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Additional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-control.html#objects",
    "href": "part-02/lecture-control.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "part-02/lecture-control.html#methods",
    "href": "part-02/lecture-control.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods",
    "href": "part-02/lecture-control.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods-in-action",
    "href": "part-02/lecture-control.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "part-02/lecture-control.html#indexing",
    "href": "part-02/lecture-control.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n. . .\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\nH\n!"
  },
  {
    "objectID": "part-02/lecture-control.html#slicing",
    "href": "part-02/lecture-control.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\nWorld\nWorld"
  },
  {
    "objectID": "part-02/lecture-control.html#slicing-simplified",
    "href": "part-02/lecture-control.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "part-02/lecture-control.html#comparison-operators",
    "href": "part-02/lecture-control.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n. . .\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-02/lecture-control.html#logical-operators",
    "href": "part-02/lecture-control.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n. . .\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\nTrue\nTrue\nTrue\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "part-02/lecture-control.html#membership-operators",
    "href": "part-02/lecture-control.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n. . .\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\nTrue\nFalse\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "part-02/lecture-control.html#control-structures-1",
    "href": "part-02/lecture-control.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nControl structures are used to control the flow of execution in a program\nCommon control structures: if, elif, else, for, while"
  },
  {
    "objectID": "part-02/lecture-control.html#importance-of-control-flow",
    "href": "part-02/lecture-control.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  }
]