[
  {
    "objectID": "part-02/lecture-presentation.html#f-strings",
    "href": "part-02/lecture-presentation.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "F-Strings",
    "text": "F-Strings\n\nF-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\n\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new)."
  },
  {
    "objectID": "part-02/lecture-presentation.html#variables-and-data-types",
    "href": "part-02/lecture-presentation.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n\n\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "part-02/lecture-presentation.html#arithmetic-operators",
    "href": "part-02/lecture-presentation.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "part-02/lecture-presentation.html#arithmetic-operators-with-variables",
    "href": "part-02/lecture-presentation.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators with Variables",
    "text": "Arithmetic Operators with Variables\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-presentation.html#objects",
    "href": "part-02/lecture-presentation.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n\n\n\n\n\n\n\nNote\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "part-02/lecture-presentation.html#methods",
    "href": "part-02/lecture-presentation.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "part-02/lecture-presentation.html#string-methods",
    "href": "part-02/lecture-presentation.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "part-02/lecture-presentation.html#string-methods-in-action",
    "href": "part-02/lecture-presentation.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\n\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "part-02/lecture-presentation.html#string-task",
    "href": "part-02/lecture-presentation.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n\n\n\n\n\n\n\nTip\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-presentation.html#indexing",
    "href": "part-02/lecture-presentation.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\n\n\nH\n!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#slicing",
    "href": "part-02/lecture-presentation.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\n\n\nWorld\nWorld"
  },
  {
    "objectID": "part-02/lecture-presentation.html#slicing-simplified",
    "href": "part-02/lecture-presentation.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\n\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "part-02/lecture-presentation.html#slicing-string-task",
    "href": "part-02/lecture-presentation.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n\n\n\n\n\n\n\nTip\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-presentation.html#comparison-operators",
    "href": "part-02/lecture-presentation.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\n\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-02/lecture-presentation.html#logical-operators",
    "href": "part-02/lecture-presentation.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\n\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "part-02/lecture-presentation.html#membership-operators",
    "href": "part-02/lecture-presentation.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\n\n\nTrue\nFalse\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "part-02/lecture-presentation.html#control-structures-1",
    "href": "part-02/lecture-presentation.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n\n&gt; Question: What do you think each of the above does?"
  },
  {
    "objectID": "part-02/lecture-presentation.html#indentation",
    "href": "part-02/lecture-presentation.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n\n\n\n\n\n\n\nWarning\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability."
  },
  {
    "objectID": "part-02/lecture-presentation.html#conditional-statements-1",
    "href": "part-02/lecture-presentation.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the and and or operators to combine multiple conditions."
  },
  {
    "objectID": "part-02/lecture-presentation.html#if-statements",
    "href": "part-02/lecture-presentation.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThe condition is True!\nThis will always be printed!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThis will always be printed!\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWriting if condition: is equivalent to if condition == True:"
  },
  {
    "objectID": "part-02/lecture-presentation.html#else-statements",
    "href": "part-02/lecture-presentation.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is True!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is False!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#elif-statements",
    "href": "part-02/lecture-presentation.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is greater than 10!\n\n\n\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is equal to 10!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#comparisons-and-conditional-statements",
    "href": "part-02/lecture-presentation.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\n\n\nYou are the chosen one still visiting school!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#loops-1",
    "href": "part-02/lecture-presentation.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n\n\n\n\n\n\n\nTip\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together."
  },
  {
    "objectID": "part-02/lecture-presentation.html#for-loops",
    "href": "part-02/lecture-presentation.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n\n\n0\n2\n4\n6\n8\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe range() function can take up to three arguments: start, stop, and step."
  },
  {
    "objectID": "part-02/lecture-presentation.html#for-loops-with-lists",
    "href": "part-02/lecture-presentation.html#for-loops-with-lists",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with lists",
    "text": "for-loops with lists\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\n\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na"
  },
  {
    "objectID": "part-02/lecture-presentation.html#while-loops",
    "href": "part-02/lecture-presentation.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n\n\n0\n1\n2\n3\n4\n\n\n\n&gt; Question: What could be an issue with poorly written while-loops?"
  },
  {
    "objectID": "part-02/lecture-presentation.html#while-true",
    "href": "part-02/lecture-presentation.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"
  },
  {
    "objectID": "part-02/lecture-presentation.html#importance-of-control-flow",
    "href": "part-02/lecture-presentation.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n\n\n\n\n\n\n\nNote\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  },
  {
    "objectID": "part-02/lecture-presentation.html#loop-task",
    "href": "part-02/lecture-presentation.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Grouptask: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100\nnumber = 0\n# Your code here\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.\n\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-02/lecture-presentation.html#interesting-books-to-start",
    "href": "part-02/lecture-presentation.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nTip\n\n\nNothing new here, but these are stillgreat books to start with!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture II - Control Structures for Your Code | Programming with Python | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-02/lecture-control.html",
    "href": "part-02/lecture-control.html",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).\n\n\n\n\n\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool\n\n\n\n\n\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.\n\n\n\n\n\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#f-strings",
    "href": "part-02/lecture-control.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#variables-and-data-types",
    "href": "part-02/lecture-control.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Python uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators",
    "href": "part-02/lecture-control.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Addition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "href": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Additional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#objects",
    "href": "part-02/lecture-control.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#methods",
    "href": "part-02/lecture-control.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the dir() function to list all methods and attributes of an object.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods",
    "href": "part-02/lecture-control.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods-in-action",
    "href": "part-02/lecture-control.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#string-task",
    "href": "part-02/lecture-control.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nRemember, that these methods return a new string. The original string is not modified.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#indexing",
    "href": "part-02/lecture-control.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n. . .\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\nH\n!",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#slicing",
    "href": "part-02/lecture-control.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\nWorld\nWorld",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#slicing-simplified",
    "href": "part-02/lecture-control.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\nHlo ol!\n!dlroW ,olleH",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#slicing-string-task",
    "href": "part-02/lecture-control.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nRemember, that these methods return a new string. The original string is not modified.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#comparison-operators",
    "href": "part-02/lecture-control.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n. . .\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#logical-operators",
    "href": "part-02/lecture-control.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n. . .\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\nTrue\nTrue\nTrue\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that and and or are evaluated from left to right.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#membership-operators",
    "href": "part-02/lecture-control.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n. . .\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\nTrue\nFalse\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#control-structures-1",
    "href": "part-02/lecture-control.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n. . .\n&gt; Question: What do you think each of the above does?",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#indentation",
    "href": "part-02/lecture-control.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#conditional-statements-1",
    "href": "part-02/lecture-control.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the and and or operators to combine multiple conditions.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#if-statements",
    "href": "part-02/lecture-control.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThe condition is True!\nThis will always be printed!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThis will always be printed!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWriting if condition: is equivalent to if condition == True:",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#else-statements",
    "href": "part-02/lecture-control.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is True!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is False!",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#elif-statements",
    "href": "part-02/lecture-control.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is greater than 10!\n\n\n. . .\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is equal to 10!",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#comparisons-and-conditional-statements",
    "href": "part-02/lecture-control.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\nYou are the chosen one still visiting school!",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#loops-1",
    "href": "part-02/lecture-control.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#for-loops",
    "href": "part-02/lecture-control.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n0\n2\n4\n6\n8\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThe range() function can take up to three arguments: start, stop, and step.\n\n\n. . .",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#for-loops-with-lists",
    "href": "part-02/lecture-control.html#for-loops-with-lists",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with lists",
    "text": "for-loops with lists\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#while-loops",
    "href": "part-02/lecture-control.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n0\n1\n2\n3\n4\n\n\n. . .\n&gt; Question: What could be an issue with poorly written while-loops?",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#while-true",
    "href": "part-02/lecture-control.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#importance-of-control-flow",
    "href": "part-02/lecture-control.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#loop-task",
    "href": "part-02/lecture-control.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Grouptask: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100\nnumber = 0\n# Your code here\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.\n\n\nLiterature {.title}",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html#interesting-books-to-start",
    "href": "part-02/lecture-control.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNothing new here, but these are still great books to start with!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "02 Control",
      "Lecture"
    ]
  }
]