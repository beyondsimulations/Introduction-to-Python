[
  {
    "objectID": "part-10/lecture-projects-presentation.html#congratulations",
    "href": "part-10/lecture-projects-presentation.html#congratulations",
    "title": "Lecture X - Programming Projects",
    "section": "Congratulations",
    "text": "Congratulations\n🥳 You’ve learned your first steps to program with Python! 🎉"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#structure",
    "href": "part-10/lecture-projects-presentation.html#structure",
    "title": "Lecture X - Programming Projects",
    "section": "Structure",
    "text": "Structure\n\nOver the upcoming weeks you will work on a project\nYou will present it in the last week of this course\nYou can work in groups of up to 3 people\nYou can choose from a wide range of project ideas\nOr you can propose your own idea!\n\n\n\n\n\n\n\n\nTip\n\n\nYou have enough time to discuss different ideas in your group today. From my experience, it is a good idea to choose a project that you are really interested in."
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#presentation",
    "href": "part-10/lecture-projects-presentation.html#presentation",
    "title": "Lecture X - Programming Projects",
    "section": "Presentation",
    "text": "Presentation\n\nEach group has 15 minutes with 5 additional minutes for questions\nIntroduce your idea and the development cycle\nProvide code examples and/or visualizations\nComment on challenges and what you’ve learned\n\n\n\n\n\n\n\n\nTip\n\n\nYour project does not have to be perfect! To pass, you simply have to show that you tried your best. Try, fail potentially and learn - that’s the best way to improve your coding skills."
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-1-data-analysis-and-visualization",
    "href": "part-10/lecture-projects-presentation.html#idea-1-data-analysis-and-visualization",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 1: Data Analysis and Visualization",
    "text": "Idea 1: Data Analysis and Visualization"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-2-web-scraping-and-data-collection",
    "href": "part-10/lecture-projects-presentation.html#idea-2-web-scraping-and-data-collection",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 2: Web Scraping and Data Collection",
    "text": "Idea 2: Web Scraping and Data Collection"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-3-machine-learning-model-development",
    "href": "part-10/lecture-projects-presentation.html#idea-3-machine-learning-model-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 3: Machine Learning Model Development",
    "text": "Idea 3: Machine Learning Model Development"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-4-web-application-development",
    "href": "part-10/lecture-projects-presentation.html#idea-4-web-application-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 4: Web Application Development",
    "text": "Idea 4: Web Application Development"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-5-ai-chatbot-development",
    "href": "part-10/lecture-projects-presentation.html#idea-5-ai-chatbot-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 5: AI Chatbot Development",
    "text": "Idea 5: AI Chatbot Development"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-6-computer-vision-and-image-processing",
    "href": "part-10/lecture-projects-presentation.html#idea-6-computer-vision-and-image-processing",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 6: Computer Vision and Image Processing",
    "text": "Idea 6: Computer Vision and Image Processing"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-7-simulation",
    "href": "part-10/lecture-projects-presentation.html#idea-7-simulation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 7: Simulation",
    "text": "Idea 7: Simulation"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#idea-8-game-development",
    "href": "part-10/lecture-projects-presentation.html#idea-8-game-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 8: Game Development",
    "text": "Idea 8: Game Development"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#ask-questions",
    "href": "part-10/lecture-projects-presentation.html#ask-questions",
    "title": "Lecture X - Programming Projects",
    "section": "Ask Questions",
    "text": "Ask Questions"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#use-of-ai",
    "href": "part-10/lecture-projects-presentation.html#use-of-ai",
    "title": "Lecture X - Programming Projects",
    "section": "Use of AI",
    "text": "Use of AI"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#how-to-continue-after-the-presentations",
    "href": "part-10/lecture-projects-presentation.html#how-to-continue-after-the-presentations",
    "title": "Lecture X - Programming Projects",
    "section": "How to continue after the presentations?",
    "text": "How to continue after the presentations?"
  },
  {
    "objectID": "part-10/lecture-projects-presentation.html#learning-ressources",
    "href": "part-10/lecture-projects-presentation.html#learning-ressources",
    "title": "Lecture X - Programming Projects",
    "section": "Learning Ressources",
    "text": "Learning Ressources\n\nTry to continue programming\nVersion Control with Git\nJupyther Notebooks\nQuarto for Publishing\nFurther interesting topics here\n\n\n\n\nLecture X - Programming Projects | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-10/lecture-projects.html#congratulations",
    "href": "part-10/lecture-projects.html#congratulations",
    "title": "Lecture X - Programming Projects",
    "section": "Congratulations",
    "text": "Congratulations\n🥳 You’ve learned your first steps to program with Python! 🎉"
  },
  {
    "objectID": "part-10/lecture-projects.html#structure",
    "href": "part-10/lecture-projects.html#structure",
    "title": "Lecture X - Programming Projects",
    "section": "Structure",
    "text": "Structure\n\nOver the upcoming weeks you will work on a project\nYou will present it in the last week of this course\nYou can work in groups of up to 3 people\nYou can choose from a wide range of project ideas\nOr you can propose your own idea!\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou have enough time to discuss different ideas in your group today. From my experience, it is a good idea to choose a project that you are really interested in."
  },
  {
    "objectID": "part-10/lecture-projects.html#presentation",
    "href": "part-10/lecture-projects.html#presentation",
    "title": "Lecture X - Programming Projects",
    "section": "Presentation",
    "text": "Presentation\n\nEach group has 15 minutes with 5 additional minutes for questions\nIntroduce your idea and the development cycle\nProvide code examples and/or visualizations\nComment on challenges and what you’ve learned\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYour project does not have to be perfect! To pass, you simply have to show that you tried your best. Try, fail potentially and learn - that’s the best way to improve your coding skills."
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-1-data-analysis-and-visualization",
    "href": "part-10/lecture-projects.html#idea-1-data-analysis-and-visualization",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 1: Data Analysis and Visualization",
    "text": "Idea 1: Data Analysis and Visualization"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-2-web-scraping-and-data-collection",
    "href": "part-10/lecture-projects.html#idea-2-web-scraping-and-data-collection",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 2: Web Scraping and Data Collection",
    "text": "Idea 2: Web Scraping and Data Collection"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-3-machine-learning-model-development",
    "href": "part-10/lecture-projects.html#idea-3-machine-learning-model-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 3: Machine Learning Model Development",
    "text": "Idea 3: Machine Learning Model Development"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-4-web-application-development",
    "href": "part-10/lecture-projects.html#idea-4-web-application-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 4: Web Application Development",
    "text": "Idea 4: Web Application Development"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-5-ai-chatbot-development",
    "href": "part-10/lecture-projects.html#idea-5-ai-chatbot-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 5: AI Chatbot Development",
    "text": "Idea 5: AI Chatbot Development"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-6-computer-vision-and-image-processing",
    "href": "part-10/lecture-projects.html#idea-6-computer-vision-and-image-processing",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 6: Computer Vision and Image Processing",
    "text": "Idea 6: Computer Vision and Image Processing"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-7-simulation",
    "href": "part-10/lecture-projects.html#idea-7-simulation",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 7: Simulation",
    "text": "Idea 7: Simulation"
  },
  {
    "objectID": "part-10/lecture-projects.html#idea-8-game-development",
    "href": "part-10/lecture-projects.html#idea-8-game-development",
    "title": "Lecture X - Programming Projects",
    "section": "Idea 8: Game Development",
    "text": "Idea 8: Game Development"
  },
  {
    "objectID": "part-10/lecture-projects.html#ask-questions",
    "href": "part-10/lecture-projects.html#ask-questions",
    "title": "Lecture X - Programming Projects",
    "section": "Ask Questions",
    "text": "Ask Questions"
  },
  {
    "objectID": "part-10/lecture-projects.html#use-of-ai",
    "href": "part-10/lecture-projects.html#use-of-ai",
    "title": "Lecture X - Programming Projects",
    "section": "Use of AI",
    "text": "Use of AI"
  },
  {
    "objectID": "part-10/lecture-projects.html#how-to-continue-after-the-presentations",
    "href": "part-10/lecture-projects.html#how-to-continue-after-the-presentations",
    "title": "Lecture X - Programming Projects",
    "section": "How to continue after the presentations?",
    "text": "How to continue after the presentations?"
  },
  {
    "objectID": "part-10/lecture-projects.html#learning-ressources",
    "href": "part-10/lecture-projects.html#learning-ressources",
    "title": "Lecture X - Programming Projects",
    "section": "Learning Ressources",
    "text": "Learning Ressources\n\nTry to continue programming\nVersion Control with Git\nJupyther Notebooks\nQuarto for Publishing\nFurther interesting topics here"
  },
  {
    "objectID": "part-02/tutorial-control.html",
    "href": "part-02/tutorial-control.html",
    "title": "Tutorial II - Control Structures",
    "section": "",
    "text": "Introduction\nJust like in the previous tutorial, you will likely find solutions to most exercises online. However, I still strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions. Don’t worry, I won’t repeat this section again and again.\n\n\nDecoding secret messages with methods\nIn this exercise, we’ll practice string manipulation and slicing. You’ll work with a secret message encoded using various string operations and learn how to apply some new methods like title(), replace() and count(). By following a series of steps, you’ll gradually decode the message. Let’s begin with the encoded message and work through each decoding step:\n\n# Decode a secret message by following a series of instructions.\n# Each instruction requires you to use different operations and methods.\n# The encoded message is:\nsecret_message = \"!nohtyyP gnidoc nrael ot nuf si tI\"\n\n# a) TODO: Reverse the string\n# Hint: You can use slicing to reverse a string\n# Your code here\n\n# b) TODO: Remove the exclamation mark at the beginning\n# Your code here\n\n# c) TODO: Replace 'yP' with 'Py'\n# Your code here\n\n# d) TODO: Convert the string to title case\n# -&gt; Capitalize the first letter of each word\n# Your code here\n\n# e) TODO: Add spaces around the word 'coding' \n# Hint: Use the replace() method\n# Your code here\n\n# f) TODO: Count how many times the letter 'n' appears in the decoded message\n# Your code here\n\n\n\n\n\n\n\nTip\n\n\n\nUse the help() function to get more information about a method. For example, typing help(str.replace) in the shell will show the documentation for the replace() method. To exit the documentation, press q."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#data-structures",
    "href": "part-05/lecture-errors-presentation.html#data-structures",
    "title": "Lecture V - Handling Errors",
    "section": "Data Structures",
    "text": "Data Structures\n\nNewly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#operations-and-methods",
    "href": "part-05/lecture-errors-presentation.html#operations-and-methods",
    "title": "Lecture V - Handling Errors",
    "section": "Operations and Methods",
    "text": "Operations and Methods\n\nEach data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n\n\n\n\n\n\n\nTip\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#io-and-file-handling",
    "href": "part-05/lecture-errors-presentation.html#io-and-file-handling",
    "title": "Lecture V - Handling Errors",
    "section": "I/O and File Handling",
    "text": "I/O and File Handling\n\nBasic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#what-are-exceptions",
    "href": "part-05/lecture-errors-presentation.html#what-are-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Exceptions?",
    "text": "What are Exceptions?\n\nExceptions are discovered errors that occur during the execution\n\n\n\ndef divide_numbers(a, b):\n        result = a / b\n        return result \n\nprint(divide_numbers(10, 0))\nprint(\"I will not be printed as the program crashed before.\")\n\n\n\nZeroDivisionError: division by zero\n\n\n\n\n\n\n\n\nWarning\n\n\nUndiscovered errors can be very hard to debug and can cause crashes and other issues."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#common-built-in-exceptions-i",
    "href": "part-05/lecture-errors-presentation.html#common-built-in-exceptions-i",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions I",
    "text": "Common Built-in Exceptions I\n\nValueError: argument of correct type but inappropriate value\nTypeError: function applied to object of inappropriate type\nNameError: raised when a local or global name is not found\nIndexError: raised when a sequence subscript is out of range\nKeyError: raised when a dictionary key is not found\nFileNotFoundError: file or directory not found\nZeroDivisionError: division or modulo by zero"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#common-built-in-exceptions-ii",
    "href": "part-05/lecture-errors-presentation.html#common-built-in-exceptions-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions II",
    "text": "Common Built-in Exceptions II\n\nAttributeError: attribute reference or assignment fails\nImportError: import of a modulefails\nSyntaxError: parser encounters a syntax error\nIndentationError: indentation is not correct\nRuntimeError: error does not fall into any category\n\n\n\n\n\n\n\n\nNote\n\n\nThe list of built-in exceptions is even longer, these are just the most common ones. We won’t cover the errors listed here in detail, but it is good to be aware of them."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#try-except-blocks",
    "href": "part-05/lecture-errors-presentation.html#try-except-blocks",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks",
    "text": "try-except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains the code that might raise an exception\nexcept block contains the executed code if an exception occurs\n\n\n\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(divide_numbers(10, 0))\nprint(\"I will be printed as the exception was handled!\")\n\n\n\nError: Division by zero is not allowed.\nI will be printed as the exception was handled!"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#try-except-blocks-for-specific-exceptions",
    "href": "part-05/lecture-errors-presentation.html#try-except-blocks-for-specific-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks for specific exceptions",
    "text": "try-except Blocks for specific exceptions\n\nWe can also specify the type of exception we want to catch\nThis allows for more specific error handling\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the specific exception type\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ...\n\n\n\n\n\n\n\nNote\n\n\nas e is used to store the exception in a variable. Not mandatory, but good practice to do so."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#try-except-blocks-in-action",
    "href": "part-05/lecture-errors-presentation.html#try-except-blocks-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks in Action",
    "text": "try-except Blocks in Action\n&gt;Grouptask: Solve the following problem using try-except blocks:\n\n\n# Implement a function that converts a string to an integer\n# 1. Try to convert the input_string to an integer\n# 2. If successful, return the integer\n# 3. If a ValueError occurs, catch it and return \"Invalid input: not a number\"\n# 4. If any other exception occurs, catch it and return \n# \"An unexpected error occurred: [type of exception]\"\n\n# Your code here\n\n# Test cases\nprint(string_to_int(\"42\"))        # Should print: 42\nprint(string_to_int(\"Hello\"))     # Should print: Invalid \nprint(string_to_int([123]))       \n\n\n\nQuestion: What is the output of the last line?"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#raising-exceptions-1",
    "href": "part-05/lecture-errors-presentation.html#raising-exceptions-1",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions ourselves using the raise statement\nIt allows us to handle errors in a more controlled manner\n\n\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n&gt;Task: Try to raise an exception in the function above by passing a string to the validate_age function. What happens?"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#raising-exceptions-with-custom-messages",
    "href": "part-05/lecture-errors-presentation.html#raising-exceptions-with-custom-messages",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions with Custom Messages",
    "text": "Raising Exceptions with Custom Messages\n\nWe can also raise exceptions with custom messages\nThis helps to provide more information about the error\n\n\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n\n\n&gt;Question: What do you think the raise statement will show now?"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#what-are-assertions",
    "href": "part-05/lecture-errors-presentation.html#what-are-assertions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Assertions?",
    "text": "What are Assertions?\n\nAssertions are statements that check if a condition is true\nIf the condition is false, an AssertionError is raised\nWe could use them to check the results of a calculation\n\n\n\nx = 9\ny = 10\nassert x &lt; y, \"x is not smaller than y\"\nassert isinstance(y, float), \"y is not a float\"\n\n\n\n&gt;Task: Try to run the code above and discuss what happens.\n\n\n\n\n\n\n\n\nNote\n\n\nisinstance is a built-in function that checks if an object is an instance of a class."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#assertions-in-action",
    "href": "part-05/lecture-errors-presentation.html#assertions-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "Assertions in Action",
    "text": "Assertions in Action\n&gt;Grouptask: Solve the following problem using assertions:\n\n# Implement a function that takes a list of integers and returns the sum of the numbers. \n# 1. Use assertions to check if the input is a list \n# 2. Use assertions to check if the list contains only integers.\n# 3. If the list contains only integers, return the sum of the numbers\n\n# Your code here\n\n# Test cases\nprint(sum_of_numbers([1, 2, 3, 4, 5])) # Should print: 15\nprint(sum_of_numbers([1, 2.0, 3, 4, 5])) # Should print: AssertionError"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#what-is-debugging",
    "href": "part-05/lecture-errors-presentation.html#what-is-debugging",
    "title": "Lecture V - Handling Errors",
    "section": "What is Debugging?",
    "text": "What is Debugging?\n\nDebugging is the process of finding and fixing errors in code\nWe can use print and assert statements to debug our code\nWe can also use debugging tools that are built into most IDEs"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#using-print-and-assert",
    "href": "part-05/lecture-errors-presentation.html#using-print-and-assert",
    "title": "Lecture V - Handling Errors",
    "section": "Using Print and Assert",
    "text": "Using Print and Assert\n\nprint: check the values of variables at different points\nassert: check calculations or the types of variables\n\n\n\nx = \"Hello\" # x is a string\nprint(x)\nx = 42.0 # x is a float\nprint(x)\nassert isinstance(x, float), \"x is not a float\"\nassert x == 42.0, \"x is not 42.0\"\n\n\n\nHello\n42.0\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhile this can be useful, it is not always the best way to debug code."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#using-debugging-tools",
    "href": "part-05/lecture-errors-presentation.html#using-debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Using Debugging Tools",
    "text": "Using Debugging Tools\n\nWe can also use debugging tools built into most IDEs\nAllow to step through code, set breakpoints, and inspect variables\nWe will use Thonny, but there are many other options"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#debugging-in-thonny-i",
    "href": "part-05/lecture-errors-presentation.html#debugging-in-thonny-i",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Thonny I",
    "text": "Debugging in Thonny I\n&gt;Task: Open Thonny and copy the following code:\n\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    \n    average = total / count\n    return average\n\n# Test cases\ntest_lists = [\n    [1, 2, 3, 4, 5],\n    [10, 20, 30],\n    []\n    ]\n    \nfor i, test_list in enumerate(test_lists):\n    print(f\"Test case {i + 1}:\")\n    result = calculate_average(test_list)\n    print(f\"Average: {result}\\n\")"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#debugging-in-thonny-ii",
    "href": "part-05/lecture-errors-presentation.html#debugging-in-thonny-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Thonny II",
    "text": "Debugging in Thonny II\n\nClick on the bug icon on the left side of the screen"
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#debugging-tools",
    "href": "part-05/lecture-errors-presentation.html#debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging Tools",
    "text": "Debugging Tools\n&gt;Task: Run the code and use the debugging tools to find the error.\n\nUse step over, step into and step out to navigate through your code\nUse the variable viewer to inspect variables at different points\nUse the breakpoints to pause the execution at a specific point\n\n\n&gt;Question: What do you think the error is?\n\n\n\n\n\n\n\n\nNote\n\n\nThe enumerate function used in the code is super helpful function that returns a tuple containing the index and the value of the item in the list and it is not the error."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#using-logging",
    "href": "part-05/lecture-errors-presentation.html#using-logging",
    "title": "Lecture V - Handling Errors",
    "section": "Using Logging",
    "text": "Using Logging\n\nWe can also use logging to track the execution of a program\nIt is a structured way to log errors and other issues\nYou can specify the level of severity for each log message\nHide messages of a certain severity if you want to during execution\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of errors, exceptions and debugging in Python. Logging is beyond our scope, but it is good to know should you work with larger codebases later on."
  },
  {
    "objectID": "part-05/lecture-errors-presentation.html#interesting-books",
    "href": "part-05/lecture-errors-presentation.html#interesting-books",
    "title": "Lecture V - Handling Errors",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nTip\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture V - Handling Errors | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-05/lecture-errors.html",
    "href": "part-05/lecture-errors.html",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Newly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n. . .\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)\n\n\n\n\n\nEach data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones.\n\n\n\n\n\n\nBasic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python."
  },
  {
    "objectID": "part-05/lecture-errors.html#data-structures",
    "href": "part-05/lecture-errors.html#data-structures",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Newly introduced data structures:\n\nTuples: Ordered, immutable collections\nLists: Ordered, mutable collections\nSets: Unordered collections of unique elements\nDictionaries: Key-value pairs\n\n\n. . .\n\nlist_example = [1, 2, 3, 4, 5]\nset_example = {1, 2, 3, 4, 5}\ndict_example = {\"a\": 1, \"b\": 2, \"c\": 3}\ntuple_example = (1, 2, 3, 4, 5)"
  },
  {
    "objectID": "part-05/lecture-errors.html#operations-and-methods",
    "href": "part-05/lecture-errors.html#operations-and-methods",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Each data structure has specific operations and methods:\n\nTuples and Lists: Indexing, slicing, concatenation\nSets: Union, intersection, difference\nDictionaries: Key-based access, keys(), values()\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nComprehensions for concise creation of these structures are often used in practice to create new data structures from existing ones."
  },
  {
    "objectID": "part-05/lecture-errors.html#io-and-file-handling",
    "href": "part-05/lecture-errors.html#io-and-file-handling",
    "title": "Lecture V - Handling Errors",
    "section": "",
    "text": "Basic file operations\n\nOpening files with open()\nReading and writing files\nUsing the with statement for safer file handling\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThis covers the main points from our last lecture on data structures and file handling in Python."
  },
  {
    "objectID": "part-05/lecture-errors.html#what-are-exceptions",
    "href": "part-05/lecture-errors.html#what-are-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Exceptions?",
    "text": "What are Exceptions?\n\nExceptions are discovered errors that occur during the execution\n\n. . .\n\ndef divide_numbers(a, b):\n        result = a / b\n        return result \n\nprint(divide_numbers(10, 0))\nprint(\"I will not be printed as the program crashed before.\")\n\n. . .\nZeroDivisionError: division by zero\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nUndiscovered errors can be very hard to debug and can cause crashes and other issues."
  },
  {
    "objectID": "part-05/lecture-errors.html#common-built-in-exceptions-i",
    "href": "part-05/lecture-errors.html#common-built-in-exceptions-i",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions I",
    "text": "Common Built-in Exceptions I\n\nValueError: argument of correct type but inappropriate value\nTypeError: function applied to object of inappropriate type\nNameError: raised when a local or global name is not found\nIndexError: raised when a sequence subscript is out of range\nKeyError: raised when a dictionary key is not found\nFileNotFoundError: file or directory not found\nZeroDivisionError: division or modulo by zero"
  },
  {
    "objectID": "part-05/lecture-errors.html#common-built-in-exceptions-ii",
    "href": "part-05/lecture-errors.html#common-built-in-exceptions-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Common Built-in Exceptions II",
    "text": "Common Built-in Exceptions II\n\nAttributeError: attribute reference or assignment fails\nImportError: import of a modulefails\nSyntaxError: parser encounters a syntax error\nIndentationError: indentation is not correct\nRuntimeError: error does not fall into any category\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe list of built-in exceptions is even longer, these are just the most common ones. We won’t cover the errors listed here in detail, but it is good to be aware of them."
  },
  {
    "objectID": "part-05/lecture-errors.html#try-except-blocks",
    "href": "part-05/lecture-errors.html#try-except-blocks",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks",
    "text": "try-except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains the code that might raise an exception\nexcept block contains the executed code if an exception occurs\n\n. . .\n\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(divide_numbers(10, 0))\nprint(\"I will be printed as the exception was handled!\")\n\nError: Division by zero is not allowed.\nI will be printed as the exception was handled!"
  },
  {
    "objectID": "part-05/lecture-errors.html#try-except-blocks-for-specific-exceptions",
    "href": "part-05/lecture-errors.html#try-except-blocks-for-specific-exceptions",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks for specific exceptions",
    "text": "try-except Blocks for specific exceptions\n\nWe can also specify the type of exception we want to catch\nThis allows for more specific error handling\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the specific exception type\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ...\n. . .\n\n\n\n\n\n\nNote\n\n\n\nas e is used to store the exception in a variable. Not mandatory, but good practice to do so."
  },
  {
    "objectID": "part-05/lecture-errors.html#try-except-blocks-in-action",
    "href": "part-05/lecture-errors.html#try-except-blocks-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "try-except Blocks in Action",
    "text": "try-except Blocks in Action\n&gt;Grouptask: Solve the following problem using try-except blocks:\n. . .\n\n# Implement a function that converts a string to an integer\n# 1. Try to convert the input_string to an integer\n# 2. If successful, return the integer\n# 3. If a ValueError occurs, catch it and return \"Invalid input: not a number\"\n# 4. If any other exception occurs, catch it and return \n# \"An unexpected error occurred: [type of exception]\"\n\n# Your code here\n\n# Test cases\nprint(string_to_int(\"42\"))        # Should print: 42\nprint(string_to_int(\"Hello\"))     # Should print: Invalid \nprint(string_to_int([123]))       \n\n. . .\nQuestion: What is the output of the last line?"
  },
  {
    "objectID": "part-05/lecture-errors.html#raising-exceptions-1",
    "href": "part-05/lecture-errors.html#raising-exceptions-1",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions ourselves using the raise statement\nIt allows us to handle errors in a more controlled manner\n\n. . .\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n&gt;Task: Try to raise an exception in the function above by passing a string to the validate_age function. What happens?"
  },
  {
    "objectID": "part-05/lecture-errors.html#raising-exceptions-with-custom-messages",
    "href": "part-05/lecture-errors.html#raising-exceptions-with-custom-messages",
    "title": "Lecture V - Handling Errors",
    "section": "Raising Exceptions with Custom Messages",
    "text": "Raising Exceptions with Custom Messages\n\nWe can also raise exceptions with custom messages\nThis helps to provide more information about the error\n\n. . .\n\ndef validate_age(age):\n    if age &lt; 0:\n        raise ValueError(\"Age cannot be negative\")\n    return age\n\nprint(validate_age(25)) # This will print 25\nprint(validate_age(-1)) # This will raise a ValueError\n\n. . .\n&gt;Question: What do you think the raise statement will show now?"
  },
  {
    "objectID": "part-05/lecture-errors.html#what-are-assertions",
    "href": "part-05/lecture-errors.html#what-are-assertions",
    "title": "Lecture V - Handling Errors",
    "section": "What are Assertions?",
    "text": "What are Assertions?\n\nAssertions are statements that check if a condition is true\nIf the condition is false, an AssertionError is raised\nWe could use them to check the results of a calculation\n\n. . .\n\nx = 9\ny = 10\nassert x &lt; y, \"x is not smaller than y\"\nassert isinstance(y, float), \"y is not a float\"\n\n. . .\n&gt;Task: Try to run the code above and discuss what happens.\n. . .\n\n\n\n\n\n\nNote\n\n\n\nisinstance is a built-in function that checks if an object is an instance of a class."
  },
  {
    "objectID": "part-05/lecture-errors.html#assertions-in-action",
    "href": "part-05/lecture-errors.html#assertions-in-action",
    "title": "Lecture V - Handling Errors",
    "section": "Assertions in Action",
    "text": "Assertions in Action\n&gt;Grouptask: Solve the following problem using assertions:\n\n# Implement a function that takes a list of integers and returns the sum of the numbers. \n# 1. Use assertions to check if the input is a list \n# 2. Use assertions to check if the list contains only integers.\n# 3. If the list contains only integers, return the sum of the numbers\n\n# Your code here\n\n# Test cases\nprint(sum_of_numbers([1, 2, 3, 4, 5])) # Should print: 15\nprint(sum_of_numbers([1, 2.0, 3, 4, 5])) # Should print: AssertionError"
  },
  {
    "objectID": "part-05/lecture-errors.html#what-is-debugging",
    "href": "part-05/lecture-errors.html#what-is-debugging",
    "title": "Lecture V - Handling Errors",
    "section": "What is Debugging?",
    "text": "What is Debugging?\n\nDebugging is the process of finding and fixing errors in code\nWe can use print and assert statements to debug our code\nWe can also use debugging tools that are built into most IDEs"
  },
  {
    "objectID": "part-05/lecture-errors.html#using-print-and-assert",
    "href": "part-05/lecture-errors.html#using-print-and-assert",
    "title": "Lecture V - Handling Errors",
    "section": "Using Print and Assert",
    "text": "Using Print and Assert\n\nprint: check the values of variables at different points\nassert: check calculations or the types of variables\n\n. . .\n\nx = \"Hello\" # x is a string\nprint(x)\nx = 42.0 # x is a float\nprint(x)\nassert isinstance(x, float), \"x is not a float\"\nassert x == 42.0, \"x is not 42.0\"\n\nHello\n42.0\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWhile this can be useful, it is not always the best way to debug code."
  },
  {
    "objectID": "part-05/lecture-errors.html#using-debugging-tools",
    "href": "part-05/lecture-errors.html#using-debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Using Debugging Tools",
    "text": "Using Debugging Tools\n\nWe can also use debugging tools built into most IDEs\nAllow to step through code, set breakpoints, and inspect variables\nWe will use Thonny, but there are many other options"
  },
  {
    "objectID": "part-05/lecture-errors.html#debugging-in-thonny-i",
    "href": "part-05/lecture-errors.html#debugging-in-thonny-i",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Thonny I",
    "text": "Debugging in Thonny I\n&gt;Task: Open Thonny and copy the following code:\n\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    \n    average = total / count\n    return average\n\n# Test cases\ntest_lists = [\n    [1, 2, 3, 4, 5],\n    [10, 20, 30],\n    []\n    ]\n    \nfor i, test_list in enumerate(test_lists):\n    print(f\"Test case {i + 1}:\")\n    result = calculate_average(test_list)\n    print(f\"Average: {result}\\n\")"
  },
  {
    "objectID": "part-05/lecture-errors.html#debugging-in-thonny-ii",
    "href": "part-05/lecture-errors.html#debugging-in-thonny-ii",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging in Thonny II",
    "text": "Debugging in Thonny II\n\nClick on the bug icon on the left side of the screen"
  },
  {
    "objectID": "part-05/lecture-errors.html#debugging-tools",
    "href": "part-05/lecture-errors.html#debugging-tools",
    "title": "Lecture V - Handling Errors",
    "section": "Debugging Tools",
    "text": "Debugging Tools\n&gt;Task: Run the code and use the debugging tools to find the error.\n\nUse step over, step into and step out to navigate through your code\nUse the variable viewer to inspect variables at different points\nUse the breakpoints to pause the execution at a specific point\n\n. . .\n&gt;Question: What do you think the error is?\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe enumerate function used in the code is super helpful function that returns a tuple containing the index and the value of the item in the list and it is not the error."
  },
  {
    "objectID": "part-05/lecture-errors.html#using-logging",
    "href": "part-05/lecture-errors.html#using-logging",
    "title": "Lecture V - Handling Errors",
    "section": "Using Logging",
    "text": "Using Logging\n\nWe can also use logging to track the execution of a program\nIt is a structured way to log errors and other issues\nYou can specify the level of severity for each log message\nHide messages of a certain severity if you want to during execution\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of errors, exceptions and debugging in Python. Logging is beyond our scope, but it is good to know should you work with larger codebases later on."
  },
  {
    "objectID": "part-05/lecture-errors.html#interesting-books",
    "href": "part-05/lecture-errors.html#interesting-books",
    "title": "Lecture V - Handling Errors",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNothing new here, but these are still great books!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#functions",
    "href": "part-04/lecture-dimensions-presentation.html#functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Functions",
    "text": "Functions\n\nFunctions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\n\n\nWelcome to this lecture, Students!"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#scope",
    "href": "part-04/lecture-dimensions-presentation.html#scope",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Scope",
    "text": "Scope\n\nScope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#classes",
    "href": "part-04/lecture-dimensions-presentation.html#classes",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n\n\nclass Lectures:  \n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\n\n\nLecture '4. Data in more than one dimension' is 90 minutes long!"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#what-are-tuples",
    "href": "part-04/lecture-dimensions-presentation.html#what-are-tuples",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Tuples?",
    "text": "What are Tuples?\n\nTuples are ordered collections of items\nThey are immutable (cannot be changed after creation)\nHelp in storing multiple items in a single variable\nCreated using the tuple() function or the () syntax\n\n\n\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n\n\n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#tuple-operations",
    "href": "part-04/lecture-dimensions-presentation.html#tuple-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Operations",
    "text": "Tuple Operations\n\nTuples support the same operations as strings\nWe can use indexing and slicing to access elements\nWe can use the + operator to concatenate tuples\nWe can use the * operator to repeat a tuple\n\n\n&gt;Question: What will the following code print?\n\nmy_tuple = (1, 2, 3)    \nprint(my_tuple[1:3])\nprint(my_tuple + (4, 5, 6))\nprint(my_tuple * 2)\n\n\n\n(2, 3)\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3)"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#tuple-methods",
    "href": "part-04/lecture-dimensions-presentation.html#tuple-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Methods",
    "text": "Tuple Methods\n\nTuples support the following methods:\n\ncount(x): Returns the number of times x appears in the tuple\nindex(x): Returns the index of the first occurrence of x\n\n\n\n&gt;Question: What will this code print?\n\nmy_tuple = (1, 2, 3, 2, 4, 2)\nprint(my_tuple.count(2))\nprint(my_tuple.index(3))\n\n\n\n3\n2"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#tuple-data-types",
    "href": "part-04/lecture-dimensions-presentation.html#tuple-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Data Types",
    "text": "Tuple Data Types\n\nTuples can contain elements of different data types\n\n\nmy_tuple = (\"Peter\", 25, \"Hamburg\")\nprint(my_tuple)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n# This works as well\nmy_tuple = \"Peter\", 25, \"Hamburg\"\nprint(my_tuple)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWe can also create tuples by listing the elements separated by commas."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#tuples-from-functions",
    "href": "part-04/lecture-dimensions-presentation.html#tuples-from-functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuples from Functions",
    "text": "Tuples from Functions\n\nFunctions can return tuples\nThis is useful if we want to return multiple values from a function\n\n\n\ndef get_student_info(name, age, city):\n    return name, age, city\n\nstudent_info = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(student_info)\n\n\n\n('Peter', 25, 'Hamburg')\n\n\n\n\n&gt;Question: How would you access the age from the tuple?"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#tuple-unpacking",
    "href": "part-04/lecture-dimensions-presentation.html#tuple-unpacking",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Unpacking",
    "text": "Tuple Unpacking\n\nAllows us to assign the elements of a tuple to variables\nThe number of variables must match the number of elements\nUse the * operator to assign the remaining elements to a variable\n\n\n\ndef get_student_info(name, age, city):\n    return name, age, city\nname, *rest = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(f\"Name: {name}\")\nprint(f\"Other info: {rest}\")\n\n\n\nName: Peter\nOther info: [25, 'Hamburg']\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe output is positional, so we have to be careful with the order of the variables."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#what-are-lists",
    "href": "part-04/lecture-dimensions-presentation.html#what-are-lists",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are ordered collections of items\nThey are mutable (can be changed after creation)\nCreated using the list() function or the [] syntax\nThey support the same operations as strings and tuples\nHave much more methods and are more versatile than tuples\n\n\n\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\n\n\n\n[1, 2, 3, 4, 5]\n\n\n\n\n&gt;Question: Any idea why lists support more methods?"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#list-methods",
    "href": "part-04/lecture-dimensions-presentation.html#list-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "List Methods",
    "text": "List Methods\n\nCommon methods for lists:\n\ncount(x): Returns the number of times x appears in the list\nappend(x): Adds an element x to the end of the list\ninsert(i, x): Inserts an element x at index i\nremove(x): Removes the first occurrence of element x\nindex(x): Returns the index of the first occurrence of x\n\npop([i]): Removes the element at index i and returns it\nsort(): Sorts the list in ascending order\nreverse(): Reverses the list"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#lists-in-action",
    "href": "part-04/lecture-dimensions-presentation.html#lists-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Lists in Action",
    "text": "Lists in Action\n&gt;Task: Solve the following problem using lists:\n\n# Imagine the following shoppping list for this weekend\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\n\n\n\nFirst, add some apples to the list for a healthy option\nNext, remove the cider as you already have some at home\nSort all items in the list alphabetically\nPrint each item of the list on a new line\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the methods and loops we learned so far to solve the problem."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#what-are-sets",
    "href": "part-04/lecture-dimensions-presentation.html#what-are-sets",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Sets?",
    "text": "What are Sets?\n\nSets are unordered collections of unique elements\nThey are mutable (can be changed after creation)\nCreated using the set() function or the {} syntax\nSupports + and * operations like lists and tuples\nUnlike lists and tuples, sets do not support indexing\n\n\n\nmy_set = {1, 2, 2, 5, 5}\nprint(my_set)\n\n\n\n{1, 2, 5}"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#set-methods",
    "href": "part-04/lecture-dimensions-presentation.html#set-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Methods",
    "text": "Set Methods\n\nCommon methods for sets:\n\nadd(x): Adds an element x to the set\nremove(x): Removes an element x from the set\ndiscard(x): Removes an element x from the set if it is present\npop(): Removes and returns an arbitrary element from the set\nupdate(other): Adds all elements from other to the set"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#set-theory",
    "href": "part-04/lecture-dimensions-presentation.html#set-theory",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Theory",
    "text": "Set Theory\n\nAdditional methods are derived from set theory\n\nunion(other): New set with elements from both sets\nintersection(other): New set with common elements\nisdisjoint(other): True if no elements in common\nissubset(other): True if subset of other\n\n\n\n\n\n\n\n\n\nTip\n\n\nThere are more methods for sets! If you are working intensively with sets, keep that in mind."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#sets-in-action",
    "href": "part-04/lecture-dimensions-presentation.html#sets-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Sets in Action",
    "text": "Sets in Action\n&gt;Task: Solve the following problem using sets:\n\n# You have a list of friends from two different groups\nfriends_group_1 = [\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\"]\nfriends_group_2 = [ \"Smith\", \"Apoc\", \"Cypher\", \"Morpheus\"]\n\n\n\nFirst, find the mutual friends in both groups\nThen create a new set of all friends from both groups\nCount the number of friends in total\nPrint each item of the set on a new line\n\n\n\n\n\n\n\n\n\nTip\n\n\nNotice that we can partly use the same procedure as we used for lists."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#what-are-dictionaries",
    "href": "part-04/lecture-dimensions-presentation.html#what-are-dictionaries",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Dictionaries?",
    "text": "What are Dictionaries?\n\nDictionaries are unordered collections of key-value pairs\nThey are mutable (can be changed after creation)\nKeys must be unique and immutable\nValues can be of any type\nCreated using the dict() function or the {} syntax\nAs sets we cannot access them by index\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i)\n\n\n\n{'name': 'Tobias', 'age': 30, 'city': 'Hamburg'}"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#key-value-pairs",
    "href": "part-04/lecture-dimensions-presentation.html#key-value-pairs",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Key-Value Pairs",
    "text": "Key-Value Pairs\n\nWe can access them by their keys, though!\nYou can think of them as a set of key-value pairs\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i[\"name\"])\n\n\n\nTobias\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how we can use the [] operator to access the value of a key?"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#dictionary-operations",
    "href": "part-04/lecture-dimensions-presentation.html#dictionary-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionary Operations",
    "text": "Dictionary Operations\n\nCommon operations and methods:\nin operation to check if a key is in the dictionary\nfor loop to iterate over the dictionary\nkeys() method to return a view of the dictionary’s keys\nvalues() method to return a view of the dictionary’s values\npop(key[, default]) to remove a key and return its value"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#dictionaries-in-action",
    "href": "part-04/lecture-dimensions-presentation.html#dictionaries-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionaries in Action",
    "text": "Dictionaries in Action\n&gt;Task: Solve the following problem using dictionaries:\n\n# Create a dictionary with the following information about yourself: name, age, city\ni_am = {}\n\n\n\nAdd your favorite color and food to the dictionary\nRemove the city from the dictionary\nPrint your name and age in a formatted sentence"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#comparison-between-data-types",
    "href": "part-04/lecture-dimensions-presentation.html#comparison-between-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comparison between Data Types",
    "text": "Comparison between Data Types\n\nTuple: Immutable, ordered, duplicates allowed\nList: Mutable, ordered, duplicates allowed\nSet: Mutable, unordered, no duplicates\nDictionary: Mutable, unordered, no duplicates, key-value pairs\n\n\n\n\n\n\n\n\nTip\n\n\nThis impacts your code, the operations you can perform and the speed of your program. Thus, it makes sense to understand the differences and choose the right data type for the task."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#when-to-use-which",
    "href": "part-04/lecture-dimensions-presentation.html#when-to-use-which",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "When to use which?",
    "text": "When to use which?\n\nTuples: store a collection of items that should not be changed\nLists: store a collection of items that should be changed\nSets: store a collection of items that should not be changed and duplicates are not allowed\nDictionaries: store a collection of items that should be changed, duplicates are not allowed and require key-value pairs\n\n\n\n\n\n\n\n\nTip\n\n\nYou can convert between the data types using tuple(), list(), set() and dict(). Note, that this is not always possible, e.g. you cannot convert a list to a dictionary without specifying a key."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#speed-differences",
    "href": "part-04/lecture-dimensions-presentation.html#speed-differences",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Speed Differences",
    "text": "Speed Differences\n\nLists are the most versatile, but slowest\nTuples are generally faster than lists\nSets are generally faster than lists and tuples\nDictionaries depend, but are generally faster than lists and tuples\n\n\n\nCode\nimport timeit\n\n# Number of elements in each data structure\nn = 10000000\n\n# Setup for each data structure, including the test function\nsetup_template = \"\"\"\ndef test_membership(data_structure, element):\n    return element in data_structure\ndata = {data_structure}\n\"\"\"\n\nsetups = {\n    'Tuple': setup_template.format(data_structure=f\"tuple(range({n}))\"),\n    'List': setup_template.format(data_structure=f\"list(range({n}))\"),\n    'Set': setup_template.format(data_structure=f\"set(range({n}))\"),\n    'Dictionary': setup_template.format(data_structure=f\"{{i: i for i in range({n})}}\")\n}\n\n# Measure time for each data structure\nprint(f\"Time taken for a single membership test in {n} elements (in seconds):\")\nprint(\"-\" * 75)\nfor name, setup in setups.items():\n    stmt = f\"test_membership(data, {n-1})\"  # Test membership of the last element\n    time_taken = timeit.timeit(stmt, setup=setup, number=1)\n    print(f\"{name:&lt;10}: {time_taken:.8f}\")\nprint(\"-\" * 75)\nprint(\"Note, that theses values are machine dependent and just for illustration!\")\n\n\n\n\nTime taken for a single membership test in 10000000 elements (in seconds):\n---------------------------------------------------------------------------\nTuple     : 0.05190188\nList      : 0.06016921\nSet       : 0.00000158\nDictionary: 0.00000337\n---------------------------------------------------------------------------\nNote, that theses values are machine dependent and just for illustration!"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#comprehensions",
    "href": "part-04/lecture-dimensions-presentation.html#comprehensions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nComprehensions provide a concise way to create data structures\n\nTuple comprehensions: (x for x in iterable)\nList comprehensions: [x for x in iterable]\nSet comprehensions: {x for x in iterable}\nDictionary comprehensions: {x: y for x, y in iterable}\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe iterable can be any object that can be iterated over, e.g. a list, tuple, set, dictionary, etc."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#iterables",
    "href": "part-04/lecture-dimensions-presentation.html#iterables",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Iterables",
    "text": "Iterables\n\nWe have already introduced those!\nWe can use the for loop to iterate over an iterable\n\n\n\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\nfor item in shopping_list:\n    print(item)\n\n\n\ncider\nbeer\nbread\nfrozen_pizza\n\n\n\n\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nfor key, value in who_am_i.items():\n    print(f\"{key}: {value}\")\n\n\n\nname: Tobias\nage: 30\ncity: Hamburg"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#nesting",
    "href": "part-04/lecture-dimensions-presentation.html#nesting",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Nesting",
    "text": "Nesting\n\nWe can nest data structures within each other\nThis is useful if we want to store more complex data\n\n\n\nnormal_list = [1, 2, 3, 4, 5]\nnested_list = [\"Hello, World!\", normal_list, (1,2)]\n\nprint(nested_list)\nprint(nested_list[2])\n\n\n\n['Hello, World!', [1, 2, 3, 4, 5], (1, 2)]\n(1, 2)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also nest lists within lists within lists, etc."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#inputoutput",
    "href": "part-04/lecture-dimensions-presentation.html#inputoutput",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Input/Output",
    "text": "Input/Output\n\nA common task in programming is to interact with users\nRemember the input() function from the first lecture?\nIt is a classical example of user input\nAn example of output is the print() function\n\n\n\nname = input(\"Please enter your name: \")    \nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nNote\n\n\nThus, we have already worked with I/O in Python!"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#reading-and-writing-files",
    "href": "part-04/lecture-dimensions-presentation.html#reading-and-writing-files",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Reading and Writing Files",
    "text": "Reading and Writing Files\n\nWe also need to interact with data\nFile handling in Python is quite simple:\n\nUse open(file_name, mode) to open a file\nModes: \"r\" (read), \"w\" (write), \"a\" (append)\n\nBasic operations:\n\nRead: file.read()\nWrite: file.write(content)\nClose: file.close()"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#file-handling-in-action",
    "href": "part-04/lecture-dimensions-presentation.html#file-handling-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "File Handling in Action",
    "text": "File Handling in Action\n\nfile = open(\"hi.txt\", \"w\") # This creates a file called \"hi.txt\"\nfile.write(\"Hello, World!\") # This writes \"Hello, World!\" to the file\nfile.close() # This closes the file\nprint(\"File successfully written\")\n\n\n\nFile successfully written\n\n\n\n&gt;Question: Any ideas how to read the file?\n\n\n\nfile = open(\"hi.txt\", \"r\") # This opens the file \"hi.txt\"\ncontent = file.read() # This reads the content of the file\nfile.close() # This closes the file\nprint(content) # This prints the content of the file\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nClose files with file.close() to free up system resources and ensure data is properly saved."
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#easier-file-handling-with-with",
    "href": "part-04/lecture-dimensions-presentation.html#easier-file-handling-with-with",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Easier File Handling with with",
    "text": "Easier File Handling with with\n\nWe can also use the with statement to open a file\nThis ensures the file is properly closed after its handling finishes\nIt’s a good practice to use it when working with files\n\n\nwith open(\"hi_again.txt\", \"w\") as file:\n    file.write(\"Hello again, World!\")\n\nprint(\"File successfully written\")\n\n\n\nFile successfully written\n\n\n\n&gt;Task: Open the file hi_again.txt and print its content using with"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#working-with-other-file-types",
    "href": "part-04/lecture-dimensions-presentation.html#working-with-other-file-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Working with other file types",
    "text": "Working with other file types\n\nNaturally, we also want to work with other file types!\nReading and writing CSV files is a common tasks in data analysis\nExcel files are used in many applications and companies\nWe will see how to do this later in the course\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of tuples, sets, lists and dictionaries as well as some basic file handling. For now, just remember that advanced reading and writing is possible and that there are libraries that help with this.\n\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-04/lecture-dimensions-presentation.html#interesting-books",
    "href": "part-04/lecture-dimensions-presentation.html#interesting-books",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nTip\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture IV - Handling Data in more than one Dimension | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-04/lecture-dimensions.html",
    "href": "part-04/lecture-dimensions.html",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Functions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n. . .\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\nWelcome to this lecture, Students!\n\n\n\n\n\n\nScope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n. . .\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?\n\n\n\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n. . .\n\nclass Lectures:  \n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\nLecture '4. Data in more than one dimension' is 90 minutes long!"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#functions",
    "href": "part-04/lecture-dimensions.html#functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Functions are reusable blocks of code that perform specific tasks\nThey can accept inputs (parameters) and return outputs\ndef followed by the function name, parameters and a colon\nHelp in organizing code and reducing repetition\n\n. . .\n\ndef greet(name):\n    return f\"Welcome to this lecture, {name}!\"\n\nprint(greet(\"Students\"))\n\nWelcome to this lecture, Students!"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#scope",
    "href": "part-04/lecture-dimensions.html#scope",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Scope determines the visibility and lifetime of variables\nVariables defined inside a function are local to that function\nVariables defined outside of all functions are global\nThey can be accessed from anywhere in the program\n\n. . .\n\ndef greet(name):\n    greeting = f\"Welcome to this lecture, {name}!\"\n    return greeting\n\nprint(greeting) # This will cause an error\n\n&gt;Question: Why does this cause an error?"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#classes",
    "href": "part-04/lecture-dimensions.html#classes",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "",
    "text": "Classes are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nHelp in organizing code and creating objects with similar structures\n\n. . .\n\nclass Lectures:  \n    def __init__(self, name, length_minutes):\n        self.name = name\n        self.length = length_minutes\n\n    def duration(self):\n        return f\"Lecture '{self.name}' is {self.length} minutes long!\"\n\nlecture_4 = Lectures(\"4. Data in more than one dimension\", 90)\nprint(lecture_4.duration())\n\nLecture '4. Data in more than one dimension' is 90 minutes long!"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#what-are-tuples",
    "href": "part-04/lecture-dimensions.html#what-are-tuples",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Tuples?",
    "text": "What are Tuples?\n\nTuples are ordered collections of items\nThey are immutable (cannot be changed after creation)\nHelp in storing multiple items in a single variable\nCreated using the tuple() function or the () syntax\n\n. . .\n\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#tuple-operations",
    "href": "part-04/lecture-dimensions.html#tuple-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Operations",
    "text": "Tuple Operations\n\nTuples support the same operations as strings\nWe can use indexing and slicing to access elements\nWe can use the + operator to concatenate tuples\nWe can use the * operator to repeat a tuple\n\n. . .\n&gt;Question: What will the following code print?\n\nmy_tuple = (1, 2, 3)    \nprint(my_tuple[1:3])\nprint(my_tuple + (4, 5, 6))\nprint(my_tuple * 2)\n\n(2, 3)\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3)"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#tuple-methods",
    "href": "part-04/lecture-dimensions.html#tuple-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Methods",
    "text": "Tuple Methods\n\nTuples support the following methods:\n\ncount(x): Returns the number of times x appears in the tuple\nindex(x): Returns the index of the first occurrence of x\n\n\n. . .\n&gt;Question: What will this code print?\n\nmy_tuple = (1, 2, 3, 2, 4, 2)\nprint(my_tuple.count(2))\nprint(my_tuple.index(3))\n\n3\n2"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#tuple-data-types",
    "href": "part-04/lecture-dimensions.html#tuple-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Data Types",
    "text": "Tuple Data Types\n\nTuples can contain elements of different data types\n\n\nmy_tuple = (\"Peter\", 25, \"Hamburg\")\nprint(my_tuple)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n\n# This works as well\nmy_tuple = \"Peter\", 25, \"Hamburg\"\nprint(my_tuple)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe can also create tuples by listing the elements separated by commas."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#tuples-from-functions",
    "href": "part-04/lecture-dimensions.html#tuples-from-functions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuples from Functions",
    "text": "Tuples from Functions\n\nFunctions can return tuples\nThis is useful if we want to return multiple values from a function\n\n. . .\n\ndef get_student_info(name, age, city):\n    return name, age, city\n\nstudent_info = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(student_info)\n\n('Peter', 25, 'Hamburg')\n\n\n. . .\n&gt;Question: How would you access the age from the tuple?"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#tuple-unpacking",
    "href": "part-04/lecture-dimensions.html#tuple-unpacking",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Tuple Unpacking",
    "text": "Tuple Unpacking\n\nAllows us to assign the elements of a tuple to variables\nThe number of variables must match the number of elements\nUse the * operator to assign the remaining elements to a variable\n\n. . .\n\ndef get_student_info(name, age, city):\n    return name, age, city\nname, *rest = get_student_info(\"Peter\", 25, \"Hamburg\")\nprint(f\"Name: {name}\")\nprint(f\"Other info: {rest}\")\n\nName: Peter\nOther info: [25, 'Hamburg']\n\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nThe output is positional, so we have to be careful with the order of the variables."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#what-are-lists",
    "href": "part-04/lecture-dimensions.html#what-are-lists",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are ordered collections of items\nThey are mutable (can be changed after creation)\nCreated using the list() function or the [] syntax\nThey support the same operations as strings and tuples\nHave much more methods and are more versatile than tuples\n\n. . .\n\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\n\n[1, 2, 3, 4, 5]\n\n\n. . .\n&gt;Question: Any idea why lists support more methods?"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#list-methods",
    "href": "part-04/lecture-dimensions.html#list-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "List Methods",
    "text": "List Methods\n\nCommon methods for lists:\n\ncount(x): Returns the number of times x appears in the list\nappend(x): Adds an element x to the end of the list\ninsert(i, x): Inserts an element x at index i\nremove(x): Removes the first occurrence of element x\nindex(x): Returns the index of the first occurrence of x\n\npop([i]): Removes the element at index i and returns it\nsort(): Sorts the list in ascending order\nreverse(): Reverses the list"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#lists-in-action",
    "href": "part-04/lecture-dimensions.html#lists-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Lists in Action",
    "text": "Lists in Action\n&gt;Task: Solve the following problem using lists:\n\n# Imagine the following shoppping list for this weekend\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\n\n. . .\n\nFirst, add some apples to the list for a healthy option\nNext, remove the cider as you already have some at home\nSort all items in the list alphabetically\nPrint each item of the list on a new line\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the methods and loops we learned so far to solve the problem."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#what-are-sets",
    "href": "part-04/lecture-dimensions.html#what-are-sets",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Sets?",
    "text": "What are Sets?\n\nSets are unordered collections of unique elements\nThey are mutable (can be changed after creation)\nCreated using the set() function or the {} syntax\nSupports + and * operations like lists and tuples\nUnlike lists and tuples, sets do not support indexing\n\n. . .\n\nmy_set = {1, 2, 2, 5, 5}\nprint(my_set)\n\n{1, 2, 5}"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#set-methods",
    "href": "part-04/lecture-dimensions.html#set-methods",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Methods",
    "text": "Set Methods\n\nCommon methods for sets:\n\nadd(x): Adds an element x to the set\nremove(x): Removes an element x from the set\ndiscard(x): Removes an element x from the set if it is present\npop(): Removes and returns an arbitrary element from the set\nupdate(other): Adds all elements from other to the set"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#set-theory",
    "href": "part-04/lecture-dimensions.html#set-theory",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Set Theory",
    "text": "Set Theory\n\nAdditional methods are derived from set theory\n\nunion(other): New set with elements from both sets\nintersection(other): New set with common elements\nisdisjoint(other): True if no elements in common\nissubset(other): True if subset of other\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThere are more methods for sets! If you are working intensively with sets, keep that in mind."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#sets-in-action",
    "href": "part-04/lecture-dimensions.html#sets-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Sets in Action",
    "text": "Sets in Action\n&gt;Task: Solve the following problem using sets:\n\n# You have a list of friends from two different groups\nfriends_group_1 = [\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\"]\nfriends_group_2 = [ \"Smith\", \"Apoc\", \"Cypher\", \"Morpheus\"]\n\n. . .\n\nFirst, find the mutual friends in both groups\nThen create a new set of all friends from both groups\nCount the number of friends in total\nPrint each item of the set on a new line\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNotice that we can partly use the same procedure as we used for lists."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#what-are-dictionaries",
    "href": "part-04/lecture-dimensions.html#what-are-dictionaries",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "What are Dictionaries?",
    "text": "What are Dictionaries?\n\nDictionaries are unordered collections of key-value pairs\nThey are mutable (can be changed after creation)\nKeys must be unique and immutable\nValues can be of any type\nCreated using the dict() function or the {} syntax\nAs sets we cannot access them by index\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i)\n\n{'name': 'Tobias', 'age': 30, 'city': 'Hamburg'}"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#key-value-pairs",
    "href": "part-04/lecture-dimensions.html#key-value-pairs",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Key-Value Pairs",
    "text": "Key-Value Pairs\n\nWe can access them by their keys, though!\nYou can think of them as a set of key-value pairs\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nprint(who_am_i[\"name\"])\n\nTobias\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how we can use the [] operator to access the value of a key?"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#dictionary-operations",
    "href": "part-04/lecture-dimensions.html#dictionary-operations",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionary Operations",
    "text": "Dictionary Operations\n\nCommon operations and methods:\nin operation to check if a key is in the dictionary\nfor loop to iterate over the dictionary\nkeys() method to return a view of the dictionary’s keys\nvalues() method to return a view of the dictionary’s values\npop(key[, default]) to remove a key and return its value"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#dictionaries-in-action",
    "href": "part-04/lecture-dimensions.html#dictionaries-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Dictionaries in Action",
    "text": "Dictionaries in Action\n&gt;Task: Solve the following problem using dictionaries:\n\n# Create a dictionary with the following information about yourself: name, age, city\ni_am = {}\n\n. . .\n\nAdd your favorite color and food to the dictionary\nRemove the city from the dictionary\nPrint your name and age in a formatted sentence"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#comparison-between-data-types",
    "href": "part-04/lecture-dimensions.html#comparison-between-data-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comparison between Data Types",
    "text": "Comparison between Data Types\n\nTuple: Immutable, ordered, duplicates allowed\nList: Mutable, ordered, duplicates allowed\nSet: Mutable, unordered, no duplicates\nDictionary: Mutable, unordered, no duplicates, key-value pairs\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis impacts your code, the operations you can perform and the speed of your program. Thus, it makes sense to understand the differences and choose the right data type for the task."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#when-to-use-which",
    "href": "part-04/lecture-dimensions.html#when-to-use-which",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "When to use which?",
    "text": "When to use which?\n\nTuples: store a collection of items that should not be changed\nLists: store a collection of items that should be changed\nSets: store a collection of items that should not be changed and duplicates are not allowed\nDictionaries: store a collection of items that should be changed, duplicates are not allowed and require key-value pairs\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can convert between the data types using tuple(), list(), set() and dict(). Note, that this is not always possible, e.g. you cannot convert a list to a dictionary without specifying a key."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#speed-differences",
    "href": "part-04/lecture-dimensions.html#speed-differences",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Speed Differences",
    "text": "Speed Differences\n\nLists are the most versatile, but slowest\nTuples are generally faster than lists\nSets are generally faster than lists and tuples\nDictionaries depend, but are generally faster than lists and tuples\n\n\n\nCode\nimport timeit\n\n# Number of elements in each data structure\nn = 10000000\n\n# Setup for each data structure, including the test function\nsetup_template = \"\"\"\ndef test_membership(data_structure, element):\n    return element in data_structure\ndata = {data_structure}\n\"\"\"\n\nsetups = {\n    'Tuple': setup_template.format(data_structure=f\"tuple(range({n}))\"),\n    'List': setup_template.format(data_structure=f\"list(range({n}))\"),\n    'Set': setup_template.format(data_structure=f\"set(range({n}))\"),\n    'Dictionary': setup_template.format(data_structure=f\"{{i: i for i in range({n})}}\")\n}\n\n# Measure time for each data structure\nprint(f\"Time taken for a single membership test in {n} elements (in seconds):\")\nprint(\"-\" * 75)\nfor name, setup in setups.items():\n    stmt = f\"test_membership(data, {n-1})\"  # Test membership of the last element\n    time_taken = timeit.timeit(stmt, setup=setup, number=1)\n    print(f\"{name:&lt;10}: {time_taken:.8f}\")\nprint(\"-\" * 75)\nprint(\"Note, that theses values are machine dependent and just for illustration!\")\n\n\nTime taken for a single membership test in 10000000 elements (in seconds):\n---------------------------------------------------------------------------\nTuple     : 0.05227354\nList      : 0.05944867\nSet       : 0.00000250\nDictionary: 0.00000575\n---------------------------------------------------------------------------\nNote, that theses values are machine dependent and just for illustration!"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#comprehensions",
    "href": "part-04/lecture-dimensions.html#comprehensions",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nComprehensions provide a concise way to create data structures\n\nTuple comprehensions: (x for x in iterable)\nList comprehensions: [x for x in iterable]\nSet comprehensions: {x for x in iterable}\nDictionary comprehensions: {x: y for x, y in iterable}\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThe iterable can be any object that can be iterated over, e.g. a list, tuple, set, dictionary, etc."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#iterables",
    "href": "part-04/lecture-dimensions.html#iterables",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Iterables",
    "text": "Iterables\n\nWe have already introduced those!\nWe can use the for loop to iterate over an iterable\n\n. . .\n\nshopping_list = [\"cider\", \"beer\", \"bread\", \"frozen_pizza\"]\nfor item in shopping_list:\n    print(item)\n\ncider\nbeer\nbread\nfrozen_pizza\n\n\n. . .\n\nwho_am_i = {\"name\": \"Tobias\", \"age\": 30, \"city\": \"Hamburg\"}\nfor key, value in who_am_i.items():\n    print(f\"{key}: {value}\")\n\nname: Tobias\nage: 30\ncity: Hamburg"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#nesting",
    "href": "part-04/lecture-dimensions.html#nesting",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Nesting",
    "text": "Nesting\n\nWe can nest data structures within each other\nThis is useful if we want to store more complex data\n\n. . .\n\nnormal_list = [1, 2, 3, 4, 5]\nnested_list = [\"Hello, World!\", normal_list, (1,2)]\n\nprint(nested_list)\nprint(nested_list[2])\n\n['Hello, World!', [1, 2, 3, 4, 5], (1, 2)]\n(1, 2)\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also nest lists within lists within lists, etc."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#inputoutput",
    "href": "part-04/lecture-dimensions.html#inputoutput",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Input/Output",
    "text": "Input/Output\n\nA common task in programming is to interact with users\nRemember the input() function from the first lecture?\nIt is a classical example of user input\nAn example of output is the print() function\n\n. . .\n\nname = input(\"Please enter your name: \")    \nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThus, we have already worked with I/O in Python!"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#reading-and-writing-files",
    "href": "part-04/lecture-dimensions.html#reading-and-writing-files",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Reading and Writing Files",
    "text": "Reading and Writing Files\n\nWe also need to interact with data\nFile handling in Python is quite simple:\n\nUse open(file_name, mode) to open a file\nModes: \"r\" (read), \"w\" (write), \"a\" (append)\n\nBasic operations:\n\nRead: file.read()\nWrite: file.write(content)\nClose: file.close()"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#file-handling-in-action",
    "href": "part-04/lecture-dimensions.html#file-handling-in-action",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "File Handling in Action",
    "text": "File Handling in Action\n\nfile = open(\"hi.txt\", \"w\") # This creates a file called \"hi.txt\"\nfile.write(\"Hello, World!\") # This writes \"Hello, World!\" to the file\nfile.close() # This closes the file\nprint(\"File successfully written\")\n\nFile successfully written\n\n\n. . .\n&gt;Question: Any ideas how to read the file?\n. . .\n\nfile = open(\"hi.txt\", \"r\") # This opens the file \"hi.txt\"\ncontent = file.read() # This reads the content of the file\nfile.close() # This closes the file\nprint(content) # This prints the content of the file\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nClose files with file.close() to free up system resources and ensure data is properly saved."
  },
  {
    "objectID": "part-04/lecture-dimensions.html#easier-file-handling-with-with",
    "href": "part-04/lecture-dimensions.html#easier-file-handling-with-with",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Easier File Handling with with",
    "text": "Easier File Handling with with\n\nWe can also use the with statement to open a file\nThis ensures the file is properly closed after its handling finishes\nIt’s a good practice to use it when working with files\n\n\nwith open(\"hi_again.txt\", \"w\") as file:\n    file.write(\"Hello again, World!\")\n\nprint(\"File successfully written\")\n\nFile successfully written\n\n\n. . .\n&gt;Task: Open the file hi_again.txt and print its content using with"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#working-with-other-file-types",
    "href": "part-04/lecture-dimensions.html#working-with-other-file-types",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Working with other file types",
    "text": "Working with other file types\n\nNaturally, we also want to work with other file types!\nReading and writing CSV files is a common tasks in data analysis\nExcel files are used in many applications and companies\nWe will see how to do this later in the course\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of tuples, sets, lists and dictionaries as well as some basic file handling. For now, just remember that advanced reading and writing is possible and that there are libraries that help with this.\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-04/lecture-dimensions.html#interesting-books",
    "href": "part-04/lecture-dimensions.html#interesting-books",
    "title": "Lecture IV - Handling Data in more than one Dimension",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNothing new here, but these are still great books!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#slicing",
    "href": "part-03/lecture-functions-presentation.html#slicing",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Slicing",
    "text": "Slicing\n\nWith slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n\n\n\n\n\n\n\nTip\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#comparison-operators",
    "href": "part-03/lecture-functions-presentation.html#comparison-operators",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\n\n\nTrue"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#control-structures",
    "href": "part-03/lecture-functions-presentation.html#control-structures",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Control Structures",
    "text": "Control Structures\n\nControl structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n\n\n\n\n\n\n\nNote\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#what-is-a-function",
    "href": "part-03/lecture-functions-presentation.html#what-is-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "What is a Function?",
    "text": "What is a Function?\n\nFunctions can accept inputs (parameters) and return outputs\nEncapsulate logic, making code easier to maintain\nFunctions can be called multiple times from different part\nThey help reduce code duplication and improve readability\n\n\n# I'm a function.\ntype(print)\n\n\n\nbuiltin_function_or_method\n\n\n\n\n\n\n\n\n\nImportant\n\n\nRemember, methods are functions that are called on an object."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#some-built-in-functions-already-used",
    "href": "part-03/lecture-functions-presentation.html#some-built-in-functions-already-used",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Some Built-in Functions already used",
    "text": "Some Built-in Functions already used\n\nprint(): Print text to console\ninput(): Read text from console\nlen(): Get the length of a sequence\nrange(): Generate a sequence of numbers\nround(): Round a number to a specified number of decimal places\ntype(): Get the type of an object\nint(): Convert a string to an integer\nfloat(): Convert a string to a floating-point number\nstr(): Convert an object to a string"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#defining-a-function",
    "href": "part-03/lecture-functions-presentation.html#defining-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Defining a Function",
    "text": "Defining a Function\n\nUse the def keyword followed by the function name\nInside parentheses we list the inputs (parameters)\nThe code block within every function starts with a colon (:)\nIt is indented, just as the loops from the last lecture\n\n\n\ndef greet(a_parameter):\n    print(f\"Hello, {a_parameter}!\")\ngreet(\"Students\")\n\n\n\nHello, Students!\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nIt is common practice to leave out one line after the definition of a function, although we will not always do that in the lecture to save space on the slides."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#comment-functions",
    "href": "part-03/lecture-functions-presentation.html#comment-functions",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comment Functions",
    "text": "Comment Functions\n\nIt is good practice to include a comment at the top of your functions\nIf you do it with three \"\"\", it will appear in the help menu\n\n\n\ndef greet():\n    \"\"\"\n    This function will be used later and has currently\n    absolutely no use for anything.\n    \"\"\"\n    pass # Necessary placeholder to avoid error\n\nhelp(greet)\n\n\n\nHelp on function greet in module __main__:\n\ngreet()\n    This function will be used later and has currently\n    absolutely no use for anything."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#naming-functions-and-methods",
    "href": "part-03/lecture-functions-presentation.html#naming-functions-and-methods",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Functions (and Methods)",
    "text": "Naming Functions (and Methods)\n\nFunction names should be short, but descriptive\nUse underscores (_) instead of spaces in the names\nAvoid using Python keywords as function names (e.g., print)\nTry to avoid using built-in functions and methods that have a similar name (e.g., sum and len)\n\n&gt; Question: Which of the following is a good name for a function?\n\n\nmyfunctionthatmultipliesvalues \nmultiply_two_values\n\nmultiplyTwoValues"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#function-parameters",
    "href": "part-03/lecture-functions-presentation.html#function-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Parameters",
    "text": "Function Parameters\n\nParameters are variables that the function accepts\nThey allow you to pass data to the function\nTry to name them as variables: short and meaningful\nWe can also leave them out or define several inputs!\n\n\ndef greet():\n    print(\"Hello, stranger!\")\ngreet()\n\n\n\nHello, stranger!"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#function-arguments",
    "href": "part-03/lecture-functions-presentation.html#function-arguments",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Arguments",
    "text": "Function Arguments\n\nArguments are the actual values passed to the function\nThey replace the parameters in the function definition\n\n\n&gt; Question: What could be the correct arguments here?\n\ndef greet(university_name, lecture):\n    print(f\"Hello, students at the {university_name}!\")\n    print(f\"You are in lecture {lecture}!\")\n\n# Your code here"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#initializing-parameters",
    "href": "part-03/lecture-functions-presentation.html#initializing-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Initializing Parameters",
    "text": "Initializing Parameters\n\nWe can also initialize parameters to a default value!\nTo do this we use the = sign and provide it with a value\nThis is called a keyword argument\n\n\ndef greet(lecture=\"Programming with Python\"):\n    print(f\"You are in lecture '{lecture}'!\")\n\ngreet()\ngreet(\"Super Advanced Programming with Python\")\n\n\n\nYou are in lecture 'Programming with Python'!\nYou are in lecture 'Super Advanced Programming with Python'!\n\n\n\n\n\n\n\n\n\nTip\n\n\nThis is especially useful when we want to avoid errors due to missing arguments!"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#multiple-parameters",
    "href": "part-03/lecture-functions-presentation.html#multiple-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nWe can also have multiple parameters in a function definition\nThey are called positional arguments and are separated by commas\nWhen we call them, they must be provided in the same order\nAlternatively, we could call them by name, as for example in this function call print(\"h\",\"i\",sep='')\n\n\n&gt; Question: What will be printed here?\n\ndef call_parameters(parameter_a, parameter_b):\n    print(parameter_a, parameter_b)\n\ncall_parameters(parameter_b=\"Hello\", parameter_a=\"World\")\n\n\n\nWorld Hello"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#function-return-values",
    "href": "part-03/lecture-functions-presentation.html#function-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Return Values",
    "text": "Function Return Values\n\nFunctions can return values using the return statement\nThe return statement ends the function\nIt then returns the specified value\n\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n    return result\nprint(simple_multiplication(2,21))\n\n\n\n42\n\n\n\n\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\nprint(simple_multiplication(2,21))\n\n\n\n42"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#access-return-values",
    "href": "part-03/lecture-functions-presentation.html#access-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Access return values",
    "text": "Access return values\n\nWe can also save the return value from a function in a variable\nThat way we can use it later on in the program\n\n\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\n\nresult = simple_multiplication(2,21)\nprint(result)\n\n\n\n42"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#returning-none",
    "href": "part-03/lecture-functions-presentation.html#returning-none",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Returning None",
    "text": "Returning None\n\nIf we don’t specify return, functions will return None\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n\nprint(simple_multiplication(2,21))\n\n\n\nNone\n\n\n\n&gt; Grouptask: Come up with a function that checks whether a number is positive or negative. It returns \"positive\" for positive numbers and \"negative\" for negative numbers.\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also use multiple return statements in a function."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#recursion",
    "href": "part-03/lecture-functions-presentation.html#recursion",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Recursion",
    "text": "Recursion\n\nRecursion is a technique where a function calls itself\nHelps to break down problems into smaller problems\n\n\n\ndef fibonacci(n): # Classical example to introduce recursion\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nRecursion can be a powerful tool, but it can also be quite tricky to get right."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#function-scope",
    "href": "part-03/lecture-functions-presentation.html#function-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Scope",
    "text": "Function Scope\n\nVariables defined inside a function are local to that function\nThey cannot be accessed outside the function\n\n\ndef greet(name):\n    greeting = f\"Hello, {name}!\"\n    \nprint(greeting)  # This will cause an error\n\n\n&gt; Question: Any idea how to access greeting?"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#global-scope",
    "href": "part-03/lecture-functions-presentation.html#global-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Scope",
    "text": "Global Scope\n\nVariables defined outside all functions are in the global scope\nThey can be accessed from anywhere in the program\n\n\n\ngreeting = \"Hello, Stranger!\"\ndef greet(name):\n   greeting = f\"Hello, {name}!\"\n   return greeting\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet ????\n\n\n\nHello, Students!\nHello, Stranger!\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nWe don’t change global variables inside a function! The original value can still be accessed from outside the function."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#global-keyword",
    "href": "part-03/lecture-functions-presentation.html#global-keyword",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Keyword",
    "text": "Global Keyword\n\nStill, we can change the value of greeting from inside a function!\nBy using the global keyword to modify a global variable\n\n\n\ngreeting = \"Hello, Stranger!\"\n\ndef greet(name):\n   global greeting\n   greeting = f\"Hello, {name}!\"\n   return greeting\n\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet students again\n\n\n\nHello, Students!\nHello, Students!\n\n\n\n\n&gt;Question: This can be confusing. Do you think you got the idea?"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#classes-1",
    "href": "part-03/lecture-functions-presentation.html#classes-1",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nObjects are instances of classes\nMethods are functions that are defined within a class\n\n\n\nclass Students: # Class definition\n    def know_answer(self): # Method definition\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students() # Object instantiation\nstudent.know_answer()\n\n\n\nThey know the answer to all questions."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#self",
    "href": "part-03/lecture-functions-presentation.html#self",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Self",
    "text": "Self\n\nClasses can be quite tricky at first, especially the self keyword\nWhen we call self in a method, it refers to the object itself\nIt is used to access the attributes and methods of the class\nself always needs to be included in method definitions\n\n\n\n# This won't work as self is missing\nclass Students: # Class definition\n    def know_answer(): # Method definition without self\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students()\nstudent.know_answer()\n\n\n\n&gt;Task: Try it yourself, what is the error?"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#naming-classes",
    "href": "part-03/lecture-functions-presentation.html#naming-classes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Classes",
    "text": "Naming Classes\n\nClasses can be named anything, but it is common to use the plural form of their name (e.g., People)\nCamelCase is used for class names, and snake_case is used for method and attribute names (e.g., TallPeople)\nClasses are usually defined in a file with the same name as their class, but with a .py extension\n\n\nQuestion: Which of the following is a good class name? smart_student, SmartStudent, or SmartStudents"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#class-attributes",
    "href": "part-03/lecture-functions-presentation.html#class-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Class Attributes",
    "text": "Class Attributes\n\nClass attributes are attributes that are shared by all class instances\nThey are defined within the class but outside any methods\n\n\n&gt;Question: What do you think will happen here?\n\nclass Students: # Class definition\n    smart = True # Class attribute\n\nstudent_A = Students() # Object instantiation student_A\nstudent_B = Students() # Object instantiation student_B\n\nprint(student_A.smart)\nprint(student_B.smart)\n\n\n\nTrue\nTrue"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#instance-attributes",
    "href": "part-03/lecture-functions-presentation.html#instance-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Instance Attributes",
    "text": "Instance Attributes\n\nInstance attributes are attributes unique to each class instance\nThey are defined within the __init__ method\n\n\nclass Student: # Class definition\n    def __init__(self, name, is_smart): # Method for initalization\n        self.name = name\n        self.smart = is_smart\n    def knows_answer(self): # Method to be called\n        if self.smart:\n            print(f\"{self.name} knows the answer to the question.\")\n        else:\n            print(f\"{self.name} does not know the answer to the question.\")\n\nstudent = Student(\"Buddy\",False) # Note, we don't need to call self here!\nstudent.knows_answer()\n\n\n\nBuddy does not know the answer to the question."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#inheritance",
    "href": "part-03/lecture-functions-presentation.html#inheritance",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance",
    "text": "Inheritance\n\nInheritance allows a class to inherit attributes and methods\nThe class that inherits is called the subclass\nThe class that is being inherited from is called the superclass\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry!  It can be quite much right now. Hang in there and soon it will get easier again!"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#inheritance-in-action",
    "href": "part-03/lecture-functions-presentation.html#inheritance-in-action",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance in Action",
    "text": "Inheritance in Action\n\nclass Student: # Superclass\n    def __init__(self, name):\n        self.name = name\n    def when_asked(self):\n        pass\n\nclass SmartStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} knows the answer!\"\n        \nclass LazyStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} has to ask ChatGPT!\"\n\n&gt;Grouptask: Create two students. One is smart and the other one is lazy. Make sure that both students reaction to a question is printed."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#encapsulation",
    "href": "part-03/lecture-functions-presentation.html#encapsulation",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nEncapsulation is the concept of bundling data (attributes) and methods (behavior) that operate on the data into a single unit (class)\nIt is a key aspect of object oriented programming (OOP)\nIt helps in organizing code and controlling access\n\n\n\n\n\n\n\n\nNote\n\n\nFortunately, this is an introduction to Python, so we won’t go into details of encapsulation."
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#the-end",
    "href": "part-03/lecture-functions-presentation.html#the-end",
    "title": "Lecture III - Building Reusable Functions",
    "section": "The End",
    "text": "The End\n\nInterested in more detail about classes and OOP?\nCheck out access modifiers, getters and setters\nThey are definitely a bit more complicated for beginners…\nThough they are worth learning if you build complex programs\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of funtions and classes. We will continue with some slightly easier topics in the next lectures.\n\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-03/lecture-functions-presentation.html#interesting-book-to-dive-deeper",
    "href": "part-03/lecture-functions-presentation.html#interesting-book-to-dive-deeper",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Interesting Book to dive deeper",
    "text": "Interesting Book to dive deeper\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\n\n\n\n\n\n\n\nTip\n\n\nA fantastic textbook to understand the principles of modern software development and how to create effective software. Also available as a really good audiobook!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture III - Building Reusable Functions | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-03/lecture-functions.html",
    "href": "part-03/lecture-functions.html",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "With slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence.\n\n\n\n\n\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n. . .\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\nTrue\n\n\n\n\n\n\nControl structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely."
  },
  {
    "objectID": "part-03/lecture-functions.html#slicing",
    "href": "part-03/lecture-functions.html#slicing",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "With slicing we can get a range of elements from a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf left out, the step defaults to 1. Else, start defaults to 0 and stop defaults to the length of the sequence. Negative indices can be used to slice from the end of the sequence."
  },
  {
    "objectID": "part-03/lecture-functions.html#comparison-operators",
    "href": "part-03/lecture-functions.html#comparison-operators",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "Comparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\nOperators include: ==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n. . .\n&gt; Question: Is this True?\n\n# Careful here!\none = 1\ntwo = 1\nprint(one == two)\n\nTrue"
  },
  {
    "objectID": "part-03/lecture-functions.html#control-structures",
    "href": "part-03/lecture-functions.html#control-structures",
    "title": "Lecture III - Building Reusable Functions",
    "section": "",
    "text": "Control structures allow us to control the flow of execution\nIt includes conditional statements and loops\nConditional statements: if, elif, else\nLoops: for and while\nControl flow statements (in loops): continue and break\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe statement continue skips the rest of the current iteration and moves to the next one in a loop while the break statement exits the loop entirely."
  },
  {
    "objectID": "part-03/lecture-functions.html#what-is-a-function",
    "href": "part-03/lecture-functions.html#what-is-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "What is a Function?",
    "text": "What is a Function?\n\nFunctions can accept inputs (parameters) and return outputs\nEncapsulate logic, making code easier to maintain\nFunctions can be called multiple times from different part\nThey help reduce code duplication and improve readability\n\n\n# I'm a function.\ntype(print)\n\nbuiltin_function_or_method\n\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nRemember, methods are functions that are called on an object."
  },
  {
    "objectID": "part-03/lecture-functions.html#some-built-in-functions-already-used",
    "href": "part-03/lecture-functions.html#some-built-in-functions-already-used",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Some Built-in Functions already used",
    "text": "Some Built-in Functions already used\n\nprint(): Print text to console\ninput(): Read text from console\nlen(): Get the length of a sequence\nrange(): Generate a sequence of numbers\nround(): Round a number to a specified number of decimal places\ntype(): Get the type of an object\nint(): Convert a string to an integer\nfloat(): Convert a string to a floating-point number\nstr(): Convert an object to a string"
  },
  {
    "objectID": "part-03/lecture-functions.html#defining-a-function",
    "href": "part-03/lecture-functions.html#defining-a-function",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Defining a Function",
    "text": "Defining a Function\n\nUse the def keyword followed by the function name\nInside parentheses we list the inputs (parameters)\nThe code block within every function starts with a colon (:)\nIt is indented, just as the loops from the last lecture\n\n. . .\n\ndef greet(a_parameter):\n    print(f\"Hello, {a_parameter}!\")\ngreet(\"Students\")\n\nHello, Students!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIt is common practice to leave out one line after the definition of a function, although we will not always do that in the lecture to save space on the slides."
  },
  {
    "objectID": "part-03/lecture-functions.html#comment-functions",
    "href": "part-03/lecture-functions.html#comment-functions",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Comment Functions",
    "text": "Comment Functions\n\nIt is good practice to include a comment at the top of your functions\nIf you do it with three \"\"\", it will appear in the help menu\n\n. . .\n\ndef greet():\n    \"\"\"\n    This function will be used later and has currently\n    absolutely no use for anything.\n    \"\"\"\n    pass # Necessary placeholder to avoid error\n\nhelp(greet)\n\nHelp on function greet in module __main__:\n\ngreet()\n    This function will be used later and has currently\n    absolutely no use for anything."
  },
  {
    "objectID": "part-03/lecture-functions.html#naming-functions-and-methods",
    "href": "part-03/lecture-functions.html#naming-functions-and-methods",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Functions (and Methods)",
    "text": "Naming Functions (and Methods)\n\nFunction names should be short, but descriptive\nUse underscores (_) instead of spaces in the names\nAvoid using Python keywords as function names (e.g., print)\nTry to avoid using built-in functions and methods that have a similar name (e.g., sum and len)\n\n&gt; Question: Which of the following is a good name for a function?\n\n\nmyfunctionthatmultipliesvalues \nmultiply_two_values\n\nmultiplyTwoValues"
  },
  {
    "objectID": "part-03/lecture-functions.html#function-parameters",
    "href": "part-03/lecture-functions.html#function-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Parameters",
    "text": "Function Parameters\n\nParameters are variables that the function accepts\nThey allow you to pass data to the function\nTry to name them as variables: short and meaningful\nWe can also leave them out or define several inputs!\n\n\ndef greet():\n    print(\"Hello, stranger!\")\ngreet()\n\nHello, stranger!"
  },
  {
    "objectID": "part-03/lecture-functions.html#function-arguments",
    "href": "part-03/lecture-functions.html#function-arguments",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Arguments",
    "text": "Function Arguments\n\nArguments are the actual values passed to the function\nThey replace the parameters in the function definition\n\n. . .\n&gt; Question: What could be the correct arguments here?\n\ndef greet(university_name, lecture):\n    print(f\"Hello, students at the {university_name}!\")\n    print(f\"You are in lecture {lecture}!\")\n\n# Your code here"
  },
  {
    "objectID": "part-03/lecture-functions.html#initializing-parameters",
    "href": "part-03/lecture-functions.html#initializing-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Initializing Parameters",
    "text": "Initializing Parameters\n\nWe can also initialize parameters to a default value!\nTo do this we use the = sign and provide it with a value\nThis is called a keyword argument\n\n\ndef greet(lecture=\"Programming with Python\"):\n    print(f\"You are in lecture '{lecture}'!\")\n\ngreet()\ngreet(\"Super Advanced Programming with Python\")\n\nYou are in lecture 'Programming with Python'!\nYou are in lecture 'Super Advanced Programming with Python'!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is especially useful when we want to avoid errors due to missing arguments!"
  },
  {
    "objectID": "part-03/lecture-functions.html#multiple-parameters",
    "href": "part-03/lecture-functions.html#multiple-parameters",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nWe can also have multiple parameters in a function definition\nThey are called positional arguments and are separated by commas\nWhen we call them, they must be provided in the same order\nAlternatively, we could call them by name, as for example in this function call print(\"h\",\"i\",sep='')\n\n. . .\n&gt; Question: What will be printed here?\n\ndef call_parameters(parameter_a, parameter_b):\n    print(parameter_a, parameter_b)\n\ncall_parameters(parameter_b=\"Hello\", parameter_a=\"World\")\n\nWorld Hello"
  },
  {
    "objectID": "part-03/lecture-functions.html#function-return-values",
    "href": "part-03/lecture-functions.html#function-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Return Values",
    "text": "Function Return Values\n\nFunctions can return values using the return statement\nThe return statement ends the function\nIt then returns the specified value\n\n. . .\n\ndef simple_multiplication(a,b):\n    result = a*b\n    return result\nprint(simple_multiplication(2,21))\n\n42\n\n\n. . .\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\nprint(simple_multiplication(2,21))\n\n42"
  },
  {
    "objectID": "part-03/lecture-functions.html#access-return-values",
    "href": "part-03/lecture-functions.html#access-return-values",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Access return values",
    "text": "Access return values\n\nWe can also save the return value from a function in a variable\nThat way we can use it later on in the program\n\n. . .\n\ndef simple_multiplication(a,b):\n    return a*b # even shorter!\n\nresult = simple_multiplication(2,21)\nprint(result)\n\n42"
  },
  {
    "objectID": "part-03/lecture-functions.html#returning-none",
    "href": "part-03/lecture-functions.html#returning-none",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Returning None",
    "text": "Returning None\n\nIf we don’t specify return, functions will return None\n\n\ndef simple_multiplication(a,b):\n    result = a*b\n\nprint(simple_multiplication(2,21))\n\nNone\n\n\n. . .\n&gt; Grouptask: Come up with a function that checks whether a number is positive or negative. It returns \"positive\" for positive numbers and \"negative\" for negative numbers.\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also use multiple return statements in a function."
  },
  {
    "objectID": "part-03/lecture-functions.html#recursion",
    "href": "part-03/lecture-functions.html#recursion",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Recursion",
    "text": "Recursion\n\nRecursion is a technique where a function calls itself\nHelps to break down problems into smaller problems\n\n. . .\n\ndef fibonacci(n): # Classical example to introduce recursion\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n8\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nRecursion can be a powerful tool, but it can also be quite tricky to get right."
  },
  {
    "objectID": "part-03/lecture-functions.html#function-scope",
    "href": "part-03/lecture-functions.html#function-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Function Scope",
    "text": "Function Scope\n\nVariables defined inside a function are local to that function\nThey cannot be accessed outside the function\n\n. . .\ndef greet(name):\n    greeting = f\"Hello, {name}!\"\n    \nprint(greeting)  # This will cause an error\n. . .\n&gt; Question: Any idea how to access greeting?"
  },
  {
    "objectID": "part-03/lecture-functions.html#global-scope",
    "href": "part-03/lecture-functions.html#global-scope",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Scope",
    "text": "Global Scope\n\nVariables defined outside all functions are in the global scope\nThey can be accessed from anywhere in the program\n\n. . .\n\ngreeting = \"Hello, Stranger!\"\ndef greet(name):\n   greeting = f\"Hello, {name}!\"\n   return greeting\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet ????\n\nHello, Students!\nHello, Stranger!\n\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nWe don’t change global variables inside a function! The original value can still be accessed from outside the function."
  },
  {
    "objectID": "part-03/lecture-functions.html#global-keyword",
    "href": "part-03/lecture-functions.html#global-keyword",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Global Keyword",
    "text": "Global Keyword\n\nStill, we can change the value of greeting from inside a function!\nBy using the global keyword to modify a global variable\n\n. . .\n\ngreeting = \"Hello, Stranger!\"\n\ndef greet(name):\n   global greeting\n   greeting = f\"Hello, {name}!\"\n   return greeting\n\nprint(greet(\"Students\")) # Greet students\nprint(greeting) # Greet students again\n\nHello, Students!\nHello, Students!\n\n\n. . .\n&gt;Question: This can be confusing. Do you think you got the idea?"
  },
  {
    "objectID": "part-03/lecture-functions.html#classes-1",
    "href": "part-03/lecture-functions.html#classes-1",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Classes",
    "text": "Classes\n\nClasses are blueprints for creating objects\nThey encapsulate data (attributes) and behavior (methods)\nObjects are instances of classes\nMethods are functions that are defined within a class\n\n. . .\n\nclass Students: # Class definition\n    def know_answer(self): # Method definition\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students() # Object instantiation\nstudent.know_answer()\n\nThey know the answer to all questions."
  },
  {
    "objectID": "part-03/lecture-functions.html#self",
    "href": "part-03/lecture-functions.html#self",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Self",
    "text": "Self\n\nClasses can be quite tricky at first, especially the self keyword\nWhen we call self in a method, it refers to the object itself\nIt is used to access the attributes and methods of the class\nself always needs to be included in method definitions\n\n. . .\n\n# This won't work as self is missing\nclass Students: # Class definition\n    def know_answer(): # Method definition without self\n        print(f\"They know the answer to all questions.\")\n\nstudent = Students()\nstudent.know_answer()\n\n. . .\n&gt;Task: Try it yourself, what is the error?"
  },
  {
    "objectID": "part-03/lecture-functions.html#naming-classes",
    "href": "part-03/lecture-functions.html#naming-classes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Naming Classes",
    "text": "Naming Classes\n\nClasses can be named anything, but it is common to use the plural form of their name (e.g., People)\nCamelCase is used for class names, and snake_case is used for method and attribute names (e.g., TallPeople)\nClasses are usually defined in a file with the same name as their class, but with a .py extension\n\n. . .\nQuestion: Which of the following is a good class name? smart_student, SmartStudent, or SmartStudents"
  },
  {
    "objectID": "part-03/lecture-functions.html#class-attributes",
    "href": "part-03/lecture-functions.html#class-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Class Attributes",
    "text": "Class Attributes\n\nClass attributes are attributes that are shared by all class instances\nThey are defined within the class but outside any methods\n\n. . .\n&gt;Question: What do you think will happen here?\n\nclass Students: # Class definition\n    smart = True # Class attribute\n\nstudent_A = Students() # Object instantiation student_A\nstudent_B = Students() # Object instantiation student_B\n\nprint(student_A.smart)\nprint(student_B.smart)\n\nTrue\nTrue"
  },
  {
    "objectID": "part-03/lecture-functions.html#instance-attributes",
    "href": "part-03/lecture-functions.html#instance-attributes",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Instance Attributes",
    "text": "Instance Attributes\n\nInstance attributes are attributes unique to each class instance\nThey are defined within the __init__ method\n\n\nclass Student: # Class definition\n    def __init__(self, name, is_smart): # Method for initalization\n        self.name = name\n        self.smart = is_smart\n    def knows_answer(self): # Method to be called\n        if self.smart:\n            print(f\"{self.name} knows the answer to the question.\")\n        else:\n            print(f\"{self.name} does not know the answer to the question.\")\n\nstudent = Student(\"Buddy\",False) # Note, we don't need to call self here!\nstudent.knows_answer()\n\nBuddy does not know the answer to the question."
  },
  {
    "objectID": "part-03/lecture-functions.html#inheritance",
    "href": "part-03/lecture-functions.html#inheritance",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance",
    "text": "Inheritance\n\nInheritance allows a class to inherit attributes and methods\nThe class that inherits is called the subclass\nThe class that is being inherited from is called the superclass\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry!  It can be quite much right now. Hang in there and soon it will get easier again!"
  },
  {
    "objectID": "part-03/lecture-functions.html#inheritance-in-action",
    "href": "part-03/lecture-functions.html#inheritance-in-action",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Inheritance in Action",
    "text": "Inheritance in Action\n\nclass Student: # Superclass\n    def __init__(self, name):\n        self.name = name\n    def when_asked(self):\n        pass\n\nclass SmartStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} knows the answer!\"\n        \nclass LazyStudent(Student): # Subclass\n    def when_asked(self):\n        return f\"{self.name} has to ask ChatGPT!\"\n\n&gt;Grouptask: Create two students. One is smart and the other one is lazy. Make sure that both students reaction to a question is printed."
  },
  {
    "objectID": "part-03/lecture-functions.html#encapsulation",
    "href": "part-03/lecture-functions.html#encapsulation",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nEncapsulation is the concept of bundling data (attributes) and methods (behavior) that operate on the data into a single unit (class)\nIt is a key aspect of object oriented programming (OOP)\nIt helps in organizing code and controlling access\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nFortunately, this is an introduction to Python, so we won’t go into details of encapsulation."
  },
  {
    "objectID": "part-03/lecture-functions.html#the-end",
    "href": "part-03/lecture-functions.html#the-end",
    "title": "Lecture III - Building Reusable Functions",
    "section": "The End",
    "text": "The End\n\nInterested in more detail about classes and OOP?\nCheck out access modifiers, getters and setters\nThey are definitely a bit more complicated for beginners…\nThough they are worth learning if you build complex programs\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics of funtions and classes. We will continue with some slightly easier topics in the next lectures.\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-03/lecture-functions.html#interesting-book-to-dive-deeper",
    "href": "part-03/lecture-functions.html#interesting-book-to-dive-deeper",
    "title": "Lecture III - Building Reusable Functions",
    "section": "Interesting Book to dive deeper",
    "text": "Interesting Book to dive deeper\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nA fantastic textbook to understand the principles of modern software development and how to create effective software. Also available as a really good audiobook!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Programming with Python!",
    "section": "",
    "text": "Objectives\nThis module introduces programming with python. Python is a modern and powerful programming language that is widely used in industry and academic projects. Students will learn how to find a code-based solution to basic and complex problems. The course is based on many examples that illustrate how to tackle a potentially complex issue as well as how to implement a solution.\n\n\nLearning Outcomes\nUpon completion of the course, students …\n\ncan implement solutions to complex problems in python\nknow basic concepts of programming and algorithms such as loops, functions\ncan apply basic data manipulation and visualization\nwill be able to read and write code\nwill have experience working with python libraries such as NumPy, Pandas, Matplotlib\nwill know how to collaborate in a small team to find solutions for problems at hand\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any prior knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Structure\nThe course is based on a hands-on approach with a two-fold structure:\n\nLectures: In the lectures, we will introduce concepts and illustrate them in reproducible examples.\nHands-on Tutorials: Students will practically apply the concepts of the lecture in hands-on examples.\nAssignments: Students will solve programming exercises in groups of up to three students that they will have to hand in.\n\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Programming with Python\nPart II: Data Science with Python\nPart III: Programming Projects\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right corner\n\n\n\nPassing the Course\n\n75% attendance required for passing the course\nYou will be given two programming assignments and one project to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under vlcek@beyondsimulations.com.\n\n\nContributors\nThanks to Phillip Bach whose original course material laid the foundation for this course.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nString methods, comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope, classes\nHandling Data in more than one Dimension (IV)\nTuples, lists, sets, dictionaries, and basic I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, debugging",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-programming-with-python",
    "href": "general/syllabus.html#introduction-to-programming-with-python",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Python is provided. Students will learn the Python syntax, data types, as well as how to implement loops, functions, and object classes in Python. We will introduce core Python libraries, too, including NumPy and Pandas. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nBasics of Python syntax, variables, data types\nControl Structures for Your Code (II)\nString methods, comparisons, conditional statements, loops\nBuilding Reusable Functions (III)\nFunctions, arguments, return values, scope, classes\nHandling Data in more than one Dimension (IV)\nTuples, lists, sets, dictionaries, and basic I/O\nHandling Errors and Strings (V)\nExceptions, try-except blocks, debugging",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#data-science-with-python",
    "href": "general/syllabus.html#data-science-with-python",
    "title": "Syllabus",
    "section": "Data Science with Python",
    "text": "Data Science with Python\nIn the second part, we will cover basic data science tools in Python referring to data manipulation, descriptive and explorative analysis as well as visualization. At the end, an outlook will be provided on the next steps in Python, including statistical analysis and machine learning.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nUsing Modules and Packages (VI)\nStandard libraries, random numbers and how to use them\nNumPy and Pandas for Scientific Computing (VII)\nData manipulation with Pandas, array operations with NumPy\nPlotting Data (VIII)\nMatplotlib, Seaborne based on hand-on examples\nFirst steps into A.I. (IX)\nA brief intro to machine learning concepts",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#programming-projects",
    "href": "general/syllabus.html#programming-projects",
    "title": "Syllabus",
    "section": "Programming Projects",
    "text": "Programming Projects\nIn the third part, students will be assigned mini projects in Python where they can apply their new knowledge in groups on a project of their choice. Each group will present their results and get feedback at the end of the semester.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nYour first Project I (X)\nChoose your project that ties together concepts from the course\nYour first Project II (XI)\nProgress your group-project under assistance\nYour first Project III (XII)\nFinalize your group-project with your team\nPresentations and Discussion (XIII)\nPresent your group’s work and the learnings you have made",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment I",
    "section": "",
    "text": "Nothing here yet. Please check back later, as the first assignment will be available here soon.",
    "crumbs": [
      "Assignments",
      "01 Assignment"
    ]
  },
  {
    "objectID": "part-01/tutorial-introduction.html",
    "href": "part-01/tutorial-introduction.html",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\n\n\n\nI would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.\n\n\n\nIn the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-01/tutorial-introduction.html#solutions",
    "href": "part-01/tutorial-introduction.html#solutions",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "You will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching for answers. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-01/tutorial-introduction.html#how-to-tackle-the-exercises",
    "href": "part-01/tutorial-introduction.html#how-to-tackle-the-exercises",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "I would recommend the following approach: Create a separate .py file for each exercise. First, try to understand the problem and what it is asking you to do. Then, write the code to solve the problem. Run the code and check if the output is correct. If it is not, try to find a solution together with the instructor or classmates.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-01/tutorial-introduction.html#tutorials-vs-assignments",
    "href": "part-01/tutorial-introduction.html#tutorials-vs-assignments",
    "title": "Tutorial I - Introduction",
    "section": "",
    "text": "In the tutorials, we will go through different exercises together and you can ask questions. The assignments are similar to the tutorials, but you will work on them individually or in small groups. You can still ask questions during the tutorial sessions, but you should try to solve the exercises on your own first.",
    "crumbs": [
      "01 Introduction ",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/lecture-plotting.html",
    "href": "part-08/lecture-plotting.html",
    "title": "Lecture VIII - Data Visualization",
    "section": "",
    "text": "Quick Recap of the last Lecture\n\n\nData Visualization\n\nData visualization is the process of creating visual representations of data\nIt allows us to understand the data in a more intuitive way\nIt helps us to identify patterns, trends, and outliers in the data\n\n\n\nBeautiful Plotting\n\nThere are many libraries for data visualization in Python\nSome of the most popular libraries are:\n\nMatplotlib\nSeaborn\nPlotly\nBokeh\nAltair\nGeoPandas\nGeoplot\nGeoplotlib\n\n\n\n\nMatplotlib Module\n\n\nSeaborn Module\n\n\nPlotly Module\n\n\nDash Module\n\n\nBokeh Module"
  },
  {
    "objectID": "part-07/lecture-scientific.html#what-is-numpy",
    "href": "part-07/lecture-scientific.html#what-is-numpy",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "What is NumPy?",
    "text": "What is NumPy?\n\nNumPy is a package for scientific computing in Python\nProvides support for large, multi-dimensional arrays and matrices\nWide range of mathematical functions to operate on these arrays\nPython lists can be slow - Numpy arrays are much faster\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe name of the package comes from Numerical Python."
  },
  {
    "objectID": "part-07/lecture-scientific.html#why-is-numpy-so-fast",
    "href": "part-07/lecture-scientific.html#why-is-numpy-so-fast",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Why is NumPy so fast?",
    "text": "Why is NumPy so fast?\n\nNumPy arrays are stored in a contiguous block of memory\nThis allows for efficient memory access patterns\nOperations are implemented in the languages C and C++"
  },
  {
    "objectID": "part-07/lecture-scientific.html#how-to-get-started",
    "href": "part-07/lecture-scientific.html#how-to-get-started",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "How to get started",
    "text": "How to get started\n\nInstall NumPy using pip install numpy\nIn Thonny, use Tools -&gt; Manage Packages... to install NumPy\nImport NumPy in a script using import numpy as np\nYou are ready to go!\n\n. . .\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5])\ntype(x)\n\nnumpy.ndarray\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nYou don’t have to use as np. But it is a common practice to do so."
  },
  {
    "objectID": "part-07/lecture-scientific.html#creating-arrays",
    "href": "part-07/lecture-scientific.html#creating-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nThe backbone of Numpy is the so called ndarray\nCan be initialized from different data structures:\n\n\nimport numpy as np\narray_from_list = np.array([1, 1, 1, 1])\nprint(array_from_list)\n\n[1 1 1 1]\n\n\n\nimport numpy as np\narray_from_tuple = np.array((2, 2, 2, 2))\nprint(array_from_tuple)\n\n[2 2 2 2]"
  },
  {
    "objectID": "part-07/lecture-scientific.html#hetergenous-data-types",
    "href": "part-07/lecture-scientific.html#hetergenous-data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Hetergenous Data Types",
    "text": "Hetergenous Data Types\n\nIt is possible to store different data types in a ndarray\n\n\nimport numpy as np\narray_different_types = np.array([\"s\", 2, 2.0, \"i\"])\nprint(array_different_types)\n\n['s' '2' '2.0' 'i']\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNot recommended, as it can lead to performance issues. I possible, keep them homogenous."
  },
  {
    "objectID": "part-07/lecture-scientific.html#creating-prefilled-arrays",
    "href": "part-07/lecture-scientific.html#creating-prefilled-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating Prefilled Arrays",
    "text": "Creating Prefilled Arrays\nOften used to improve performance by allocating memory upfront\n\nnp.zeros(shape): to create an array of zeros\nnp.ones(shape): to create an array of ones\nnp.random.rand(shape): to create an array of random values\nnp.arange(start, stop, step): evenly spaced values\nnp.linspace(start, stop, num): evenly spaced values\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe shape refers to the size of the array. It can have one or multiple dimensions."
  },
  {
    "objectID": "part-07/lecture-scientific.html#dimensions",
    "href": "part-07/lecture-scientific.html#dimensions",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Dimensions",
    "text": "Dimensions\n\nThe shape is specified as tuple in these arrays\n(2) or 2 creates a 1-dimensional array (vetor)\n(2,2) creates a 2-dimensional array (matrix)\n(2,2,2) creates a 3-dimensional array (3rd order tensor)\n(2,2,2,2) creates a 4-dimensional array (4th order tensor)\n…"
  },
  {
    "objectID": "part-07/lecture-scientific.html#arrays-in-action",
    "href": "part-07/lecture-scientific.html#arrays-in-action",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Arrays in Action",
    "text": "Arrays in Action\nTask: Complete the following task\n\n# Create a 3-dimensional tensor with filled with ones\n# You can choose the shape of the tensor, but it should have 200 elements\n# Sum over all values of the tensor\n# Print the shape of the tensor using the method shape()\n# Print the dtype of the tensor using the method dtype()\n# Print the size of the tensor using the method size()"
  },
  {
    "objectID": "part-07/lecture-scientific.html#indexing-and-slicing",
    "href": "part-07/lecture-scientific.html#indexing-and-slicing",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\n\nAccessing and slicing ndarray elements works as before\nIn higher dimensions we can access elements using multiple indices\n\n. . .\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nx = np.random.randint(0, 10, size=(3, 3))\nprint(x)\nprint(\"---\")\nprint(x[0:2,0:2])\n\n[[3 8 9]\n [0 9 4]\n [0 2 0]]\n---\n[[3 8]\n [0 9]]"
  },
  {
    "objectID": "part-07/lecture-scientific.html#data-types",
    "href": "part-07/lecture-scientific.html#data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Data Types",
    "text": "Data Types\n\nNumpy provides data types as characters\ni: integer\nb: boolean\nf: float\nS: string\nU: unicode\nThe type can be checked by calling the .dtype attribute\n\n\nstring_array = np.array([\"Hello\", \"World\"])\nstring_array.dtype\n\ndtype('&lt;U5')"
  },
  {
    "objectID": "part-07/lecture-scientific.html#enforcing-data-types",
    "href": "part-07/lecture-scientific.html#enforcing-data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Enforcing Data Types",
    "text": "Enforcing Data Types\n\nWe can also provide the type when creating arrays\n\n. . .\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f')\nprint(x.dtype)\n\nfloat32\n\n\n. . .\n\nOr we can change them for existing arrays\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f')\nprint(x.astype('i').dtype)\n\nint32\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how the types are specified as int32 and float32."
  },
  {
    "objectID": "part-07/lecture-scientific.html#joining-arrays",
    "href": "part-07/lecture-scientific.html#joining-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Joining Arrays",
    "text": "Joining Arrays\n\nYou can use concatenate two join arrays\nWith axis you can specify the dimension\nEven easier in 2-dimensions is hstack() and vstack()\n\n. . .\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nones = np.array((1,1,1,1))\ntwos = np.array((1,1,1,1)) *2\nprint(np.vstack((ones,twos)))\nprint(np.hstack((ones,twos)))\n\n[[1 1 1 1]\n [2 2 2 2]]\n[1 1 1 1 2 2 2 2]"
  },
  {
    "objectID": "part-07/lecture-scientific.html#common-methods",
    "href": "part-07/lecture-scientific.html#common-methods",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Common Methods",
    "text": "Common Methods\n\nsort(): sort the array from low to high\nreshape(): reshape the array into a new shape\nflatten(): flatten the array into a 1D array\nsqueeze(): squeeze the array to remove 1D entries\ntranspose(): transpose the array\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nTry experiment with these methods, as they can make your work later much easier."
  },
  {
    "objectID": "part-07/lecture-scientific.html#iterating-over-arrays",
    "href": "part-07/lecture-scientific.html#iterating-over-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Iterating over Arrays",
    "text": "Iterating over Arrays\n\nNaturally, we can also loop over a ndarray"
  },
  {
    "objectID": "part-07/lecture-scientific.html#ufuncs",
    "href": "part-07/lecture-scientific.html#ufuncs",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Ufuncs",
    "text": "Ufuncs\n\nTo increase the speed even further, we can use"
  },
  {
    "objectID": "part-07/lecture-scientific.html#filter",
    "href": "part-07/lecture-scientific.html#filter",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Filter",
    "text": "Filter"
  },
  {
    "objectID": "part-07/lecture-scientific.html#what-is-pandas",
    "href": "part-07/lecture-scientific.html#what-is-pandas",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "What is Pandas?",
    "text": "What is Pandas?\n\nPandas is a data manipulation and analysis library\nIt provides data structures like DataFrames and Series\nIt also provides tools for data cleaning, analysis, and visualization"
  },
  {
    "objectID": "part-07/lecture-scientific.html#how-to-install-pandas",
    "href": "part-07/lecture-scientific.html#how-to-install-pandas",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "How to install Pandas",
    "text": "How to install Pandas"
  },
  {
    "objectID": "part-07/lecture-scientific.html#creating-dataframes",
    "href": "part-07/lecture-scientific.html#creating-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary"
  },
  {
    "objectID": "part-07/lecture-scientific.html#basic-operations",
    "href": "part-07/lecture-scientific.html#basic-operations",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Basic Operations",
    "text": "Basic Operations\n\nUse the df.head() method to display the first few rows of a DataFrame\nUse the df.tail() method to display the last few rows of a DataFrame\nUse the df.info() method to display information about a DataFrame\nUse the df.describe() method to display summary statistics about a DataFrame\nUse the df.columns attribute to access the column names of a DataFrame\nUse the df.index attribute to access the index of a DataFrame\nUse the df.values attribute to access the values of a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific.html#subsetting-dataframes",
    "href": "part-07/lecture-scientific.html#subsetting-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Subsetting DataFrames",
    "text": "Subsetting DataFrames\n\nUse the df.loc[row_indexer, column_indexer] method to access a specific element of a DataFrame\nUse the df.iloc[row_indexer, column_indexer] method to access a specific element of a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific.html#filtering-dataframes",
    "href": "part-07/lecture-scientific.html#filtering-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Filtering DataFrames",
    "text": "Filtering DataFrames\n\nUse the df[df['column'] &gt; value] method to filter a DataFrame\nUse the df[df['column'].isin(values)] method to filter a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific.html#grouping-dataframes",
    "href": "part-07/lecture-scientific.html#grouping-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Grouping DataFrames",
    "text": "Grouping DataFrames\n\nUse the df.groupby('column').sum() method to group a DataFrame and calculate the sum of a column\nUse the df.groupby('column').mean() method to group a DataFrame and calculate the mean of a column\nUse the df.groupby('column').count() method to group a DataFrame and count the number of elements in a column\nUse the df.groupby('column').size() method to group a DataFrame and count the number of elements in a column"
  },
  {
    "objectID": "part-07/lecture-scientific.html#excel-files",
    "href": "part-07/lecture-scientific.html#excel-files",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Excel Files",
    "text": "Excel Files\n\nExcel files can be read using the pd.read_excel(file_path) function\nExcel files can be written using the df.to_excel(file_path) method"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#what-is-numpy",
    "href": "part-07/lecture-scientific-presentation.html#what-is-numpy",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "What is NumPy?",
    "text": "What is NumPy?\n\nNumPy is a package for scientific computing in Python\nProvides support for large, multi-dimensional arrays and matrices\nWide range of mathematical functions to operate on these arrays\nPython lists can be slow - Numpy arrays are much faster\n\n\n\n\n\n\n\n\nNote\n\n\nThe name of the package comes from Numerical Python."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#why-is-numpy-so-fast",
    "href": "part-07/lecture-scientific-presentation.html#why-is-numpy-so-fast",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Why is NumPy so fast?",
    "text": "Why is NumPy so fast?\n\nNumPy arrays are stored in a contiguous block of memory\nThis allows for efficient memory access patterns\nOperations are implemented in the languages C and C++"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#how-to-get-started",
    "href": "part-07/lecture-scientific-presentation.html#how-to-get-started",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "How to get started",
    "text": "How to get started\n\nInstall NumPy using pip install numpy\nIn Thonny, use Tools -&gt; Manage Packages... to install NumPy\nImport NumPy in a script using import numpy as np\nYou are ready to go!\n\n\n\nimport numpy as np\nx = np.array([1, 2, 3, 4, 5])\ntype(x)\n\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nYou don’t have to use as np. But it is a common practice to do so."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#creating-arrays",
    "href": "part-07/lecture-scientific-presentation.html#creating-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nThe backbone of Numpy is the so called ndarray\nCan be initialized from different data structures:\n\n\nimport numpy as np\narray_from_list = np.array([1, 1, 1, 1])\nprint(array_from_list)\n\n\n\n[1 1 1 1]\n\n\n\nimport numpy as np\narray_from_tuple = np.array((2, 2, 2, 2))\nprint(array_from_tuple)\n\n\n\n[2 2 2 2]"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#hetergenous-data-types",
    "href": "part-07/lecture-scientific-presentation.html#hetergenous-data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Hetergenous Data Types",
    "text": "Hetergenous Data Types\n\nIt is possible to store different data types in a ndarray\n\n\nimport numpy as np\narray_different_types = np.array([\"s\", 2, 2.0, \"i\"])\nprint(array_different_types)\n\n\n\n['s' '2' '2.0' 'i']\n\n\n\n\n\n\n\n\n\nNote\n\n\nNot recommended, as it can lead to performance issues. I possible, keep them homogenous."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#creating-prefilled-arrays",
    "href": "part-07/lecture-scientific-presentation.html#creating-prefilled-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating Prefilled Arrays",
    "text": "Creating Prefilled Arrays\nOften used to improve performance by allocating memory upfront\n\nnp.zeros(shape): to create an array of zeros\nnp.ones(shape): to create an array of ones\nnp.random.rand(shape): to create an array of random values\nnp.arange(start, stop, step): evenly spaced values\nnp.linspace(start, stop, num): evenly spaced values\n\n\n\n\n\n\n\n\nNote\n\n\nThe shape refers to the size of the array. It can have one or multiple dimensions."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#dimensions",
    "href": "part-07/lecture-scientific-presentation.html#dimensions",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Dimensions",
    "text": "Dimensions\n\nThe shape is specified as tuple in these arrays\n(2) or 2 creates a 1-dimensional array (vetor)\n(2,2) creates a 2-dimensional array (matrix)\n(2,2,2) creates a 3-dimensional array (3rd order tensor)\n(2,2,2,2) creates a 4-dimensional array (4th order tensor)\n…"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#arrays-in-action",
    "href": "part-07/lecture-scientific-presentation.html#arrays-in-action",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Arrays in Action",
    "text": "Arrays in Action\nTask: Complete the following task\n\n# Create a 3-dimensional tensor with filled with ones\n# You can choose the shape of the tensor, but it should have 200 elements\n# Sum over all values of the tensor\n# Print the shape of the tensor using the method shape()\n# Print the dtype of the tensor using the method dtype()\n# Print the size of the tensor using the method size()"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#indexing-and-slicing",
    "href": "part-07/lecture-scientific-presentation.html#indexing-and-slicing",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\n\nAccessing and slicing ndarray elements works as before\nIn higher dimensions we can access elements using multiple indices\n\n\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nx = np.random.randint(0, 10, size=(3, 3))\nprint(x)\nprint(\"---\")\nprint(x[0:2,0:2])\n\n\n\n[[2 6 9]\n [2 1 1]\n [4 9 5]]\n---\n[[2 6]\n [2 1]]"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#data-types",
    "href": "part-07/lecture-scientific-presentation.html#data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Data Types",
    "text": "Data Types\n\nNumpy provides data types as characters\ni: integer\nb: boolean\nf: float\nS: string\nU: unicode\nThe type can be checked by calling the .dtype attribute\n\n\nstring_array = np.array([\"Hello\", \"World\"])\nstring_array.dtype\n\n\n\ndtype('&lt;U5')"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#enforcing-data-types",
    "href": "part-07/lecture-scientific-presentation.html#enforcing-data-types",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Enforcing Data Types",
    "text": "Enforcing Data Types\n\nWe can also provide the type when creating arrays\n\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f')\nprint(x.dtype)\n\n\n\nfloat32\n\n\n\n\n\nOr we can change them for existing arrays\n\n\nx = np.array([1, 2, 3, 4, 5],  dtype = 'f')\nprint(x.astype('i').dtype)\n\n\n\nint32\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how the types are specified as int32 and float32."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#joining-arrays",
    "href": "part-07/lecture-scientific-presentation.html#joining-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Joining Arrays",
    "text": "Joining Arrays\n\nYou can use concatenate two join arrays\nWith axis you can specify the dimension\nEven easier in 2-dimensions is hstack() and vstack()\n\n\nQuestion: What do you expect will be printed?\n\nimport numpy as np\nones = np.array((1,1,1,1))\ntwos = np.array((1,1,1,1)) *2\nprint(np.vstack((ones,twos)))\nprint(np.hstack((ones,twos)))\n\n\n\n[[1 1 1 1]\n [2 2 2 2]]\n[1 1 1 1 2 2 2 2]"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#common-methods",
    "href": "part-07/lecture-scientific-presentation.html#common-methods",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Common Methods",
    "text": "Common Methods\n\nsort(): sort the array from low to high\nreshape(): reshape the array into a new shape\nflatten(): flatten the array into a 1D array\nsqueeze(): squeeze the array to remove 1D entries\ntranspose(): transpose the array\n\n\n\n\n\n\n\n\nTip\n\n\nTry experiment with these methods, as they can make your work later much easier."
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#iterating-over-arrays",
    "href": "part-07/lecture-scientific-presentation.html#iterating-over-arrays",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Iterating over Arrays",
    "text": "Iterating over Arrays\n\nNaturally, we can also loop over a ndarray"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#ufuncs",
    "href": "part-07/lecture-scientific-presentation.html#ufuncs",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Ufuncs",
    "text": "Ufuncs\n\nTo increase the speed even further, we can use"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#filter",
    "href": "part-07/lecture-scientific-presentation.html#filter",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Filter",
    "text": "Filter"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#what-is-pandas",
    "href": "part-07/lecture-scientific-presentation.html#what-is-pandas",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "What is Pandas?",
    "text": "What is Pandas?\n\nPandas is a data manipulation and analysis library\nIt provides data structures like DataFrames and Series\nIt also provides tools for data cleaning, analysis, and visualization"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#how-to-install-pandas",
    "href": "part-07/lecture-scientific-presentation.html#how-to-install-pandas",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "How to install Pandas",
    "text": "How to install Pandas"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#creating-dataframes",
    "href": "part-07/lecture-scientific-presentation.html#creating-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary\nUse the pd.DataFrame(data, index, columns) function to create a DataFrame from a dictionary"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#basic-operations",
    "href": "part-07/lecture-scientific-presentation.html#basic-operations",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Basic Operations",
    "text": "Basic Operations\n\nUse the df.head() method to display the first few rows of a DataFrame\nUse the df.tail() method to display the last few rows of a DataFrame\nUse the df.info() method to display information about a DataFrame\nUse the df.describe() method to display summary statistics about a DataFrame\nUse the df.columns attribute to access the column names of a DataFrame\nUse the df.index attribute to access the index of a DataFrame\nUse the df.values attribute to access the values of a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#subsetting-dataframes",
    "href": "part-07/lecture-scientific-presentation.html#subsetting-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Subsetting DataFrames",
    "text": "Subsetting DataFrames\n\nUse the df.loc[row_indexer, column_indexer] method to access a specific element of a DataFrame\nUse the df.iloc[row_indexer, column_indexer] method to access a specific element of a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#filtering-dataframes",
    "href": "part-07/lecture-scientific-presentation.html#filtering-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Filtering DataFrames",
    "text": "Filtering DataFrames\n\nUse the df[df['column'] &gt; value] method to filter a DataFrame\nUse the df[df['column'].isin(values)] method to filter a DataFrame"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#grouping-dataframes",
    "href": "part-07/lecture-scientific-presentation.html#grouping-dataframes",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Grouping DataFrames",
    "text": "Grouping DataFrames\n\nUse the df.groupby('column').sum() method to group a DataFrame and calculate the sum of a column\nUse the df.groupby('column').mean() method to group a DataFrame and calculate the mean of a column\nUse the df.groupby('column').count() method to group a DataFrame and count the number of elements in a column\nUse the df.groupby('column').size() method to group a DataFrame and count the number of elements in a column"
  },
  {
    "objectID": "part-07/lecture-scientific-presentation.html#excel-files",
    "href": "part-07/lecture-scientific-presentation.html#excel-files",
    "title": "Lecture VII - NumPy and Pandas for Scientific Computing",
    "section": "Excel Files",
    "text": "Excel Files\n\nExcel files can be read using the pd.read_excel(file_path) function\nExcel files can be written using the df.to_excel(file_path) method\n\n\n\n\nLecture VII - NumPy and Pandas for Scientific Computing | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-09/lecture-ai.html",
    "href": "part-09/lecture-ai.html",
    "title": "Lecture IX - Introduction to AI",
    "section": "",
    "text": "Quick Recap of the last Lecture\n\n\nIntroduction to AI\n\n\nWhat is AI?\n\n\nChallenges and Ethical Considerations\n\n\nSciPy Module\n\n\nScikit-Learn Module\n\n\nTensorFlow Module\n\n\nCoding with AI Models"
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "About me",
    "text": "About me\n\n\nPost-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#course-outline",
    "href": "part-01/lecture-presentation.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects"
  },
  {
    "objectID": "part-01/lecture-presentation.html#participation",
    "href": "part-01/lecture-presentation.html#participation",
    "title": "Lecture I - Introduction",
    "section": "Participation",
    "text": "Participation\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python"
  },
  {
    "objectID": "part-01/lecture-presentation.html#teaching",
    "href": "part-01/lecture-presentation.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier"
  },
  {
    "objectID": "part-01/lecture-presentation.html#passing-the-course",
    "href": "part-01/lecture-presentation.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together"
  },
  {
    "objectID": "part-01/lecture-presentation.html#solution",
    "href": "part-01/lecture-presentation.html#solution",
    "title": "Lecture I - Introduction",
    "section": "Solution",
    "text": "Solution\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n\n\n\n\n\n\n\nTip\n\n\nI’d encourage you to start and submit your solution early"
  },
  {
    "objectID": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "href": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-to-expect",
    "href": "part-01/lecture-presentation.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "What to expect",
    "text": "What to expect\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#goals-of-the-course",
    "href": "part-01/lecture-presentation.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context"
  },
  {
    "objectID": "part-01/lecture-presentation.html#python-as-language",
    "href": "part-01/lecture-presentation.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "Python as Language",
    "text": "Python as Language\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#help-from-ai",
    "href": "part-01/lecture-presentation.html#help-from-ai",
    "title": "Lecture I - Introduction",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n\n\n\n\n\n\n\nWarning\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-01/lecture-presentation.html#analytics",
    "href": "part-01/lecture-presentation.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#research",
    "href": "part-01/lecture-presentation.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#visualization",
    "href": "part-01/lecture-presentation.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#finance",
    "href": "part-01/lecture-presentation.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#logistics",
    "href": "part-01/lecture-presentation.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#my-recommendation",
    "href": "part-01/lecture-presentation.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google/find help, modify, and solve problems on your own\n\n\n\n\n\n\n\n\nTip\n\n\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "part-01/lecture-presentation.html#dont-give-up",
    "href": "part-01/lecture-presentation.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated too easily at the start!\nLearn something new: Expect to stretch your comfort zone"
  },
  {
    "objectID": "part-01/lecture-presentation.html#learning-path",
    "href": "part-01/lecture-presentation.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated with programming, read the following helpful blog post about the challenges on medium.com"
  },
  {
    "objectID": "part-01/lecture-presentation.html#errors",
    "href": "part-01/lecture-presentation.html#errors",
    "title": "Lecture I - Introduction",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form:\nhttps://tally.so/r/w7oapa"
  },
  {
    "objectID": "part-01/lecture-presentation.html#install-python",
    "href": "part-01/lecture-presentation.html#install-python",
    "title": "Lecture I - Introduction",
    "section": "Install Python",
    "text": "Install Python\n\nYou could download it from the Python website or with Anaconda\nBut I would recommend we start by installing Thonny\nIt is an open source IDE that runs on Windows, Linux and Mac\nIt comes with a built-in Python interpreter and package management!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-an-ide",
    "href": "part-01/lecture-presentation.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nAn IDE (Integrated Development Environment) is an application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python and aimed at beginners\nIt does not use the latest Python and has the most features\nBut it is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft"
  },
  {
    "objectID": "part-01/lecture-presentation.html#thonny",
    "href": "part-01/lecture-presentation.html#thonny",
    "title": "Lecture I - Introduction",
    "section": "Thonny",
    "text": "Thonny\n\nFirst start of Thonny"
  },
  {
    "objectID": "part-01/lecture-presentation.html#python-on-ipads",
    "href": "part-01/lecture-presentation.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, if you have no other option, you could use Pythonista\nIt works locally on your iPad and can run most Python scripts\n\n\n\n\n\n\n\n\nCaution\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems."
  },
  {
    "objectID": "part-01/lecture-presentation.html#first-start-of-pythonista",
    "href": "part-01/lecture-presentation.html#first-start-of-pythonista",
    "title": "Lecture I - Introduction",
    "section": "First start of Pythonista",
    "text": "First start of Pythonista\n\nFirst start of Pythonista"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world",
    "href": "part-01/lecture-presentation.html#hello-world",
    "title": "Lecture I - Introduction",
    "section": "Hello, World!",
    "text": "Hello, World!\nYour Task: Create a directory for the course and create a new file called hello_world.py with the following code and save it:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n\nRun the code with the green ‘run’ button at the top or by going to the line and pressing Shift+Enter:\n\n\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world-in-a-message",
    "href": "part-01/lecture-presentation.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nYour Task: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n\n\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nHello, World!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world-in-parentheses",
    "href": "part-01/lecture-presentation.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string. We just have to be consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\n\n\nI shout \"Hello, World!\"\n\n\n\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n\n\n\nTry it yourself! What does happen, if you try to run this code?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#first-errors",
    "href": "part-01/lecture-presentation.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nThis is likely the most common error that you will encounter!\nIt happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\nYou can fix this by correcting the code and re-running\nIn the course of the lecture you will encounter many more errors!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-a-program",
    "href": "part-01/lecture-presentation.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nA sequence of instructions telling a computer what to do\nWritten in a programming language the computer can understand\nBasic operations in most languages:\n\nInput: Get data from keyboard, file, network, sensors, etc.\nOutput: Display data on screen, save to file, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc."
  },
  {
    "objectID": "part-01/lecture-presentation.html#key-concepts",
    "href": "part-01/lecture-presentation.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check conditions and execute accordingly\nLoops: Perform actions repeatedly, often with variations\nFunctions: Group instructions for reusability"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-python-executes-code",
    "href": "part-01/lecture-presentation.html#how-python-executes-code",
    "title": "Lecture I - Introduction",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-again-world",
    "href": "part-01/lecture-presentation.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nComment: In the first line we define a comment with #\n\nIt is not executed but used to explain what code does\n\nVariable: In the second line we define a variable message\n\nIt points to a string that contains the text “Hello, World!”\n\nFunction: In the third line we call a function print\n\nIt prints out whatever is stored in message"
  },
  {
    "objectID": "part-01/lecture-presentation.html#dont-worry",
    "href": "part-01/lecture-presentation.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused?\nDon’t worry about it for now!\nWe’ll learn more about variables and functions later"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-zen-of-python",
    "href": "part-01/lecture-presentation.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python: A collection of 19 statements intended to communicate general principles\n\n\n# Try this code in Python to see the Zen of Python\nimport this"
  },
  {
    "objectID": "part-01/lecture-presentation.html#variables",
    "href": "part-01/lecture-presentation.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types before\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\n\n\nTime\n\n\n\nBut there are certain rules to variable names!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#variable-naming-conventions",
    "href": "part-01/lecture-presentation.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792"
  },
  {
    "objectID": "part-01/lecture-presentation.html#functions",
    "href": "part-01/lecture-presentation.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\n\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\nNote\n\n\nWe will cover functions in more detail later in the course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-are-values-and-types",
    "href": "part-01/lecture-presentation.html#what-are-values-and-types",
    "title": "Lecture I - Introduction",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nIt takes one argument (a value) and returns its type as string"
  },
  {
    "objectID": "part-01/lecture-presentation.html#strings",
    "href": "part-01/lecture-presentation.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\n\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n\n\nResult: “Hello, World” is a string - in short ‘str’.\n\n\nBut what about the f”?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#formated-strings",
    "href": "part-01/lecture-presentation.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions (here variables) in braces\nThey are evaluated at run time and inserted into the string\nThis is called interpolation\n\n\n\n\n\n\n\n\nNote\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\n\n\nHello, World! is a &lt;class 'str'&gt;"
  },
  {
    "objectID": "part-01/lecture-presentation.html#expressions",
    "href": "part-01/lecture-presentation.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n\n\n\n3\n\n\n\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n\n\n\nThe result is 3\n\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n\n\n\nAgain, the result is 3"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-a-string",
    "href": "part-01/lecture-presentation.html#what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "What is a String?",
    "text": "What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\nNote\n\n\nStrings are immutable, we can’t change single characters in them once they are created."
  },
  {
    "objectID": "part-01/lecture-presentation.html#string-operations",
    "href": "part-01/lecture-presentation.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\nBut we can also do much more with strings!\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\n\n\nHello, World!\n\n\n\n\nprint(two_strings[0]) # Indexing starts at zero!\n\n\n\nH\n\n\n\n\n\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n\n\n\nHell\n\n\n\n\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n\n\n13\n\n\n\n\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n\n\n--x----x----x--"
  },
  {
    "objectID": "part-01/lecture-presentation.html#booleans",
    "href": "part-01/lecture-presentation.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\n\n&gt; More on them in our next lecture!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#integers-and-floats",
    "href": "part-01/lecture-presentation.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: 2.5, -4.789123, 0.0 or 1.234e2\nBit size does not have to be specified (e.g.: 64 bits) in Python\n\n\n\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n\n\n\n1 is of type &lt;class 'int'&gt;\n128.64 is of type float\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#arithmetic-operators",
    "href": "part-01/lecture-presentation.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\n\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how the integers in the division are converted to floats before the division is performed."
  },
  {
    "objectID": "part-01/lecture-presentation.html#precedence",
    "href": "part-01/lecture-presentation.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nThe operators are the same as in most other languages\nThey can be combined with each other, and with variables\nNormal rules of precedence apply\n\n\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n\n\n2 + 3 * 4 = 14\n\n\n\n\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n\n\n(2 + 3) * 4 = 20"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-input-function",
    "href": "part-01/lecture-presentation.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe function always returns the input as string!\n\n\n\n\n\n\n&gt; Try it yourself!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#type-conversion",
    "href": "part-01/lecture-presentation.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\n\n\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n\n\n\n\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-round-function",
    "href": "part-01/lecture-presentation.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n\n\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types."
  },
  {
    "objectID": "part-01/lecture-presentation.html#interesting-books-to-start",
    "href": "part-01/lecture-presentation.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture I - Introduction | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-01/lecture-introduction.html",
    "href": "part-01/lecture-introduction.html",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects\n\n\n\n\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python\n\n\n\n\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier\n\n\n\n\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together\n\n\n\n\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early\n\n\n\n\n\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!\n\n\n\n\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!\n\n\n\n\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation\n\n\n\n\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#about-me",
    "href": "part-01/lecture-introduction.html#about-me",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Post-doctoral researcher from the University of Hamburg\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#course-outline",
    "href": "part-01/lecture-introduction.html#course-outline",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Part I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#participation",
    "href": "part-01/lecture-introduction.html#participation",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Prequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel’s course\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#teaching",
    "href": "part-01/lecture-introduction.html#teaching",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Lecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#passing-the-course",
    "href": "part-01/lecture-introduction.html#passing-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Pass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve with Python\nYou can group up (3 students) and work together\nEach student group submits one solution together",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#solution",
    "href": "part-01/lecture-introduction.html#solution",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Provide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#difficulty-of-the-course",
    "href": "part-01/lecture-introduction.html#difficulty-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "We’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn first words\nLater, you’ll be able to apply the language and see results\nSimilar to learning a language: Practice, practice, practice!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-to-expect",
    "href": "part-01/lecture-introduction.html#what-to-expect",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Some investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completing the course, you will be able to read code\nand write your own program using Python\nThat’s quite something!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#goals-of-the-course",
    "href": "part-01/lecture-introduction.html#goals-of-the-course",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Essential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#python-as-language",
    "href": "part-01/lecture-introduction.html#python-as-language",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#help-from-ai",
    "href": "part-01/lecture-introduction.html#help-from-ai",
    "title": "Lecture I - Introduction",
    "section": "",
    "text": "You are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#analytics",
    "href": "part-01/lecture-introduction.html#analytics",
    "title": "Lecture I - Introduction",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#research",
    "href": "part-01/lecture-introduction.html#research",
    "title": "Lecture I - Introduction",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#visualization",
    "href": "part-01/lecture-introduction.html#visualization",
    "title": "Lecture I - Introduction",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#finance",
    "href": "part-01/lecture-introduction.html#finance",
    "title": "Lecture I - Introduction",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#logistics",
    "href": "part-01/lecture-introduction.html#logistics",
    "title": "Lecture I - Introduction",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#my-recommendation",
    "href": "part-01/lecture-introduction.html#my-recommendation",
    "title": "Lecture I - Introduction",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google/find help, modify, and solve problems on your own\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. In my opinion both are much more helpful than watching videos! You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#dont-give-up",
    "href": "part-01/lecture-introduction.html#dont-give-up",
    "title": "Lecture I - Introduction",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated too easily at the start!\nLearn something new: Expect to stretch your comfort zone",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#learning-path",
    "href": "part-01/lecture-introduction.html#learning-path",
    "title": "Lecture I - Introduction",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated with programming, read the following helpful blog post about the challenges on medium.com",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#errors",
    "href": "part-01/lecture-introduction.html#errors",
    "title": "Lecture I - Introduction",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form:\nhttps://tally.so/r/w7oapa",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#install-python",
    "href": "part-01/lecture-introduction.html#install-python",
    "title": "Lecture I - Introduction",
    "section": "Install Python",
    "text": "Install Python\n\nYou could download it from the Python website or with Anaconda\nBut I would recommend we start by installing Thonny\nIt is an open source IDE that runs on Windows, Linux and Mac\nIt comes with a built-in Python interpreter and package management!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-an-ide",
    "href": "part-01/lecture-introduction.html#what-is-an-ide",
    "title": "Lecture I - Introduction",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nAn IDE (Integrated Development Environment) is an application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python and aimed at beginners\nIt does not use the latest Python and has the most features\nBut it is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#thonny",
    "href": "part-01/lecture-introduction.html#thonny",
    "title": "Lecture I - Introduction",
    "section": "Thonny",
    "text": "Thonny\n\n\n\nFirst start of Thonny",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#python-on-ipads",
    "href": "part-01/lecture-introduction.html#python-on-ipads",
    "title": "Lecture I - Introduction",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, if you have no other option, you could use Pythonista\nIt works locally on your iPad and can run most Python scripts\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#first-start-of-pythonista",
    "href": "part-01/lecture-introduction.html#first-start-of-pythonista",
    "title": "Lecture I - Introduction",
    "section": "First start of Pythonista",
    "text": "First start of Pythonista\n\n\n\nFirst start of Pythonista",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world",
    "href": "part-01/lecture-introduction.html#hello-world",
    "title": "Lecture I - Introduction",
    "section": "Hello, World!",
    "text": "Hello, World!\nYour Task: Create a directory for the course and create a new file called hello_world.py with the following code and save it:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n. . .\nRun the code with the green ‘run’ button at the top or by going to the line and pressing Shift+Enter:\n. . .\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world-in-a-message",
    "href": "part-01/lecture-introduction.html#hello-world-in-a-message",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nYour Task: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n. . .\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n. . .\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-world-in-parentheses",
    "href": "part-01/lecture-introduction.html#hello-world-in-parentheses",
    "title": "Lecture I - Introduction",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string. We just have to be consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\nI shout \"Hello, World!\"\n\n\n. . .\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n. . .\n\nTry it yourself! What does happen, if you try to run this code?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#first-errors",
    "href": "part-01/lecture-introduction.html#first-errors",
    "title": "Lecture I - Introduction",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nThis is likely the most common error that you will encounter!\nIt happens when you make a mistake in your code, e.g., using an illegal character, missing a colon, parentheses or wrong quotations\nYou can fix this by correcting the code and re-running\nIn the course of the lecture you will encounter many more errors!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-a-program",
    "href": "part-01/lecture-introduction.html#what-is-a-program",
    "title": "Lecture I - Introduction",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nA sequence of instructions telling a computer what to do\nWritten in a programming language the computer can understand\nBasic operations in most languages:\n\nInput: Get data from keyboard, file, network, sensors, etc.\nOutput: Display data on screen, save to file, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#key-concepts",
    "href": "part-01/lecture-introduction.html#key-concepts",
    "title": "Lecture I - Introduction",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check conditions and execute accordingly\nLoops: Perform actions repeatedly, often with variations\nFunctions: Group instructions for reusability",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-python-executes-code",
    "href": "part-01/lecture-introduction.html#how-python-executes-code",
    "title": "Lecture I - Introduction",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#hello-again-world",
    "href": "part-01/lecture-introduction.html#hello-again-world",
    "title": "Lecture I - Introduction",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n. . .\n\nComment: In the first line we define a comment with #\n\nIt is not executed but used to explain what code does\n\nVariable: In the second line we define a variable message\n\nIt points to a string that contains the text “Hello, World!”\n\nFunction: In the third line we call a function print\n\nIt prints out whatever is stored in message",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#dont-worry",
    "href": "part-01/lecture-introduction.html#dont-worry",
    "title": "Lecture I - Introduction",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused?\nDon’t worry about it for now!\nWe’ll learn more about variables and functions later",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-zen-of-python",
    "href": "part-01/lecture-introduction.html#the-zen-of-python",
    "title": "Lecture I - Introduction",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python: A collection of 19 statements intended to communicate general principles\n\n\n# Try this code in Python to see the Zen of Python\nimport this",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#variables",
    "href": "part-01/lecture-introduction.html#variables",
    "title": "Lecture I - Introduction",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types before\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\nTime\n\n\n. . .\nBut there are certain rules to variable names!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#variable-naming-conventions",
    "href": "part-01/lecture-introduction.html#variable-naming-conventions",
    "title": "Lecture I - Introduction",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n. . .\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#functions",
    "href": "part-01/lecture-introduction.html#functions",
    "title": "Lecture I - Introduction",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n. . .\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe will cover functions in more detail later in the course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-are-values-and-types",
    "href": "part-01/lecture-introduction.html#what-are-values-and-types",
    "title": "Lecture I - Introduction",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nIt takes one argument (a value) and returns its type as string",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#strings",
    "href": "part-01/lecture-introduction.html#strings",
    "title": "Lecture I - Introduction",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n. . .\n\nResult: “Hello, World” is a string - in short ‘str’.\n. . .\nBut what about the f”?",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#formated-strings",
    "href": "part-01/lecture-introduction.html#formated-strings",
    "title": "Lecture I - Introduction",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions (here variables) in braces\nThey are evaluated at run time and inserted into the string\nThis is called interpolation\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\nHello, World! is a &lt;class 'str'&gt;",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#expressions",
    "href": "part-01/lecture-introduction.html#expressions",
    "title": "Lecture I - Introduction",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nprint(1 + 2) # Expression 1 + 2 produces the value 3\n\n3\n\n\n\nprint(\"The result is\", 1 + 2) # Expression embedded in a string\n\nThe result is 3\n\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Again, the result is {y}\")\n\nAgain, the result is 3",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-a-string",
    "href": "part-01/lecture-introduction.html#what-is-a-string",
    "title": "Lecture I - Introduction",
    "section": "What is a String?",
    "text": "What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nStrings are immutable, we can’t change single characters in them once they are created.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#string-operations",
    "href": "part-01/lecture-introduction.html#string-operations",
    "title": "Lecture I - Introduction",
    "section": "String Operations",
    "text": "String Operations\nBut we can also do much more with strings!\nE.g. string concatenation, indexing, slicing, length, repeat, etc.\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\nHello, World!\n\n\n. . .\n\nprint(two_strings[0]) # Indexing starts at zero!\n\nH\n\n\n. . .\n\nprint(two_strings[0:4]) # To slice we need to specify the start and end index (excluded)\n\nHell\n\n\n. . .\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n13\n\n\n. . .\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n--x----x----x--",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#booleans",
    "href": "part-01/lecture-introduction.html#booleans",
    "title": "Lecture I - Introduction",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n. . .\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\nTrue\n&lt;class 'bool'&gt;\n\n\n. . .\n&gt; More on them in our next lecture!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#integers-and-floats",
    "href": "part-01/lecture-introduction.html#integers-and-floats",
    "title": "Lecture I - Introduction",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: 2.5, -4.789123, 0.0 or 1.234e2\nBit size does not have to be specified (e.g.: 64 bits) in Python\n\n. . .\n\nx = 1\ny = 1.2864e2\nprint(f\"{x} is of type {type(x)}\")\nprint(f\"{y} is of type {type(y).__name__}\")\n\n1 is of type &lt;class 'int'&gt;\n128.64 is of type float\n\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#arithmetic-operators",
    "href": "part-01/lecture-introduction.html#arithmetic-operators",
    "title": "Lecture I - Introduction",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n. . .\n\n# We can separate multiple operations in one line with semicolons\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how the integers in the division are converted to floats before the division is performed.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#precedence",
    "href": "part-01/lecture-introduction.html#precedence",
    "title": "Lecture I - Introduction",
    "section": "Precedence",
    "text": "Precedence\n\nThe operators are the same as in most other languages\nThey can be combined with each other, and with variables\nNormal rules of precedence apply\n\n. . .\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n2 + 3 * 4 = 14\n\n\n. . .\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n(2 + 3) * 4 = 20",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-input-function",
    "href": "part-01/lecture-introduction.html#the-input-function",
    "title": "Lecture I - Introduction",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n. . .\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nThe function always returns the input as string!\n\n\n. . .\n\n&gt; Try it yourself!",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#type-conversion",
    "href": "part-01/lecture-introduction.html#type-conversion",
    "title": "Lecture I - Introduction",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\n\n. . .\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")\n\n. . .\n\n# Converting to Float\nheight = float(input(\"Enter your height in meters: \"))\nheight_in_cm = height * 100\nprint(f\"Your height in centimeters: {height_in_cm}\")",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#the-round-function",
    "href": "part-01/lecture-introduction.html#the-round-function",
    "title": "Lecture I - Introduction",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#interesting-books-to-start",
    "href": "part-01/lecture-introduction.html#interesting-books-to-start",
    "title": "Lecture I - Introduction",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction ",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-modules.html",
    "href": "part-06/lecture-modules.html",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Exceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n. . .\n\nx = int(\"Hello, World!\")\n\n. . .\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’\n\n\n\n\ntry-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n. . .\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ...\n\n\n\n\nWe can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n. . .\n\nraise ValueError(\"This is a custom error message\")\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe type if raised exception has to exist or you have to create a custom error type before.\n\n\n\n\n\n\nAssertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n. . .\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n. . .\nQuestion: Will this raise an AssertionError?\n\n\n\n\nDebugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThat’s why IDEs are so helpful in coding."
  },
  {
    "objectID": "part-06/lecture-modules.html#exceptions-and-error-handling",
    "href": "part-06/lecture-modules.html#exceptions-and-error-handling",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Exceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n. . .\n\nx = int(\"Hello, World!\")\n\n. . .\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’"
  },
  {
    "objectID": "part-06/lecture-modules.html#try-except-blocks",
    "href": "part-06/lecture-modules.html#try-except-blocks",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "try-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n. . .\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ..."
  },
  {
    "objectID": "part-06/lecture-modules.html#raising-exceptions",
    "href": "part-06/lecture-modules.html#raising-exceptions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "We can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n. . .\n\nraise ValueError(\"This is a custom error message\")\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe type if raised exception has to exist or you have to create a custom error type before."
  },
  {
    "objectID": "part-06/lecture-modules.html#assertions",
    "href": "part-06/lecture-modules.html#assertions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Assertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n. . .\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n. . .\nQuestion: Will this raise an AssertionError?"
  },
  {
    "objectID": "part-06/lecture-modules.html#debugging",
    "href": "part-06/lecture-modules.html#debugging",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "",
    "text": "Debugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThat’s why IDEs are so helpful in coding."
  },
  {
    "objectID": "part-06/lecture-modules.html#why-modules",
    "href": "part-06/lecture-modules.html#why-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Modules?",
    "text": "Why Modules?\n\nModular programming breaks large tasks into smaller subtasks\nModules are like building blocks for larger applications\nIndividual modules can be combined to create a complete program\nThis approach enhances code organization and reusability"
  },
  {
    "objectID": "part-06/lecture-modules.html#creating-modules",
    "href": "part-06/lecture-modules.html#creating-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Creating Modules",
    "text": "Creating Modules\n\nModules are simply .py files containing Python code\nThey can define functions, classes, and variables\nThey can be imported into other Python scripts\n\n\n# The script new_module.py is in the same directory as this script\nimport new_module # Here we import the module\nnew_module.my_function() # Here we call the function from the module\n\nHello from my_function!"
  },
  {
    "objectID": "part-06/lecture-modules.html#importing-functions-from-modules",
    "href": "part-06/lecture-modules.html#importing-functions-from-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing functions from modules",
    "text": "Importing functions from modules\n\nWe can also import specific functions from a module\nThis is useful if we only need a few functions from a module\nAnalogously, we can import classes or variables from a module\n\n. . .\n\n# Multiple imports from a module are possible as well!\nfrom new_module import another_function, yet_another_function\nanother_function()\nyet_another_function()\n\nHello from another_function!\nHello from yet_another_function!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is a good way to avoid importing too much from a module. In addition, we don’t need to use the module name before the function name when we use the functions from the module."
  },
  {
    "objectID": "part-06/lecture-modules.html#built-in-modules",
    "href": "part-06/lecture-modules.html#built-in-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Built-in Modules",
    "text": "Built-in Modules\nPython comes with many built-in modules. Common ones include:\n\n\n\nModule\nDescription\n\n\n\n\nmath\nDifferent mathematical functions\n\n\nrandom\nRandom number generation\n\n\ndatetime\nDate and time manipulation\n\n\nos\nOperating system interaction\n\n\ncsv\nReading and writing CSV files\n\n\nre\nRegular expression operations"
  },
  {
    "objectID": "part-06/lecture-modules.html#importing-from-the-standard-library",
    "href": "part-06/lecture-modules.html#importing-from-the-standard-library",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing from the Standard Library",
    "text": "Importing from the Standard Library\nTask: Use Python’s math module to calculate the area of a circle.\n\n# Import the `math` module.\n# Define a function named `calculate_area` that takes the radius `r` as an argument.\n# Inside the function, use the `math.pi` constant to get the value of π.\n# Calculate the area in the function and return it.\n\n# Your code here\n\nassert calculate_area(5) == 78.53981633974483\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNote, how assertations can be used to check if a function works correctly."
  },
  {
    "objectID": "part-06/lecture-modules.html#random-numbers",
    "href": "part-06/lecture-modules.html#random-numbers",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers",
    "text": "Random Numbers\nThe random module provides functions for random numbers\n\nrandom.random(): random float between 0 and 1\nrandom.uniform(a, b): random float between a and b\nrandom.randint(a, b): random integer between a and b\nrandom.choice(list): random element from a list\nrandom.shuffle(list): shuffle a list\n\n\n\n\n\n\n\nTip\n\n\n\nThere are many more functions in the random module. Use the help() function to get more information about a module or function."
  },
  {
    "objectID": "part-06/lecture-modules.html#random-numbers-in-action",
    "href": "part-06/lecture-modules.html#random-numbers-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers in Action",
    "text": "Random Numbers in Action\nTask: Time for a task! Import the random module and create a small number guessing game with the following requirements:\n\n# Generate a random integer between 1 and 10 using randint().\n# Ask the user to guess the number with input().\n# Print whether the guess was correct.\n# Give a hint if the guess was too high or too low.\n# Repeat the game until the user guesses the number.\n\n# Your code here\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nRemember, that the input function always returns a string!"
  },
  {
    "objectID": "part-06/lecture-modules.html#os-module",
    "href": "part-06/lecture-modules.html#os-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS Module",
    "text": "OS Module\n\nThe os module provides functions to interact with the OS\nos.listdir(path): list all files and directories in a directory\nos.path.isfile(path): check if a path is a file\nos.path.isdir(path): check if a path is a directory\nos.mkdir(path): create a directory\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThese can be quite useful for file handling. The os module contains many more functions, e.g. for changing the current working directory, for renaming and moving files, etc."
  },
  {
    "objectID": "part-06/lecture-modules.html#csv-module",
    "href": "part-06/lecture-modules.html#csv-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "CSV Module",
    "text": "CSV Module\n\nComma-Separated Values files are used to store tabular data\nWrite: csv.writer(file)\nRead: csv.reader(file)\n\n. . .\n\nimport csv # Import the csv module\n\nwith open('secret_message.csv', 'w') as file: # Open the file in write mode\n    writer = csv.writer(file) # Create a writer object\n    writer.writerow(['Entry', 'Message']) # Write the header\n    writer.writerow(['1', 'Do not open the file']) # Write the first row\n    writer.writerow(['2', 'This is a secret message']) # Write the second row\n\n. . .\nTask: Copy the code and run it. Do you have a new file?"
  },
  {
    "objectID": "part-06/lecture-modules.html#what-are-regular-expressions",
    "href": "part-06/lecture-modules.html#what-are-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Regular Expressions?",
    "text": "What are Regular Expressions?\n\nRegular expressions are a way to search for patterns in text\nThey are a useful tool for string manipulation\nWe can use the re module to work with regular expressions\n\n. . .\n\nimport re\npattern = r'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(re.search(pattern, string)) # This will search for the pattern in the string\n\n&lt;re.Match object; span=(7, 12), match='World'&gt;\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nSo far, we could also have achieved this with the find method of a string."
  },
  {
    "objectID": "part-06/lecture-modules.html#why-regular-expressions",
    "href": "part-06/lecture-modules.html#why-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Regular Expressions?",
    "text": "Why Regular Expressions?\n\nimport re\npattern = 'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(string.find(pattern)) # No regular expressions here!\n\n7\n\n\n. . .\n\nBut regular expressions are more powerful and flexible\nThey have special characters that allow for complex patterns\nThey are widely used in text processing and web scraping"
  },
  {
    "objectID": "part-06/lecture-modules.html#using-regular-expressions",
    "href": "part-06/lecture-modules.html#using-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Using Regular Expressions",
    "text": "Using Regular Expressions\n\nre.search(pat, str): search for a pattern in a string\nre.findall(pat, str): find all occurrences of a pattern\nre.fullmatch(pat, str): check if entire string matches pattern\nre.sub(pat, repl, str): replace a pattern in a string\nre.split(pat, str): split a string by a pattern\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAs always, there is more. But these are a good foundation to build upon."
  },
  {
    "objectID": "part-06/lecture-modules.html#regular-expression-in-action",
    "href": "part-06/lecture-modules.html#regular-expression-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Regular Expression in Action",
    "text": "Regular Expression in Action\nTask: Replace all occurences of Python by “SECRET”.\n\nimport re\nstring = \"\"\"\nPython is a programming language. \nPython is also a snake. \nMonty Python was a theater group.\n\"\"\"\n# Your code here\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nRegular expressions are even more powerful when combined with special characters."
  },
  {
    "objectID": "part-06/lecture-modules.html#special-characters-i",
    "href": "part-06/lecture-modules.html#special-characters-i",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters I",
    "text": "Special Characters I\n\n. matches any character\n* matches zero or more of the preceding element\n+ matches one or more of the preceding element\n? matches zero or one of the preceding element\n[] matches any character in the brackets\n| matches either the left or the right side\n\\d matches any digit\n\\w matches any word character (alphanumeric and underscore)\n\\s matches any whitespace character"
  },
  {
    "objectID": "part-06/lecture-modules.html#special-characters-ii",
    "href": "part-06/lecture-modules.html#special-characters-ii",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters II",
    "text": "Special Characters II\n\nThere are many more special characters in regular expressions\nIn order to keep things simple, we will not cover them here\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIt can be quite complicated to get the hang of these special characters, especially at the beginning. Gladly, there are tools like regexr.com that can help with building the right pattern. Apart from that, help(re) in the terminal can also be very helpful."
  },
  {
    "objectID": "part-06/lecture-modules.html#advanced-regular-expressions-in-action",
    "href": "part-06/lecture-modules.html#advanced-regular-expressions-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Advanced Regular Expressions in Action",
    "text": "Advanced Regular Expressions in Action\nTask: Use regular expressions to extract all dates from the text.\n\ndates = \"\"\"\nOn 07-04-1776, the United States declared its independence. Many years later, \non 11-09-1989, the Berlin Wall fell. In more recent history, the COVID-19 \npandemic was declared a global emergency on 04-11-2020.\n\"\"\"\n# Try to find all dates in the above text with findall()\n# Your code here"
  },
  {
    "objectID": "part-06/lecture-modules.html#what-are-packages",
    "href": "part-06/lecture-modules.html#what-are-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Packages?",
    "text": "What are Packages?\n\nPackages are esentially collections of modules\nThey can contain multiple modules, subpackages, and data files\nMany packages are available in the Python Package Index (PyPI)\nYou don’t have to invent the wheel yourself\nA lot of functionality is already implemented by others!"
  },
  {
    "objectID": "part-06/lecture-modules.html#installing-packages",
    "href": "part-06/lecture-modules.html#installing-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nPackages are installed in the shell\nUse pip install &lt;package_name&gt; to install a specific package\nAfterward you can import from the package in your Python scripts\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWith Thonny you can install packages directly in the IDE. Simply click on Tools -&gt; Manage packages and search for the package you want to install."
  },
  {
    "objectID": "part-06/lecture-modules.html#virtual-environments",
    "href": "part-06/lecture-modules.html#virtual-environments",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Virtual Environments",
    "text": "Virtual Environments\n\nVirtual environments are used to manage dependencies\nThey allow you to have different environments for projects\nThey can be created using the venv module\nThis becomes important if you work on several projects at once\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have completed the first step into data science in Python. Next week, we can use this new knowledge to start to work with some tabular data and matrices."
  },
  {
    "objectID": "part-06/lecture-modules.html#interesting-books",
    "href": "part-06/lecture-modules.html#interesting-books",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNothing new here, but these are still great books!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#exceptions-and-error-handling",
    "href": "part-06/lecture-modules-presentation.html#exceptions-and-error-handling",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Exceptions and Error Handling",
    "text": "Exceptions and Error Handling\n\nExceptions are discovered errors during program execution\nCommon built-in exceptions: ValueError, TypeError, etc.\n\n\n\nx = int(\"Hello, World!\")\n\n\n\n&gt;ValueError: invalid literal for int() with base 10: ‘Hello, World!’"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#try-except-blocks",
    "href": "part-06/lecture-modules-presentation.html#try-except-blocks",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Try-Except Blocks",
    "text": "Try-Except Blocks\n\ntry-except blocks are used to handle exceptions\ntry block contains code that might raise an exception\nexcept block contains code executed if an exception occurs\n\n\ntry:\n    # Code that might raise an exception\n    # ...\nexcept ExceptionType as e:\n    # Code to handle the exception\n    # ...\nexcept:\n    # Code to handle any other exceptions\n    # ..."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#raising-exceptions",
    "href": "part-06/lecture-modules-presentation.html#raising-exceptions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Raising Exceptions",
    "text": "Raising Exceptions\n\nWe can raise exceptions using the raise statement\nAllows for more controlled error handling\nCan include custom error messages\n\n\n\nraise ValueError(\"This is a custom error message\")\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe type if raised exception has to exist or you have to create a custom error type before."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#assertions",
    "href": "part-06/lecture-modules-presentation.html#assertions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Assertions",
    "text": "Assertions\n\nAssertions check if a condition is true\nIf the condition is false, an AssertionError is raised\nUseful for checking calculations or variable types\n\n\n\nx = -1\nassert x &gt; 0, \"x must be positive\"\n\n\n\nQuestion: Will this raise an AssertionError?"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#debugging",
    "href": "part-06/lecture-modules-presentation.html#debugging",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Debugging",
    "text": "Debugging\n\nDebugging is the process of finding and fixing errors in code\nUsing print and assert statements\nUsing logging\nUsing built-in debugging tools in IDEs\n\n\n\n\n\n\n\n\nTip\n\n\nThat’s why IDEs are so helpful in coding."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#why-modules",
    "href": "part-06/lecture-modules-presentation.html#why-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Modules?",
    "text": "Why Modules?\n\nModular programming breaks large tasks into smaller subtasks\nModules are like building blocks for larger applications\nIndividual modules can be combined to create a complete program\nThis approach enhances code organization and reusability"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#creating-modules",
    "href": "part-06/lecture-modules-presentation.html#creating-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Creating Modules",
    "text": "Creating Modules\n\nModules are simply .py files containing Python code\nThey can define functions, classes, and variables\nThey can be imported into other Python scripts\n\n\n# The script new_module.py is in the same directory as this script\nimport new_module # Here we import the module\nnew_module.my_function() # Here we call the function from the module\n\n\n\nHello from my_function!"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#importing-functions-from-modules",
    "href": "part-06/lecture-modules-presentation.html#importing-functions-from-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing functions from modules",
    "text": "Importing functions from modules\n\nWe can also import specific functions from a module\nThis is useful if we only need a few functions from a module\nAnalogously, we can import classes or variables from a module\n\n\n\n# Multiple imports from a module are possible as well!\nfrom new_module import another_function, yet_another_function\nanother_function()\nyet_another_function()\n\n\n\nHello from another_function!\nHello from yet_another_function!\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThis is a good way to avoid importing too much from a module. In addition, we don’t need to use the module name before the function name when we use the functions from the module."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#built-in-modules",
    "href": "part-06/lecture-modules-presentation.html#built-in-modules",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Built-in Modules",
    "text": "Built-in Modules\nPython comes with many built-in modules. Common ones include:\n\n\n\nModule\nDescription\n\n\n\n\nmath\nDifferent mathematical functions\n\n\nrandom\nRandom number generation\n\n\ndatetime\nDate and time manipulation\n\n\nos\nOperating system interaction\n\n\ncsv\nReading and writing CSV files\n\n\nre\nRegular expression operations"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#importing-from-the-standard-library",
    "href": "part-06/lecture-modules-presentation.html#importing-from-the-standard-library",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Importing from the Standard Library",
    "text": "Importing from the Standard Library\nTask: Use Python’s math module to calculate the area of a circle.\n\n# Import the `math` module.\n# Define a function named `calculate_area` that takes the radius `r` as an argument.\n# Inside the function, use the `math.pi` constant to get the value of π.\n# Calculate the area in the function and return it.\n\n# Your code here\n\nassert calculate_area(5) == 78.53981633974483\n\n\n\n\n\n\n\n\nTip\n\n\nNote, how assertations can be used to check if a function works correctly."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#random-numbers",
    "href": "part-06/lecture-modules-presentation.html#random-numbers",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers",
    "text": "Random Numbers\nThe random module provides functions for random numbers\n\nrandom.random(): random float between 0 and 1\nrandom.uniform(a, b): random float between a and b\nrandom.randint(a, b): random integer between a and b\nrandom.choice(list): random element from a list\nrandom.shuffle(list): shuffle a list\n\n\n\n\n\n\n\nTip\n\n\nThere are many more functions in the random module. Use the help() function to get more information about a module or function."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#random-numbers-in-action",
    "href": "part-06/lecture-modules-presentation.html#random-numbers-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Random Numbers in Action",
    "text": "Random Numbers in Action\nTask: Time for a task! Import the random module and create a small number guessing game with the following requirements:\n\n# Generate a random integer between 1 and 10 using randint().\n# Ask the user to guess the number with input().\n# Print whether the guess was correct.\n# Give a hint if the guess was too high or too low.\n# Repeat the game until the user guesses the number.\n\n# Your code here\n\n\n\n\n\n\n\n\nTip\n\n\nRemember, that the input function always returns a string!"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#os-module",
    "href": "part-06/lecture-modules-presentation.html#os-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "OS Module",
    "text": "OS Module\n\nThe os module provides functions to interact with the OS\nos.listdir(path): list all files and directories in a directory\nos.path.isfile(path): check if a path is a file\nos.path.isdir(path): check if a path is a directory\nos.mkdir(path): create a directory\n\n\n\n\n\n\n\n\nTip\n\n\nThese can be quite useful for file handling. The os module contains many more functions, e.g. for changing the current working directory, for renaming and moving files, etc."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#csv-module",
    "href": "part-06/lecture-modules-presentation.html#csv-module",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "CSV Module",
    "text": "CSV Module\n\nComma-Separated Values files are used to store tabular data\nWrite: csv.writer(file)\nRead: csv.reader(file)\n\n\n\nimport csv # Import the csv module\n\nwith open('secret_message.csv', 'w') as file: # Open the file in write mode\n    writer = csv.writer(file) # Create a writer object\n    writer.writerow(['Entry', 'Message']) # Write the header\n    writer.writerow(['1', 'Do not open the file']) # Write the first row\n    writer.writerow(['2', 'This is a secret message']) # Write the second row\n\n\n\nTask: Copy the code and run it. Do you have a new file?"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#what-are-regular-expressions",
    "href": "part-06/lecture-modules-presentation.html#what-are-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Regular Expressions?",
    "text": "What are Regular Expressions?\n\nRegular expressions are a way to search for patterns in text\nThey are a useful tool for string manipulation\nWe can use the re module to work with regular expressions\n\n\n\nimport re\npattern = r'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(re.search(pattern, string)) # This will search for the pattern in the string\n\n\n\n&lt;re.Match object; span=(7, 12), match='World'&gt;\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nSo far, we could also have achieved this with the find method of a string."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#why-regular-expressions",
    "href": "part-06/lecture-modules-presentation.html#why-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Why Regular Expressions?",
    "text": "Why Regular Expressions?\n\nimport re\npattern = 'World' # This is the pattern we are searching for\nstring = 'Hello, World!' # This is the string we are searching in\nprint(string.find(pattern)) # No regular expressions here!\n\n\n\n7\n\n\n\n\nBut regular expressions are more powerful and flexible\nThey have special characters that allow for complex patterns\nThey are widely used in text processing and web scraping"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#using-regular-expressions",
    "href": "part-06/lecture-modules-presentation.html#using-regular-expressions",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Using Regular Expressions",
    "text": "Using Regular Expressions\n\nre.search(pat, str): search for a pattern in a string\nre.findall(pat, str): find all occurrences of a pattern\nre.fullmatch(pat, str): check if entire string matches pattern\nre.sub(pat, repl, str): replace a pattern in a string\nre.split(pat, str): split a string by a pattern\n\n\n\n\n\n\n\n\nNote\n\n\nAs always, there is more. But these are a good foundation to build upon."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#regular-expression-in-action",
    "href": "part-06/lecture-modules-presentation.html#regular-expression-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Regular Expression in Action",
    "text": "Regular Expression in Action\nTask: Replace all occurences of Python by “SECRET”.\n\nimport re\nstring = \"\"\"\nPython is a programming language. \nPython is also a snake. \nMonty Python was a theater group.\n\"\"\"\n# Your code here\n\n\n\n\n\n\n\n\nNote\n\n\nRegular expressions are even more powerful when combined with special characters."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#special-characters-i",
    "href": "part-06/lecture-modules-presentation.html#special-characters-i",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters I",
    "text": "Special Characters I\n\n. matches any character\n* matches zero or more of the preceding element\n+ matches one or more of the preceding element\n? matches zero or one of the preceding element\n[] matches any character in the brackets\n| matches either the left or the right side\n\\d matches any digit\n\\w matches any word character (alphanumeric and underscore)\n\\s matches any whitespace character"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#special-characters-ii",
    "href": "part-06/lecture-modules-presentation.html#special-characters-ii",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Special Characters II",
    "text": "Special Characters II\n\nThere are many more special characters in regular expressions\nIn order to keep things simple, we will not cover them here\n\n\n\n\n\n\n\n\nTip\n\n\nIt can be quite complicated to get the hang of these special characters, especially at the beginning. Gladly, there are tools like regexr.com that can help with building the right pattern. Apart from that, help(re) in the terminal can also be very helpful."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#advanced-regular-expressions-in-action",
    "href": "part-06/lecture-modules-presentation.html#advanced-regular-expressions-in-action",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Advanced Regular Expressions in Action",
    "text": "Advanced Regular Expressions in Action\nTask: Use regular expressions to extract all dates from the text.\n\ndates = \"\"\"\nOn 07-04-1776, the United States declared its independence. Many years later, \non 11-09-1989, the Berlin Wall fell. In more recent history, the COVID-19 \npandemic was declared a global emergency on 04-11-2020.\n\"\"\"\n# Try to find all dates in the above text with findall()\n# Your code here"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#what-are-packages",
    "href": "part-06/lecture-modules-presentation.html#what-are-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "What are Packages?",
    "text": "What are Packages?\n\nPackages are esentially collections of modules\nThey can contain multiple modules, subpackages, and data files\nMany packages are available in the Python Package Index (PyPI)\nYou don’t have to invent the wheel yourself\nA lot of functionality is already implemented by others!"
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#installing-packages",
    "href": "part-06/lecture-modules-presentation.html#installing-packages",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nPackages are installed in the shell\nUse pip install &lt;package_name&gt; to install a specific package\nAfterward you can import from the package in your Python scripts\n\n\n\n\n\n\n\n\nTip\n\n\nWith Thonny you can install packages directly in the IDE. Simply click on Tools -&gt; Manage packages and search for the package you want to install."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#virtual-environments",
    "href": "part-06/lecture-modules-presentation.html#virtual-environments",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Virtual Environments",
    "text": "Virtual Environments\n\nVirtual environments are used to manage dependencies\nThey allow you to have different environments for projects\nThey can be created using the venv module\nThis becomes important if you work on several projects at once\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have completed the first step into data science in Python. Next week, we can use this new knowledge to start to work with some tabular data and matrices."
  },
  {
    "objectID": "part-06/lecture-modules-presentation.html#interesting-books",
    "href": "part-06/lecture-modules-presentation.html#interesting-books",
    "title": "Lecture VI - Using Modules and Packages",
    "section": "Interesting Books",
    "text": "Interesting Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nTip\n\n\nNothing new here, but these are still great books!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture VI - Using Modules and Packages | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment II",
    "section": "",
    "text": "Nothing here yet. Please check back later, after the first assignment is available.",
    "crumbs": [
      "Assignments",
      "02 Assignment"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, I haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of Python programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "part-02/lecture-control.html",
    "href": "part-02/lecture-control.html",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new).\n\n\n\n\n\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool\n\n\n\n\n\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings.\n\n\n\n\n\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-control.html#f-strings",
    "href": "part-02/lecture-control.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "F-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n. . .\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new)."
  },
  {
    "objectID": "part-02/lecture-control.html#variables-and-data-types",
    "href": "part-02/lecture-control.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Python uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n. . .\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators",
    "href": "part-02/lecture-control.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Addition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "href": "part-02/lecture-control.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "",
    "text": "Additional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n. . .\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-control.html#objects",
    "href": "part-02/lecture-control.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "part-02/lecture-control.html#methods",
    "href": "part-02/lecture-control.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods",
    "href": "part-02/lecture-control.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "part-02/lecture-control.html#string-methods-in-action",
    "href": "part-02/lecture-control.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "part-02/lecture-control.html#string-task",
    "href": "part-02/lecture-control.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-control.html#indexing",
    "href": "part-02/lecture-control.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n. . .\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\nH\n!"
  },
  {
    "objectID": "part-02/lecture-control.html#slicing",
    "href": "part-02/lecture-control.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\nWorld\nWorld"
  },
  {
    "objectID": "part-02/lecture-control.html#slicing-simplified",
    "href": "part-02/lecture-control.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n. . .\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "part-02/lecture-control.html#slicing-string-task",
    "href": "part-02/lecture-control.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-control.html#comparison-operators",
    "href": "part-02/lecture-control.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n. . .\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-02/lecture-control.html#logical-operators",
    "href": "part-02/lecture-control.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n. . .\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\nTrue\nTrue\nTrue\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "part-02/lecture-control.html#membership-operators",
    "href": "part-02/lecture-control.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n. . .\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\nTrue\nFalse\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "part-02/lecture-control.html#control-structures-1",
    "href": "part-02/lecture-control.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n. . .\n&gt; Question: What do you think each of the above does?"
  },
  {
    "objectID": "part-02/lecture-control.html#indentation",
    "href": "part-02/lecture-control.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability."
  },
  {
    "objectID": "part-02/lecture-control.html#conditional-statements-1",
    "href": "part-02/lecture-control.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the and and or operators to combine multiple conditions."
  },
  {
    "objectID": "part-02/lecture-control.html#if-statements",
    "href": "part-02/lecture-control.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThe condition is True!\nThis will always be printed!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\nThis will always be printed!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWriting if condition: is equivalent to if condition == True:"
  },
  {
    "objectID": "part-02/lecture-control.html#else-statements",
    "href": "part-02/lecture-control.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is True!\n\n\n. . .\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\nThe condition is False!"
  },
  {
    "objectID": "part-02/lecture-control.html#elif-statements",
    "href": "part-02/lecture-control.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is greater than 10!\n\n\n. . .\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\nThe temperature is equal to 10!"
  },
  {
    "objectID": "part-02/lecture-control.html#comparisons-and-conditional-statements",
    "href": "part-02/lecture-control.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\nYou are the chosen one still visiting school!"
  },
  {
    "objectID": "part-02/lecture-control.html#loops-1",
    "href": "part-02/lecture-control.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together."
  },
  {
    "objectID": "part-02/lecture-control.html#for-loops",
    "href": "part-02/lecture-control.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n0\n2\n4\n6\n8\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThe range() function can take up to three arguments: start, stop, and step.\n\n\n. . ."
  },
  {
    "objectID": "part-02/lecture-control.html#for-loops-with-strings",
    "href": "part-02/lecture-control.html#for-loops-with-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with Strings",
    "text": "for-loops with Strings\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na"
  },
  {
    "objectID": "part-02/lecture-control.html#while-loops",
    "href": "part-02/lecture-control.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n0\n1\n2\n3\n4\n\n\n. . .\n&gt; Question: What could be an issue with poorly written while-loops?"
  },
  {
    "objectID": "part-02/lecture-control.html#while-true",
    "href": "part-02/lecture-control.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"
  },
  {
    "objectID": "part-02/lecture-control.html#importance-of-control-flow",
    "href": "part-02/lecture-control.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  },
  {
    "objectID": "part-02/lecture-control.html#loop-task",
    "href": "part-02/lecture-control.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Grouptask: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100\nnumber = 0\n# Your code here\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-02/lecture-control.html#interesting-books-to-start",
    "href": "part-02/lecture-control.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNothing new here, but these are still great books to start with!\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#f-strings",
    "href": "part-02/lecture-control-presentation.html#f-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "F-Strings",
    "text": "F-Strings\n\nF-strings provide a way to embed expressions inside string literals\nYou can include expressions by placing them inside curly braces {}\nThis makes it easier to include dynamic content\n\n\n\n# Let's illustrate f-strings with a small example:\nname = \"Mr. Smith\"\nage = 30\nheight = 1.826549\nprint(f\"My name is {name}, I'm {age} years old, and {height:.2f} meters tall.\")\n\n\n\nMy name is Mr. Smith, I'm 30 years old, and 1.83 meters tall.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWe used the :.2f format specifier to round the number to two decimal places (new)."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#variables-and-data-types",
    "href": "part-02/lecture-control-presentation.html#variables-and-data-types",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nPython uses dynamic typing, i.e. the type is determined at runtime\nBasic data types in Python are: int, float, str, bool\nVariables are created by assignment with the = operator\n\n\n&gt; Question: What are the types of y, z, w?\n\ny = 2.5\nz = \"Hello\"\nw = True\nprint(f\"y is of type {type(y).__name__}\")\nprint(f\"z is of type {type(z).__name__}\")\nprint(f\"w is of type {type(w).__name__}\")\n\n\n\ny is of type float\nz is of type str\nw is of type bool"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#arithmetic-operators",
    "href": "part-02/lecture-control-presentation.html#arithmetic-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\nAddition\nSubtraction\nMultiplication\nDivision\nFloor Division\nExponentiation\nModulo\n\n+\n-\n*\n/\n//\n**\n%\n\nAdds two numbers\nSubtracts one number from another\nMultiplies two numbers\nFloating-point division\nInteger division\nPower of\nRemainder of division\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that the / operator always returns a float, even if the division is even. Furthermore, the + operator can be used to concatenate strings and that the * operator can be used to repeat strings."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#arithmetic-operators-with-variables",
    "href": "part-02/lecture-control-presentation.html#arithmetic-operators-with-variables",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Arithmetic Operators with Variables",
    "text": "Arithmetic Operators with Variables\n\nAdditional operators can update the value of a variable (new)\nWe can use +=, -=, *=, /=, //=, **=, %=\n\n\n&gt; Question: What is the value of x after the operations?\n\nx = 10\nprint(f\"Initial value of x: {x}\")\nx += 5  # Equivalent to x = x + 5\nprint(f\"After x += 5: {x}\")\nx *= 2  # Equivalent to x = x * 2\nprint(f\"After x *= 2: {x}\")\nx %= 4  # Equivalent to x = x % 4\nprint(f\"After x %= 4: {x}\")\n\n\n\nInitial value of x: 10\nAfter x += 5: 15\nAfter x *= 2: 30\nAfter x %= 4: 2"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#objects",
    "href": "part-02/lecture-control-presentation.html#objects",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Objects",
    "text": "Objects\n\nObjects are instances of classes\nWe will learn more about classes later in the course\nIn Python, virtually everything is an object\nCommon built-in objects: integers, strings, lists, dictionaries\nFor now, think of objects as a collection of data and methods\n\n\n\n\n\n\n\n\nNote\n\n\nFor most programming purposes, you can treat everything in Python as an object. This means you can assign all types to variables, pass them to functions, and in many cases, call methods on them."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#methods",
    "href": "part-02/lecture-control-presentation.html#methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Methods",
    "text": "Methods\n\nMethods are functions that are called on an object\nThe syntax is object.method([arguments])\nMethods are specific to the type of object they’re called on\nThey can modify the object or return information about it\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the dir() function to list all methods and attributes of an object."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#string-methods",
    "href": "part-02/lecture-control-presentation.html#string-methods",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods",
    "text": "String Methods\nHere are some commonly used string methods:\n\nupper(): Converts all characters in the string to uppercase\nlower(): Converts all characters in the string to lowercase\ntitle(): Converts first character of each word to uppercase\nstrip(): Removes leading and trailing whitespace\nreplace(): Replaces a substring with another substring\nfind(): Finds first substring and returns its index\ncount(): Counts the number of occurrences of a substring"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#string-methods-in-action",
    "href": "part-02/lecture-control-presentation.html#string-methods-in-action",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Methods in Action",
    "text": "String Methods in Action\n&gt; Question: What will be the output of the following code?\n\nmessage = \"Hello, World!\"\nprint(message.upper())  # Converts to uppercase\nprint(message.lower())  # Converts to lowercase\nprint(message.title())  # Converts to title case\nprint(message.replace(\"World\", \"Python\"))  # Replaces \"World\" with \"Python\"\nprint(message.find(\"World\"))  # Finds \"World\" and returns its index\nprint(message.count(\"o\"))  # Counts the number of occurrences of \"o\"\n\n\n\nHELLO, WORLD!\nhello, world!\nHello, World!\nHello, Python!\n7\n2\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, how replace() does not modify the original string. Instead, it returns a new string."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#string-task",
    "href": "part-02/lecture-control-presentation.html#string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "String Task",
    "text": "String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Change the following message to get the desired output\nmessage = \" the snake programmer. \"\n# Your code here\n\noutput = \"The Python Programmer.\"\n\n\n\n\n\n\n\n\nTip\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#indexing",
    "href": "part-02/lecture-control-presentation.html#indexing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indexing",
    "text": "Indexing\n\nWe have used indexing to access elements of a string last lecture\nIt allows you to access elements of a sequence by position\nPositive indexing starts at 0 for the first element\nNegative indexing starts at -1 for the last element (new)\n\n\n\nstring_to_index = \"Hello, World!\"\nprint(string_to_index[0])  # Accessing the first character\nprint(string_to_index[-1]) # Accessing the last character\n\n\n\nH\n!"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#slicing",
    "href": "part-02/lecture-control-presentation.html#slicing",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing",
    "text": "Slicing\n\nSlicing allows you to extract a portion of a sequence\nSyntax: sequence[start:stop:step]\nstart is the index of the first element to include\nstop is the index of the first element to exclude\nstep is the increment between indices (default is 1)\nThe result is a new sequence containing the extracted elements\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[7:12])   # Accessing the last five characters from the start\nprint(string_to_slice[-6:-1])  # Accessing the last five characters from the end\n\n\n\nWorld\nWorld"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#slicing-simplified",
    "href": "part-02/lecture-control-presentation.html#slicing-simplified",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing Simplified",
    "text": "Slicing Simplified\n\nIf we omit start or stop, it will be replaced by the start or end of the sequence, respectively\nIf we omit step, it will be replaced by 1\n\n\n\nstring_to_slice = \"Hello, World!\"\nprint(string_to_slice[::2])   # Accessing every second character\nprint(string_to_slice[::-1])  # Accessing the string in reverse\n\n\n\nHlo ol!\n!dlroW ,olleH"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#slicing-string-task",
    "href": "part-02/lecture-control-presentation.html#slicing-string-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Slicing String Task",
    "text": "Slicing String Task\n&gt; Grouptask: Discuss and implement the following task:\n\n# Slice the following message to create the described output\nmessage = \"y6S0-teru89d23e'.n*ut\"\n# Your code here\n\noutput = \"Student\"\n\n\n\n\n\n\n\n\nTip\n\n\nRemember, that these methods return a new string. The original string is not modified."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#comparison-operators",
    "href": "part-02/lecture-control-presentation.html#comparison-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nComparison operators are used to compare two values\nThe result of a comparison is a boolean value (True or False)\n\n\n&gt; Question: What will be the output of the following code?\n\nlower_number = 2; upper_number = 9\nprint(lower_number == upper_number) # Equality\nprint(lower_number != upper_number) # Inequality\nprint(lower_number &gt; upper_number) # Greater than\nprint(lower_number &lt; upper_number) # Less than\nprint(lower_number &gt;= upper_number) # Greater than or equal to\nprint(lower_number &lt;= upper_number) # Less than or equal to \n\n\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#logical-operators",
    "href": "part-02/lecture-control-presentation.html#logical-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nLogical operators combine multiple comparison operators\nCommon logical operators: and, or, not\n\n\n&gt; Question: Which of the following expressions is True?\n\nlower_number = 2; middle_number = 5; upper_number = 9; \nprint(lower_number &lt; middle_number and middle_number &lt; upper_number) # and\nprint(lower_number &lt; middle_number or middle_number &gt; upper_number) # or\nprint(lower_number == lower_number and not lower_number &gt; middle_number) # not\n\n\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that and and or are evaluated from left to right."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#membership-operators",
    "href": "part-02/lecture-control-presentation.html#membership-operators",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Membership Operators",
    "text": "Membership Operators\n\nUsed to check if a value is present in a sequence\nCommon membership operators: in, not in\n\n\n&gt; Question: Which of these expressions is True?\n\nan_apple = \"apple\"\nprint(\"a\" in an_apple) # Check if \"a\" is in the string \"apple\"\nprint(\"pp\" not in an_apple) # Check if \"pp\" is not in the string\n\n\n\nTrue\nFalse\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nNote, that in and not in can be used for strings, lists, tuples, sets, and dictionaries. Don’t worry! We will learn about lists, tuples, sets, and dictionaries later in the course."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#control-structures-1",
    "href": "part-02/lecture-control-presentation.html#control-structures-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Control Structures",
    "text": "Control Structures\n\nUsed to control the flow of execution in a program\nThey can be used to make decisions and repeat code blocks\nif, elif, else, for, while, break, continue\n\n\n&gt; Question: What do you think each of the above does?"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#indentation",
    "href": "part-02/lecture-control-presentation.html#indentation",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Indentation",
    "text": "Indentation\n\nIndentation is crucial in Python!\nIt is used to indicate the block of code that belongs to the structure\nThe standard indentation is 4 spaces\nYou can use tabs, but you should be careful with that\n\n\n\n\n\n\n\n\nWarning\n\n\nMixing tabs and spaces can cause errors that are difficult to debug. The Python style guide (PEP 8) recommends using 4 spaces per indentation level for consistency and readability."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#conditional-statements-1",
    "href": "part-02/lecture-control-presentation.html#conditional-statements-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nThey are used to execute different blocks of code based on whether a condition is true or false:\n\nif statements execute a block of code if a condition is True\nelif statements execute a block of code if the previous condition is False and the current condition is True\nelse statements execute a block of code if the previous conditions are False\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the and and or operators to combine multiple conditions."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#if-statements",
    "href": "part-02/lecture-control-presentation.html#if-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "if-statements",
    "text": "if-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThe condition is True!\nThis will always be printed!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nprint(\"This will always be printed!\")\n\n\n\nThis will always be printed!\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWriting if condition: is equivalent to if condition == True:"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#else-statements",
    "href": "part-02/lecture-control-presentation.html#else-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "else-statements",
    "text": "else-statements\n\ncondition = True\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is True!\n\n\n\n\ncondition = False\nif condition:\n    print(\"The condition is True!\") # Code block to execute if condition is True\nelse:\n    print(\"The condition is False!\") # Code block to execute if condition is False\n\n\n\nThe condition is False!"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#elif-statements",
    "href": "part-02/lecture-control-presentation.html#elif-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "elif-statements",
    "text": "elif-statements\n\ntemperature = 11\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is greater than 10!\n\n\n\n\ntemperature = 10\nif temperature &gt; 10:\n    print(\"The temperature is greater than 10!\")\nelif temperature == 10:\n    print(\"The temperature is equal to 10!\")\nelse:\n    print(\"The temperature is less than 10!\")\n\n\n\nThe temperature is equal to 10!"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#comparisons-and-conditional-statements",
    "href": "part-02/lecture-control-presentation.html#comparisons-and-conditional-statements",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Comparisons and Conditional Statements",
    "text": "Comparisons and Conditional Statements\n&gt; Question: What will be the output of the following code?\n\nname = \"Harry\"\nprofession = \"wizard\"\nage = 16\nif name == \"Harry\" and profession == \"wizard\" and age &lt; 18:\n    print(\"You are the chosen one still visiting school!\")\nelif name == \"Harry\" and profession == \"wizard\" and age &gt;= 18:\n    print(\"You are the chosen one and can start your journey!\")\nelse:\n    print(\"You are not the chosen one!\")\n\n\n\nYou are the chosen one still visiting school!"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#loops-1",
    "href": "part-02/lecture-control-presentation.html#loops-1",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loops",
    "text": "Loops\n\nLoops allow you to execute a block of code repeatedly\nThere are two types of loops: for and while\nfor loops are used to iterate over a sequence (e.g., list, tuple, string)\nwhile loops execute repeatedly until a condition is False\n\n\n\n\n\n\n\n\nTip\n\n\nNested control structures through further indentation are allowed as well, we thus can chain multiple control structures together."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#for-loops",
    "href": "part-02/lecture-control-presentation.html#for-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops",
    "text": "for-loops\n\nfor i in range(5):\n    print(i)\n\n\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(0, 10, 2):\n    print(i)\n\n\n\n0\n2\n4\n6\n8\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe range() function can take up to three arguments: start, stop, and step."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#for-loops-with-strings",
    "href": "part-02/lecture-control-presentation.html#for-loops-with-strings",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "for-loops with Strings",
    "text": "for-loops with Strings\n&gt; Question: What do you expect will be the output?\n\nfruit = \"yellow banana\"\nfor letter in fruit:\n    print(letter)\n\n\n\ny\ne\nl\nl\no\nw\n \nb\na\nn\na\nn\na"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#while-loops",
    "href": "part-02/lecture-control-presentation.html#while-loops",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while-loops",
    "text": "while-loops\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n\n\n0\n1\n2\n3\n4\n\n\n\n&gt; Question: What could be an issue with poorly written while-loops?"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#while-true",
    "href": "part-02/lecture-control-presentation.html#while-true",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "while True",
    "text": "while True\n&gt; Question: Anybody an idea what this code does?\n\ni = 0\nwhile True:\n    if i % 10 == 0:\n         print(i)\n    if i &gt; 100:\n        break\n    i += 1\n\n\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#importance-of-control-flow",
    "href": "part-02/lecture-control-presentation.html#importance-of-control-flow",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Importance of Control Flow",
    "text": "Importance of Control Flow\n\nAllows programs to make decisions based on conditions\nEnables repetition of code blocks\nHelps manage program complexity\nImproves efficiency by executing only necessary code\nFacilitates creation of dynamic, responsive programs\n\n\n\n\n\n\n\n\nNote\n\n\nWithout control flow, programs would execute linearly from top to bottom, limiting their functionality and flexibility."
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#loop-task",
    "href": "part-02/lecture-control-presentation.html#loop-task",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Loop Task",
    "text": "Loop Task\n&gt; Grouptask: Implement the following task:\n\n# Implement a while-loop that prints all even numbers between 0 and 100\nnumber = 0\n# Your code here\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered the basics on String methods, Comparisons, conditional statements and loops.\n\n\n\nLiterature {.title}"
  },
  {
    "objectID": "part-02/lecture-control-presentation.html#interesting-books-to-start",
    "href": "part-02/lecture-control-presentation.html#interesting-books-to-start",
    "title": "Lecture II - Control Structures for Your Code",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nTip\n\n\nNothing new here, but these are still great books to start with!\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture II - Control Structures for Your Code | Dr. Tobias Vlćek | Home"
  }
]